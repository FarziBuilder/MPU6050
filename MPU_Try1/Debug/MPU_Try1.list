
MPU_Try1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bbc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002cc8  08002cc8  00003cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d5c  08002d5c  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002d5c  08002d5c  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d5c  08002d5c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00003d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d60  08002d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002d64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08002dcc  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08002dcc  00004278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c2  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c7  00000000  00000000  0000e353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0000fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077b  00000000  00000000  000105b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d00  00000000  00000000  00010d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c195  00000000  00000000  00028a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865ac  00000000  00000000  00034bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee0  00000000  00000000  000bb1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000be098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cb0 	.word	0x08002cb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002cb0 	.word	0x08002cb0

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
  * @brief  The application entry point.
  * @retval int
  */

int _write(int le, char *ptr, int len)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:


int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 faf1 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f83d 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f8d5 	bl	800038c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e2:	f000 f8a9 	bl	8000338 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001e6:	f000 f879 	bl	80002dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (0b1101000 << 1) + 0, 1, 100);
 80001ea:	2364      	movs	r3, #100	@ 0x64
 80001ec:	2201      	movs	r2, #1
 80001ee:	21d0      	movs	r1, #208	@ 0xd0
 80001f0:	4813      	ldr	r0, [pc, #76]	@ (8000240 <main+0x70>)
 80001f2:	f000 ff79 	bl	80010e8 <HAL_I2C_IsDeviceReady>
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]

  if (ret == HAL_OK){
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d103      	bne.n	8000208 <main+0x38>
	  printf("Cool cool");
 8000200:	4810      	ldr	r0, [pc, #64]	@ (8000244 <main+0x74>)
 8000202:	f001 ff85 	bl	8002110 <iprintf>
 8000206:	e002      	b.n	800020e <main+0x3e>
	  //fflush(stdout);
  }else{
	  printf("Not cool");
 8000208:	480f      	ldr	r0, [pc, #60]	@ (8000248 <main+0x78>)
 800020a:	f001 ff81 	bl	8002110 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	printf("The Counter value: %d \r\n", count);
 800020e:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <main+0x7c>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4619      	mov	r1, r3
 8000214:	480e      	ldr	r0, [pc, #56]	@ (8000250 <main+0x80>)
 8000216:	f001 ff7b 	bl	8002110 <iprintf>
	count++;
 800021a:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <main+0x7c>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3301      	adds	r3, #1
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <main+0x7c>)
 8000224:	701a      	strb	r2, [r3, #0]
	fflush(stdout);
 8000226:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <main+0x84>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fe99 	bl	8001f64 <fflush>
	HAL_Delay(1000);
 8000232:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000236:	f000 fb23 	bl	8000880 <HAL_Delay>
	printf("The Counter value: %d \r\n", count);
 800023a:	bf00      	nop
 800023c:	e7e7      	b.n	800020e <main+0x3e>
 800023e:	bf00      	nop
 8000240:	20000084 	.word	0x20000084
 8000244:	08002cc8 	.word	0x08002cc8
 8000248:	08002cd4 	.word	0x08002cd4
 800024c:	20000120 	.word	0x20000120
 8000250:	08002ce0 	.word	0x08002ce0
 8000254:	20000018 	.word	0x20000018

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	@ 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	@ 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 ffa7 	bl	80021ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800028a:	2300      	movs	r3, #0
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800028e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f001 f8cd 	bl	8001438 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a4:	f000 f8e0 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fb3a 	bl	800193c <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ce:	f000 f8cb 	bl	8000468 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	@ 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <MX_I2C1_Init+0x50>)
 80002e2:	4a13      	ldr	r2, [pc, #76]	@ (8000330 <MX_I2C1_Init+0x54>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002e6:	4b11      	ldr	r3, [pc, #68]	@ (800032c <MX_I2C1_Init+0x50>)
 80002e8:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <MX_I2C1_Init+0x58>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <MX_I2C1_Init+0x50>)
 80002fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b09      	ldr	r3, [pc, #36]	@ (800032c <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030c:	4b07      	ldr	r3, [pc, #28]	@ (800032c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000312:	4b06      	ldr	r3, [pc, #24]	@ (800032c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <MX_I2C1_Init+0x50>)
 800031a:	f000 fda1 	bl	8000e60 <HAL_I2C_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 f8a0 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000084 	.word	0x20000084
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 800033e:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <MX_USART2_UART_Init+0x50>)
 8000340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 8000344:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 800035e:	220c      	movs	r2, #12
 8000360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000362:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	@ (8000384 <MX_USART2_UART_Init+0x4c>)
 8000370:	f001 fc72 	bl	8001c58 <HAL_UART_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800037a:	f000 f875 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000d8 	.word	0x200000d8
 8000388:	40004400 	.word	0x40004400

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0310 	and.w	r3, r3, #16
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b8:	4b27      	ldr	r3, [pc, #156]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a26      	ldr	r2, [pc, #152]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b24      	ldr	r3, [pc, #144]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0320 	and.w	r3, r3, #32
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b21      	ldr	r3, [pc, #132]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a20      	ldr	r2, [pc, #128]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b18      	ldr	r3, [pc, #96]	@ (8000458 <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2120      	movs	r1, #32
 8000404:	4815      	ldr	r0, [pc, #84]	@ (800045c <MX_GPIO_Init+0xd0>)
 8000406:	f000 fcf1 	bl	8000dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800040a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <MX_GPIO_Init+0xd4>)
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4619      	mov	r1, r3
 800041e:	4811      	ldr	r0, [pc, #68]	@ (8000464 <MX_GPIO_Init+0xd8>)
 8000420:	f000 fb60 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000424:	2320      	movs	r3, #32
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	4808      	ldr	r0, [pc, #32]	@ (800045c <MX_GPIO_Init+0xd0>)
 800043c:	f000 fb52 	bl	8000ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	2100      	movs	r1, #0
 8000444:	2028      	movs	r0, #40	@ 0x28
 8000446:	f000 fb16 	bl	8000a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800044a:	2028      	movs	r0, #40	@ 0x28
 800044c:	f000 fb2f 	bl	8000aae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800
 8000460:	10110000 	.word	0x10110000
 8000464:	40011000 	.word	0x40011000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <Error_Handler+0x8>

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <HAL_MspInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4a04      	ldr	r2, [pc, #16]	@ (80004d4 <HAL_MspInit+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	@ 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000568 <HAL_I2C_MspInit+0x90>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d132      	bne.n	800055e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <HAL_I2C_MspInit+0x94>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a1b      	ldr	r2, [pc, #108]	@ (800056c <HAL_I2C_MspInit+0x94>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b19      	ldr	r3, [pc, #100]	@ (800056c <HAL_I2C_MspInit+0x94>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0308 	and.w	r3, r3, #8
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000510:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000516:	2312      	movs	r3, #18
 8000518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051a:	2303      	movs	r3, #3
 800051c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	4812      	ldr	r0, [pc, #72]	@ (8000570 <HAL_I2C_MspInit+0x98>)
 8000526:	f000 fadd 	bl	8000ae4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <HAL_I2C_MspInit+0x9c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000532:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
 8000538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800053a:	f043 0302 	orr.w	r3, r3, #2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000540:	4a0c      	ldr	r2, [pc, #48]	@ (8000574 <HAL_I2C_MspInit+0x9c>)
 8000542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000544:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_I2C_MspInit+0x94>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a08      	ldr	r2, [pc, #32]	@ (800056c <HAL_I2C_MspInit+0x94>)
 800054c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <HAL_I2C_MspInit+0x94>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	@ 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40005400 	.word	0x40005400
 800056c:	40021000 	.word	0x40021000
 8000570:	40010c00 	.word	0x40010c00
 8000574:	40010000 	.word	0x40010000

08000578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <HAL_UART_MspInit+0x70>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d123      	bne.n	80005e0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <HAL_UART_MspInit+0x74>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <HAL_UART_MspInit+0x74>)
 800059e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a2:	61d3      	str	r3, [r2, #28]
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <HAL_UART_MspInit+0x74>)
 80005a6:	69db      	ldr	r3, [r3, #28]
 80005a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <HAL_UART_MspInit+0x74>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <HAL_UART_MspInit+0x74>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <HAL_UART_MspInit+0x74>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005c8:	230c      	movs	r3, #12
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <HAL_UART_MspInit+0x78>)
 80005dc:	f000 fa82 	bl	8000ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40004400 	.word	0x40004400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <NMI_Handler+0x4>

080005fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <MemManage_Handler+0x4>

0800060c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <UsageFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000644:	f000 f900 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000650:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000654:	f000 fbe2 	bl	8000e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e00a      	b.n	8000684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800066e:	f3af 8000 	nop.w
 8000672:	4601      	mov	r1, r0
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	60ba      	str	r2, [r7, #8]
 800067a:	b2ca      	uxtb	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbf0      	blt.n	800066e <_read+0x12>
  }

  return len;
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006bc:	605a      	str	r2, [r3, #4]
  return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <_isatty>:

int _isatty(int file)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006de:	b480      	push	{r7}
 80006e0:	b085      	sub	sp, #20
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000700:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <_sbrk+0x5c>)
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <_sbrk+0x60>)
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <_sbrk+0x64>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <_sbrk+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	d207      	bcs.n	8000738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000728:	f001 fd96 	bl	8002258 <__errno>
 800072c:	4603      	mov	r3, r0
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	e009      	b.n	800074c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073e:	4b07      	ldr	r3, [pc, #28]	@ (800075c <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	4a05      	ldr	r2, [pc, #20]	@ (800075c <_sbrk+0x64>)
 8000748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20005000 	.word	0x20005000
 8000758:	00000400 	.word	0x00000400
 800075c:	20000124 	.word	0x20000124
 8000760:	20000278 	.word	0x20000278

08000764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000770:	f7ff fff8 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000776:	490c      	ldr	r1, [pc, #48]	@ (80007a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000778:	4a0c      	ldr	r2, [pc, #48]	@ (80007ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a09      	ldr	r2, [pc, #36]	@ (80007b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800078c:	4c09      	ldr	r4, [pc, #36]	@ (80007b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079a:	f001 fd63 	bl	8002264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fd17 	bl	80001d0 <main>
  bx lr
 80007a2:	4770      	bx	lr
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007ac:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 80007b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007b4:	20000278 	.word	0x20000278

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>
	...

080007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <HAL_Init+0x28>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	@ (80007e4 <HAL_Init+0x28>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f947 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f808 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff fe4c 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_InitTick+0x54>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_InitTick+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f95f 	bl	8000aca <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 f927 	bl	8000a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	@ (8000844 <HAL_InitTick+0x5c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000000 	.word	0x20000000
 8000840:	20000008 	.word	0x20000008
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <HAL_IncTick+0x1c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <HAL_IncTick+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a03      	ldr	r2, [pc, #12]	@ (8000868 <HAL_IncTick+0x20>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000008 	.word	0x20000008
 8000868:	20000128 	.word	0x20000128

0800086c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b02      	ldr	r3, [pc, #8]	@ (800087c <HAL_GetTick+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000128 	.word	0x20000128

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff fff0 	bl	800086c <HAL_GetTick>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a6:	bf00      	nop
 80008a8:	f7ff ffe0 	bl	800086c <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008

080008c8 <__NVIC_SetPriorityGrouping>:
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4906      	ldr	r1, [pc, #24]	@ (8000960 <__NVIC_EnableIRQ+0x34>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	@ (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	@ (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	@ 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	@ 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Config>:
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff90 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff2d 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff42 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff90 	bl	80009b8 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5f 	bl	8000964 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff35 	bl	800092c <__NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffa2 	bl	8000a1c <SysTick_Config>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b08b      	sub	sp, #44	@ 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e169      	b.n	8000dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af8:	2201      	movs	r2, #1
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 8158 	bne.w	8000dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4a9a      	ldr	r2, [pc, #616]	@ (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d05e      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b20:	4a98      	ldr	r2, [pc, #608]	@ (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d875      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b26:	4a98      	ldr	r2, [pc, #608]	@ (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d058      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b2c:	4a96      	ldr	r2, [pc, #600]	@ (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d86f      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b32:	4a96      	ldr	r2, [pc, #600]	@ (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d052      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b38:	4a94      	ldr	r2, [pc, #592]	@ (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d869      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a94      	ldr	r2, [pc, #592]	@ (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d04c      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b44:	4a92      	ldr	r2, [pc, #584]	@ (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d863      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b4a:	4a92      	ldr	r2, [pc, #584]	@ (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d046      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b50:	4a90      	ldr	r2, [pc, #576]	@ (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d85d      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d82a      	bhi.n	8000bb0 <HAL_GPIO_Init+0xcc>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d859      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <HAL_GPIO_Init+0x80>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000bdf 	.word	0x08000bdf
 8000b68:	08000bb9 	.word	0x08000bb9
 8000b6c:	08000bcb 	.word	0x08000bcb
 8000b70:	08000c0d 	.word	0x08000c0d
 8000b74:	08000c13 	.word	0x08000c13
 8000b78:	08000c13 	.word	0x08000c13
 8000b7c:	08000c13 	.word	0x08000c13
 8000b80:	08000c13 	.word	0x08000c13
 8000b84:	08000c13 	.word	0x08000c13
 8000b88:	08000c13 	.word	0x08000c13
 8000b8c:	08000c13 	.word	0x08000c13
 8000b90:	08000c13 	.word	0x08000c13
 8000b94:	08000c13 	.word	0x08000c13
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000c13 	.word	0x08000c13
 8000ba0:	08000c13 	.word	0x08000c13
 8000ba4:	08000c13 	.word	0x08000c13
 8000ba8:	08000bc1 	.word	0x08000bc1
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	4a79      	ldr	r2, [pc, #484]	@ (8000d98 <HAL_GPIO_Init+0x2b4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb6:	e02c      	b.n	8000c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e029      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e024      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	3308      	adds	r3, #8
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e01f      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	330c      	adds	r3, #12
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e01a      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be6:	2304      	movs	r3, #4
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e013      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	611a      	str	r2, [r3, #16]
          break;
 8000bfe:	e009      	b.n	8000c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	615a      	str	r2, [r3, #20]
          break;
 8000c0a:	e003      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          break;
 8000c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2bff      	cmp	r3, #255	@ 0xff
 8000c18:	d801      	bhi.n	8000c1e <HAL_GPIO_Init+0x13a>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e001      	b.n	8000c22 <HAL_GPIO_Init+0x13e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3304      	adds	r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2bff      	cmp	r3, #255	@ 0xff
 8000c28:	d802      	bhi.n	8000c30 <HAL_GPIO_Init+0x14c>
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x152>
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	3b08      	subs	r3, #8
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	6a39      	ldr	r1, [r7, #32]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	431a      	orrs	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c64:	4b4d      	ldr	r3, [pc, #308]	@ (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a4c      	ldr	r2, [pc, #304]	@ (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b4a      	ldr	r3, [pc, #296]	@ (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c7c:	4a48      	ldr	r2, [pc, #288]	@ (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a40      	ldr	r2, [pc, #256]	@ (8000da4 <HAL_GPIO_Init+0x2c0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d013      	beq.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a3f      	ldr	r2, [pc, #252]	@ (8000da8 <HAL_GPIO_Init+0x2c4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d00d      	beq.n	8000ccc <HAL_GPIO_Init+0x1e8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dac <HAL_GPIO_Init+0x2c8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d007      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3d      	ldr	r2, [pc, #244]	@ (8000db0 <HAL_GPIO_Init+0x2cc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d101      	bne.n	8000cc4 <HAL_GPIO_Init+0x1e0>
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4093      	lsls	r3, r2
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce2:	492f      	ldr	r1, [pc, #188]	@ (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	492c      	ldr	r1, [pc, #176]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	608b      	str	r3, [r1, #8]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4928      	ldr	r1, [pc, #160]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d24:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	4922      	ldr	r1, [pc, #136]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60cb      	str	r3, [r1, #12]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	491e      	ldr	r1, [pc, #120]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4918      	ldr	r1, [pc, #96]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5a:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4914      	ldr	r1, [pc, #80]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d021      	beq.n	8000db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	490e      	ldr	r1, [pc, #56]	@ (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e021      	b.n	8000dc6 <HAL_GPIO_Init+0x2e2>
 8000d82:	bf00      	nop
 8000d84:	10320000 	.word	0x10320000
 8000d88:	10310000 	.word	0x10310000
 8000d8c:	10220000 	.word	0x10220000
 8000d90:	10210000 	.word	0x10210000
 8000d94:	10120000 	.word	0x10120000
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40011400 	.word	0x40011400
 8000db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_GPIO_Init+0x304>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4909      	ldr	r1, [pc, #36]	@ (8000de8 <HAL_GPIO_Init+0x304>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	3301      	adds	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f47f ae8e 	bne.w	8000af8 <HAL_GPIO_Init+0x14>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	372c      	adds	r7, #44	@ 0x2c
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dfc:	787b      	ldrb	r3, [r7, #1]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e08:	e003      	b.n	8000e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	611a      	str	r2, [r3, #16]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e32:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f806 	bl	8000e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e12b      	b.n	80010ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d106      	bne.n	8000e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fb26 	bl	80004d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2224      	movs	r2, #36	@ 0x24
 8000e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ec4:	f000 fe82 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8000ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4a81      	ldr	r2, [pc, #516]	@ (80010d4 <HAL_I2C_Init+0x274>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d807      	bhi.n	8000ee4 <HAL_I2C_Init+0x84>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4a80      	ldr	r2, [pc, #512]	@ (80010d8 <HAL_I2C_Init+0x278>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	bf94      	ite	ls
 8000edc:	2301      	movls	r3, #1
 8000ede:	2300      	movhi	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	e006      	b.n	8000ef2 <HAL_I2C_Init+0x92>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a7d      	ldr	r2, [pc, #500]	@ (80010dc <HAL_I2C_Init+0x27c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	bf94      	ite	ls
 8000eec:	2301      	movls	r3, #1
 8000eee:	2300      	movhi	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0e7      	b.n	80010ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4a78      	ldr	r2, [pc, #480]	@ (80010e0 <HAL_I2C_Init+0x280>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	0c9b      	lsrs	r3, r3, #18
 8000f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4a6a      	ldr	r2, [pc, #424]	@ (80010d4 <HAL_I2C_Init+0x274>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d802      	bhi.n	8000f34 <HAL_I2C_Init+0xd4>
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3301      	adds	r3, #1
 8000f32:	e009      	b.n	8000f48 <HAL_I2C_Init+0xe8>
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f3a:	fb02 f303 	mul.w	r3, r2, r3
 8000f3e:	4a69      	ldr	r2, [pc, #420]	@ (80010e4 <HAL_I2C_Init+0x284>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	099b      	lsrs	r3, r3, #6
 8000f46:	3301      	adds	r3, #1
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	495c      	ldr	r1, [pc, #368]	@ (80010d4 <HAL_I2C_Init+0x274>)
 8000f64:	428b      	cmp	r3, r1
 8000f66:	d819      	bhi.n	8000f9c <HAL_I2C_Init+0x13c>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	1e59      	subs	r1, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f76:	1c59      	adds	r1, r3, #1
 8000f78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <HAL_I2C_Init+0x138>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1e59      	subs	r1, r3, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f90:	3301      	adds	r3, #1
 8000f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f96:	e051      	b.n	800103c <HAL_I2C_Init+0x1dc>
 8000f98:	2304      	movs	r3, #4
 8000f9a:	e04f      	b.n	800103c <HAL_I2C_Init+0x1dc>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d111      	bne.n	8000fc8 <HAL_I2C_Init+0x168>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1e58      	subs	r0, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6859      	ldr	r1, [r3, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	440b      	add	r3, r1
 8000fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf0c      	ite	eq
 8000fc0:	2301      	moveq	r3, #1
 8000fc2:	2300      	movne	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	e012      	b.n	8000fee <HAL_I2C_Init+0x18e>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1e58      	subs	r0, r3, #1
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	0099      	lsls	r1, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_I2C_Init+0x196>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e022      	b.n	800103c <HAL_I2C_Init+0x1dc>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10e      	bne.n	800101c <HAL_I2C_Init+0x1bc>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1e58      	subs	r0, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	440b      	add	r3, r1
 800100c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001010:	3301      	adds	r3, #1
 8001012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800101a:	e00f      	b.n	800103c <HAL_I2C_Init+0x1dc>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e58      	subs	r0, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	0099      	lsls	r1, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001032:	3301      	adds	r3, #1
 8001034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001038:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	6809      	ldr	r1, [r1, #0]
 8001040:	4313      	orrs	r3, r2
 8001042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69da      	ldr	r2, [r3, #28]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800106a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6911      	ldr	r1, [r2, #16]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68d2      	ldr	r2, [r2, #12]
 8001076:	4311      	orrs	r1, r2
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	430b      	orrs	r3, r1
 800107e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2220      	movs	r2, #32
 80010b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	000186a0 	.word	0x000186a0
 80010d8:	001e847f 	.word	0x001e847f
 80010dc:	003d08ff 	.word	0x003d08ff
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	10624dd3 	.word	0x10624dd3

080010e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	460b      	mov	r3, r1
 80010f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fbb8 	bl	800086c <HAL_GetTick>
 80010fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b20      	cmp	r3, #32
 800110c:	f040 8111 	bne.w	8001332 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2319      	movs	r3, #25
 8001116:	2201      	movs	r2, #1
 8001118:	4988      	ldr	r1, [pc, #544]	@ (800133c <HAL_I2C_IsDeviceReady+0x254>)
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f912 	bl	8001344 <I2C_WaitOnFlagUntilTimeout>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001126:	2302      	movs	r3, #2
 8001128:	e104      	b.n	8001334 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_I2C_IsDeviceReady+0x50>
 8001134:	2302      	movs	r3, #2
 8001136:	e0fd      	b.n	8001334 <HAL_I2C_IsDeviceReady+0x24c>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b01      	cmp	r3, #1
 800114c:	d007      	beq.n	800115e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800116c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2224      	movs	r2, #36	@ 0x24
 8001172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a70      	ldr	r2, [pc, #448]	@ (8001340 <HAL_I2C_IsDeviceReady+0x258>)
 8001180:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001190:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f8d0 	bl	8001344 <I2C_WaitOnFlagUntilTimeout>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00d      	beq.n	80011c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011b8:	d103      	bne.n	80011c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e0b6      	b.n	8001334 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011c6:	897b      	ldrh	r3, [r7, #10]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80011d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fb49 	bl	800086c <HAL_GetTick>
 80011da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	bf0c      	ite	eq
 80011ea:	2301      	moveq	r3, #1
 80011ec:	2300      	movne	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001200:	bf0c      	ite	eq
 8001202:	2301      	moveq	r3, #1
 8001204:	2300      	movne	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800120a:	e025      	b.n	8001258 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800120c:	f7ff fb2e 	bl	800086c <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d302      	bcc.n	8001222 <HAL_I2C_IsDeviceReady+0x13a>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	22a0      	movs	r2, #160	@ 0xa0
 8001226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b02      	cmp	r3, #2
 8001236:	bf0c      	ite	eq
 8001238:	2301      	moveq	r3, #1
 800123a:	2300      	movne	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2ba0      	cmp	r3, #160	@ 0xa0
 8001262:	d005      	beq.n	8001270 <HAL_I2C_IsDeviceReady+0x188>
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <HAL_I2C_IsDeviceReady+0x188>
 800126a:	7dbb      	ldrb	r3, [r7, #22]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0cd      	beq.n	800120c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2220      	movs	r2, #32
 8001274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b02      	cmp	r3, #2
 8001284:	d129      	bne.n	80012da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001294:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2319      	movs	r3, #25
 80012b2:	2201      	movs	r2, #1
 80012b4:	4921      	ldr	r1, [pc, #132]	@ (800133c <HAL_I2C_IsDeviceReady+0x254>)
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f844 	bl	8001344 <I2C_WaitOnFlagUntilTimeout>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e036      	b.n	8001334 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e02c      	b.n	8001334 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80012f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2319      	movs	r3, #25
 80012fa:	2201      	movs	r2, #1
 80012fc:	490f      	ldr	r1, [pc, #60]	@ (800133c <HAL_I2C_IsDeviceReady+0x254>)
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 f820 	bl	8001344 <I2C_WaitOnFlagUntilTimeout>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e012      	b.n	8001334 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	3301      	adds	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	f4ff af32 	bcc.w	8001182 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2220      	movs	r2, #32
 8001322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001332:	2302      	movs	r3, #2
  }
}
 8001334:	4618      	mov	r0, r3
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	00100002 	.word	0x00100002
 8001340:	ffff0000 	.word	0xffff0000

08001344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001354:	e048      	b.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d044      	beq.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800135e:	f7ff fa85 	bl	800086c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d302      	bcc.n	8001374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d139      	bne.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	0c1b      	lsrs	r3, r3, #16
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10d      	bne.n	800139a <I2C_WaitOnFlagUntilTimeout+0x56>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	43da      	mvns	r2, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	4013      	ands	r3, r2
 800138a:	b29b      	uxth	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	e00c      	b.n	80013b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	43da      	mvns	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	4013      	ands	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d116      	bne.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	f043 0220 	orr.w	r2, r3, #32
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e023      	b.n	8001430 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	0c1b      	lsrs	r3, r3, #16
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d10d      	bne.n	800140e <I2C_WaitOnFlagUntilTimeout+0xca>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	43da      	mvns	r2, r3
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	4013      	ands	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	e00c      	b.n	8001428 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	43da      	mvns	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4013      	ands	r3, r2
 800141a:	b29b      	uxth	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	429a      	cmp	r2, r3
 800142c:	d093      	beq.n	8001356 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e272      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8087 	beq.w	8001566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001458:	4b92      	ldr	r3, [pc, #584]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b04      	cmp	r3, #4
 8001462:	d00c      	beq.n	800147e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001464:	4b8f      	ldr	r3, [pc, #572]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d112      	bne.n	8001496 <HAL_RCC_OscConfig+0x5e>
 8001470:	4b8c      	ldr	r3, [pc, #560]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147c:	d10b      	bne.n	8001496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147e:	4b89      	ldr	r3, [pc, #548]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <HAL_RCC_OscConfig+0x12c>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d168      	bne.n	8001564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e24c      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x76>
 80014a0:	4b80      	ldr	r3, [pc, #512]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a7f      	ldr	r2, [pc, #508]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e02e      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b7b      	ldr	r3, [pc, #492]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7a      	ldr	r2, [pc, #488]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b78      	ldr	r3, [pc, #480]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a77      	ldr	r2, [pc, #476]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01d      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0xbc>
 80014da:	4b72      	ldr	r3, [pc, #456]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a71      	ldr	r2, [pc, #452]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b6f      	ldr	r3, [pc, #444]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6e      	ldr	r2, [pc, #440]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014f4:	4b6b      	ldr	r3, [pc, #428]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a6a      	ldr	r2, [pc, #424]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b68      	ldr	r3, [pc, #416]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a67      	ldr	r2, [pc, #412]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff f9aa 	bl	800086c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff f9a6 	bl	800086c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e200      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b5d      	ldr	r3, [pc, #372]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xe4>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff f996 	bl	800086c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff f992 	bl	800086c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1ec      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b53      	ldr	r3, [pc, #332]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x10c>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d063      	beq.n	800163a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001572:	4b4c      	ldr	r3, [pc, #304]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800157e:	4b49      	ldr	r3, [pc, #292]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x18c>
 800158a:	4b46      	ldr	r3, [pc, #280]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x176>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1c0      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b3d      	ldr	r3, [pc, #244]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4939      	ldr	r1, [pc, #228]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	e03a      	b.n	800163a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015cc:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff f94b 	bl	800086c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff f947 	bl	800086c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1a1      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4927      	ldr	r1, [pc, #156]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e015      	b.n	800163a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160e:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff f92a 	bl	800086c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff f926 	bl	800086c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e180      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d03a      	beq.n	80016bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d019      	beq.n	8001682 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <HAL_RCC_OscConfig+0x274>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff f90a 	bl	800086c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff f906 	bl	800086c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e160      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800167a:	2001      	movs	r0, #1
 800167c:	f000 face 	bl	8001c1c <RCC_Delay>
 8001680:	e01c      	b.n	80016bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_RCC_OscConfig+0x274>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff f8f0 	bl	800086c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168e:	e00f      	b.n	80016b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff f8ec 	bl	800086c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d908      	bls.n	80016b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e146      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	42420000 	.word	0x42420000
 80016ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b92      	ldr	r3, [pc, #584]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e9      	bne.n	8001690 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a6 	beq.w	8001816 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b8b      	ldr	r3, [pc, #556]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10d      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b88      	ldr	r3, [pc, #544]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a87      	ldr	r2, [pc, #540]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b85      	ldr	r3, [pc, #532]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b82      	ldr	r3, [pc, #520]	@ (8001900 <HAL_RCC_OscConfig+0x4c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b7f      	ldr	r3, [pc, #508]	@ (8001900 <HAL_RCC_OscConfig+0x4c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7e      	ldr	r2, [pc, #504]	@ (8001900 <HAL_RCC_OscConfig+0x4c8>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff f8ad 	bl	800086c <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff f8a9 	bl	800086c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	@ 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e103      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b75      	ldr	r3, [pc, #468]	@ (8001900 <HAL_RCC_OscConfig+0x4c8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x312>
 800173c:	4b6f      	ldr	r3, [pc, #444]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a6e      	ldr	r2, [pc, #440]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e02d      	b.n	80017a6 <HAL_RCC_OscConfig+0x36e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x334>
 8001752:	4b6a      	ldr	r3, [pc, #424]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a69      	ldr	r2, [pc, #420]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b67      	ldr	r3, [pc, #412]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a66      	ldr	r2, [pc, #408]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	e01c      	b.n	80017a6 <HAL_RCC_OscConfig+0x36e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x356>
 8001774:	4b61      	ldr	r3, [pc, #388]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a60      	ldr	r2, [pc, #384]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	4b5e      	ldr	r3, [pc, #376]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a5d      	ldr	r2, [pc, #372]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	e00b      	b.n	80017a6 <HAL_RCC_OscConfig+0x36e>
 800178e:	4b5b      	ldr	r3, [pc, #364]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a5a      	ldr	r2, [pc, #360]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	4b58      	ldr	r3, [pc, #352]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a57      	ldr	r2, [pc, #348]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d015      	beq.n	80017da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f85d 	bl	800086c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff f859 	bl	800086c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0b1      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	4b4b      	ldr	r3, [pc, #300]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ee      	beq.n	80017b6 <HAL_RCC_OscConfig+0x37e>
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff f847 	bl	800086c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f843 	bl	800086c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e09b      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	4b40      	ldr	r3, [pc, #256]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ee      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b3c      	ldr	r3, [pc, #240]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a3b      	ldr	r2, [pc, #236]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8087 	beq.w	800192e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	4b36      	ldr	r3, [pc, #216]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d061      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d146      	bne.n	80018c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001834:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <HAL_RCC_OscConfig+0x4cc>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff f817 	bl	800086c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff f813 	bl	800086c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e06d      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001868:	d108      	bne.n	800187c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186a:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4921      	ldr	r1, [pc, #132]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a19      	ldr	r1, [r3, #32]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	430b      	orrs	r3, r1
 800188e:	491b      	ldr	r1, [pc, #108]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_RCC_OscConfig+0x4cc>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7fe ffe7 	bl	800086c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a2:	f7fe ffe3 	bl	800086c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e03d      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x46a>
 80018c0:	e035      	b.n	800192e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_RCC_OscConfig+0x4cc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe ffd0 	bl	800086c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7fe ffcc 	bl	800086c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e026      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x498>
 80018ee:	e01e      	b.n	800192e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e019      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
 80018fc:	40021000 	.word	0x40021000
 8001900:	40007000 	.word	0x40007000
 8001904:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_RCC_OscConfig+0x500>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d0      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b6a      	ldr	r3, [pc, #424]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b67      	ldr	r3, [pc, #412]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	4965      	ldr	r1, [pc, #404]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a58      	ldr	r2, [pc, #352]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a52      	ldr	r2, [pc, #328]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d040      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e073      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06b      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b39      	ldr	r3, [pc, #228]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4936      	ldr	r1, [pc, #216]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7fe ff1e 	bl	800086c <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7fe ff1a 	bl	800086c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e053      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d210      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 0207 	bic.w	r2, r3, #7
 8001a72:	4922      	ldr	r1, [pc, #136]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fe7c 	bl	80007e8 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08002cfc 	.word	0x08002cfc
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x30>
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x36>
 8001b3e:	e027      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b42:	613b      	str	r3, [r7, #16]
      break;
 8001b44:	e027      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d010      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	0c5b      	lsrs	r3, r3, #17
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b72:	fb03 f202 	mul.w	r2, r3, r2
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e004      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	613b      	str	r3, [r7, #16]
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b92:	613b      	str	r3, [r7, #16]
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	693b      	ldr	r3, [r7, #16]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	007a1200 	.word	0x007a1200
 8001bac:	08002d14 	.word	0x08002d14
 8001bb0:	08002d24 	.word	0x08002d24
 8001bb4:	003d0900 	.word	0x003d0900

08001bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	@ (8001bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd0:	f7ff fff2 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	@ (8001bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08002d0c 	.word	0x08002d0c

08001bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf8:	f7ff ffde 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	0adb      	lsrs	r3, r3, #11
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	@ (8001c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08002d0c 	.word	0x08002d0c

08001c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <RCC_Delay+0x34>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <RCC_Delay+0x38>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a5b      	lsrs	r3, r3, #9
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c38:	bf00      	nop
  }
  while (Delay --);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1e5a      	subs	r2, r3, #1
 8001c3e:	60fa      	str	r2, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f9      	bne.n	8001c38 <RCC_Delay+0x1c>
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000000 	.word	0x20000000
 8001c54:	10624dd3 	.word	0x10624dd3

08001c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e042      	b.n	8001cf0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fc7a 	bl	8000578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	@ 0x24
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f82b 	bl	8001cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001d32:	f023 030c 	bic.w	r3, r3, #12
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e0c <UART_SetConfig+0x114>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d103      	bne.n	8001d68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d60:	f7ff ff48 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	e002      	b.n	8001d6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d68:	f7ff ff30 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8001d6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009a      	lsls	r2, r3, #2
 8001d78:	441a      	add	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <UART_SetConfig+0x118>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	0119      	lsls	r1, r3, #4
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009a      	lsls	r2, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <UART_SetConfig+0x118>)
 8001da6:	fba3 0302 	umull	r0, r3, r3, r2
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2064      	movs	r0, #100	@ 0x64
 8001dae:	fb00 f303 	mul.w	r3, r0, r3
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	3332      	adds	r3, #50	@ 0x32
 8001db8:	4a15      	ldr	r2, [pc, #84]	@ (8001e10 <UART_SetConfig+0x118>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dc4:	4419      	add	r1, r3
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009a      	lsls	r2, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <UART_SetConfig+0x118>)
 8001dde:	fba3 0302 	umull	r0, r3, r3, r2
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2064      	movs	r0, #100	@ 0x64
 8001de6:	fb00 f303 	mul.w	r3, r0, r3
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	3332      	adds	r3, #50	@ 0x32
 8001df0:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <UART_SetConfig+0x118>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	440a      	add	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	51eb851f 	.word	0x51eb851f

08001e14 <__sflush_r>:
 8001e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1a:	0716      	lsls	r6, r2, #28
 8001e1c:	4605      	mov	r5, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	d454      	bmi.n	8001ecc <__sflush_r+0xb8>
 8001e22:	684b      	ldr	r3, [r1, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	dc02      	bgt.n	8001e2e <__sflush_r+0x1a>
 8001e28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	dd48      	ble.n	8001ec0 <__sflush_r+0xac>
 8001e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e30:	2e00      	cmp	r6, #0
 8001e32:	d045      	beq.n	8001ec0 <__sflush_r+0xac>
 8001e34:	2300      	movs	r3, #0
 8001e36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e3a:	682f      	ldr	r7, [r5, #0]
 8001e3c:	6a21      	ldr	r1, [r4, #32]
 8001e3e:	602b      	str	r3, [r5, #0]
 8001e40:	d030      	beq.n	8001ea4 <__sflush_r+0x90>
 8001e42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	0759      	lsls	r1, r3, #29
 8001e48:	d505      	bpl.n	8001e56 <__sflush_r+0x42>
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e50:	b10b      	cbz	r3, 8001e56 <__sflush_r+0x42>
 8001e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e54:	1ad2      	subs	r2, r2, r3
 8001e56:	2300      	movs	r3, #0
 8001e58:	4628      	mov	r0, r5
 8001e5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e5c:	6a21      	ldr	r1, [r4, #32]
 8001e5e:	47b0      	blx	r6
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	89a3      	ldrh	r3, [r4, #12]
 8001e64:	d106      	bne.n	8001e74 <__sflush_r+0x60>
 8001e66:	6829      	ldr	r1, [r5, #0]
 8001e68:	291d      	cmp	r1, #29
 8001e6a:	d82b      	bhi.n	8001ec4 <__sflush_r+0xb0>
 8001e6c:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <__sflush_r+0xfc>)
 8001e6e:	410a      	asrs	r2, r1
 8001e70:	07d6      	lsls	r6, r2, #31
 8001e72:	d427      	bmi.n	8001ec4 <__sflush_r+0xb0>
 8001e74:	2200      	movs	r2, #0
 8001e76:	6062      	str	r2, [r4, #4]
 8001e78:	6922      	ldr	r2, [r4, #16]
 8001e7a:	04d9      	lsls	r1, r3, #19
 8001e7c:	6022      	str	r2, [r4, #0]
 8001e7e:	d504      	bpl.n	8001e8a <__sflush_r+0x76>
 8001e80:	1c42      	adds	r2, r0, #1
 8001e82:	d101      	bne.n	8001e88 <__sflush_r+0x74>
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	b903      	cbnz	r3, 8001e8a <__sflush_r+0x76>
 8001e88:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e8c:	602f      	str	r7, [r5, #0]
 8001e8e:	b1b9      	cbz	r1, 8001ec0 <__sflush_r+0xac>
 8001e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e94:	4299      	cmp	r1, r3
 8001e96:	d002      	beq.n	8001e9e <__sflush_r+0x8a>
 8001e98:	4628      	mov	r0, r5
 8001e9a:	f000 fa0b 	bl	80022b4 <_free_r>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ea2:	e00d      	b.n	8001ec0 <__sflush_r+0xac>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	47b0      	blx	r6
 8001eaa:	4602      	mov	r2, r0
 8001eac:	1c50      	adds	r0, r2, #1
 8001eae:	d1c9      	bne.n	8001e44 <__sflush_r+0x30>
 8001eb0:	682b      	ldr	r3, [r5, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0c6      	beq.n	8001e44 <__sflush_r+0x30>
 8001eb6:	2b1d      	cmp	r3, #29
 8001eb8:	d001      	beq.n	8001ebe <__sflush_r+0xaa>
 8001eba:	2b16      	cmp	r3, #22
 8001ebc:	d11d      	bne.n	8001efa <__sflush_r+0xe6>
 8001ebe:	602f      	str	r7, [r5, #0]
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e021      	b.n	8001f08 <__sflush_r+0xf4>
 8001ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	e01a      	b.n	8001f02 <__sflush_r+0xee>
 8001ecc:	690f      	ldr	r7, [r1, #16]
 8001ece:	2f00      	cmp	r7, #0
 8001ed0:	d0f6      	beq.n	8001ec0 <__sflush_r+0xac>
 8001ed2:	0793      	lsls	r3, r2, #30
 8001ed4:	bf18      	it	ne
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	680e      	ldr	r6, [r1, #0]
 8001eda:	bf08      	it	eq
 8001edc:	694b      	ldreq	r3, [r1, #20]
 8001ede:	1bf6      	subs	r6, r6, r7
 8001ee0:	600f      	str	r7, [r1, #0]
 8001ee2:	608b      	str	r3, [r1, #8]
 8001ee4:	2e00      	cmp	r6, #0
 8001ee6:	ddeb      	ble.n	8001ec0 <__sflush_r+0xac>
 8001ee8:	4633      	mov	r3, r6
 8001eea:	463a      	mov	r2, r7
 8001eec:	4628      	mov	r0, r5
 8001eee:	6a21      	ldr	r1, [r4, #32]
 8001ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001ef4:	47e0      	blx	ip
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	dc07      	bgt.n	8001f0a <__sflush_r+0xf6>
 8001efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
 8001f06:	81a3      	strh	r3, [r4, #12]
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0a:	4407      	add	r7, r0
 8001f0c:	1a36      	subs	r6, r6, r0
 8001f0e:	e7e9      	b.n	8001ee4 <__sflush_r+0xd0>
 8001f10:	dfbffffe 	.word	0xdfbffffe

08001f14 <_fflush_r>:
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	690b      	ldr	r3, [r1, #16]
 8001f18:	4605      	mov	r5, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	b913      	cbnz	r3, 8001f24 <_fflush_r+0x10>
 8001f1e:	2500      	movs	r5, #0
 8001f20:	4628      	mov	r0, r5
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	b118      	cbz	r0, 8001f2e <_fflush_r+0x1a>
 8001f26:	6a03      	ldr	r3, [r0, #32]
 8001f28:	b90b      	cbnz	r3, 8001f2e <_fflush_r+0x1a>
 8001f2a:	f000 f8bb 	bl	80020a4 <__sinit>
 8001f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f3      	beq.n	8001f1e <_fflush_r+0xa>
 8001f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f38:	07d0      	lsls	r0, r2, #31
 8001f3a:	d404      	bmi.n	8001f46 <_fflush_r+0x32>
 8001f3c:	0599      	lsls	r1, r3, #22
 8001f3e:	d402      	bmi.n	8001f46 <_fflush_r+0x32>
 8001f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f42:	f000 f9b4 	bl	80022ae <__retarget_lock_acquire_recursive>
 8001f46:	4628      	mov	r0, r5
 8001f48:	4621      	mov	r1, r4
 8001f4a:	f7ff ff63 	bl	8001e14 <__sflush_r>
 8001f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f50:	4605      	mov	r5, r0
 8001f52:	07da      	lsls	r2, r3, #31
 8001f54:	d4e4      	bmi.n	8001f20 <_fflush_r+0xc>
 8001f56:	89a3      	ldrh	r3, [r4, #12]
 8001f58:	059b      	lsls	r3, r3, #22
 8001f5a:	d4e1      	bmi.n	8001f20 <_fflush_r+0xc>
 8001f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f5e:	f000 f9a7 	bl	80022b0 <__retarget_lock_release_recursive>
 8001f62:	e7dd      	b.n	8001f20 <_fflush_r+0xc>

08001f64 <fflush>:
 8001f64:	4601      	mov	r1, r0
 8001f66:	b920      	cbnz	r0, 8001f72 <fflush+0xe>
 8001f68:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <fflush+0x18>)
 8001f6a:	4905      	ldr	r1, [pc, #20]	@ (8001f80 <fflush+0x1c>)
 8001f6c:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <fflush+0x20>)
 8001f6e:	f000 b8b1 	b.w	80020d4 <_fwalk_sglue>
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <fflush+0x24>)
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	f7ff bfcd 	b.w	8001f14 <_fflush_r>
 8001f7a:	bf00      	nop
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	08001f15 	.word	0x08001f15
 8001f84:	2000001c 	.word	0x2000001c
 8001f88:	20000018 	.word	0x20000018

08001f8c <std>:
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	4604      	mov	r4, r0
 8001f92:	e9c0 3300 	strd	r3, r3, [r0]
 8001f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f9a:	6083      	str	r3, [r0, #8]
 8001f9c:	8181      	strh	r1, [r0, #12]
 8001f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001fa0:	81c2      	strh	r2, [r0, #14]
 8001fa2:	6183      	str	r3, [r0, #24]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	305c      	adds	r0, #92	@ 0x5c
 8001faa:	f000 f906 	bl	80021ba <memset>
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <std+0x58>)
 8001fb0:	6224      	str	r4, [r4, #32]
 8001fb2:	6263      	str	r3, [r4, #36]	@ 0x24
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <std+0x5c>)
 8001fb6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <std+0x60>)
 8001fba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <std+0x64>)
 8001fbe:	6323      	str	r3, [r4, #48]	@ 0x30
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <std+0x68>)
 8001fc2:	429c      	cmp	r4, r3
 8001fc4:	d006      	beq.n	8001fd4 <std+0x48>
 8001fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001fca:	4294      	cmp	r4, r2
 8001fcc:	d002      	beq.n	8001fd4 <std+0x48>
 8001fce:	33d0      	adds	r3, #208	@ 0xd0
 8001fd0:	429c      	cmp	r4, r3
 8001fd2:	d105      	bne.n	8001fe0 <std+0x54>
 8001fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fdc:	f000 b966 	b.w	80022ac <__retarget_lock_init_recursive>
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	08002135 	.word	0x08002135
 8001fe8:	08002157 	.word	0x08002157
 8001fec:	0800218f 	.word	0x0800218f
 8001ff0:	080021b3 	.word	0x080021b3
 8001ff4:	2000012c 	.word	0x2000012c

08001ff8 <stdio_exit_handler>:
 8001ff8:	4a02      	ldr	r2, [pc, #8]	@ (8002004 <stdio_exit_handler+0xc>)
 8001ffa:	4903      	ldr	r1, [pc, #12]	@ (8002008 <stdio_exit_handler+0x10>)
 8001ffc:	4803      	ldr	r0, [pc, #12]	@ (800200c <stdio_exit_handler+0x14>)
 8001ffe:	f000 b869 	b.w	80020d4 <_fwalk_sglue>
 8002002:	bf00      	nop
 8002004:	2000000c 	.word	0x2000000c
 8002008:	08001f15 	.word	0x08001f15
 800200c:	2000001c 	.word	0x2000001c

08002010 <cleanup_stdio>:
 8002010:	6841      	ldr	r1, [r0, #4]
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <cleanup_stdio+0x34>)
 8002014:	b510      	push	{r4, lr}
 8002016:	4299      	cmp	r1, r3
 8002018:	4604      	mov	r4, r0
 800201a:	d001      	beq.n	8002020 <cleanup_stdio+0x10>
 800201c:	f7ff ff7a 	bl	8001f14 <_fflush_r>
 8002020:	68a1      	ldr	r1, [r4, #8]
 8002022:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <cleanup_stdio+0x38>)
 8002024:	4299      	cmp	r1, r3
 8002026:	d002      	beq.n	800202e <cleanup_stdio+0x1e>
 8002028:	4620      	mov	r0, r4
 800202a:	f7ff ff73 	bl	8001f14 <_fflush_r>
 800202e:	68e1      	ldr	r1, [r4, #12]
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <cleanup_stdio+0x3c>)
 8002032:	4299      	cmp	r1, r3
 8002034:	d004      	beq.n	8002040 <cleanup_stdio+0x30>
 8002036:	4620      	mov	r0, r4
 8002038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800203c:	f7ff bf6a 	b.w	8001f14 <_fflush_r>
 8002040:	bd10      	pop	{r4, pc}
 8002042:	bf00      	nop
 8002044:	2000012c 	.word	0x2000012c
 8002048:	20000194 	.word	0x20000194
 800204c:	200001fc 	.word	0x200001fc

08002050 <global_stdio_init.part.0>:
 8002050:	b510      	push	{r4, lr}
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <global_stdio_init.part.0+0x30>)
 8002054:	4c0b      	ldr	r4, [pc, #44]	@ (8002084 <global_stdio_init.part.0+0x34>)
 8002056:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <global_stdio_init.part.0+0x38>)
 8002058:	4620      	mov	r0, r4
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	2104      	movs	r1, #4
 800205e:	2200      	movs	r2, #0
 8002060:	f7ff ff94 	bl	8001f8c <std>
 8002064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002068:	2201      	movs	r2, #1
 800206a:	2109      	movs	r1, #9
 800206c:	f7ff ff8e 	bl	8001f8c <std>
 8002070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002074:	2202      	movs	r2, #2
 8002076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800207a:	2112      	movs	r1, #18
 800207c:	f7ff bf86 	b.w	8001f8c <std>
 8002080:	20000264 	.word	0x20000264
 8002084:	2000012c 	.word	0x2000012c
 8002088:	08001ff9 	.word	0x08001ff9

0800208c <__sfp_lock_acquire>:
 800208c:	4801      	ldr	r0, [pc, #4]	@ (8002094 <__sfp_lock_acquire+0x8>)
 800208e:	f000 b90e 	b.w	80022ae <__retarget_lock_acquire_recursive>
 8002092:	bf00      	nop
 8002094:	2000026d 	.word	0x2000026d

08002098 <__sfp_lock_release>:
 8002098:	4801      	ldr	r0, [pc, #4]	@ (80020a0 <__sfp_lock_release+0x8>)
 800209a:	f000 b909 	b.w	80022b0 <__retarget_lock_release_recursive>
 800209e:	bf00      	nop
 80020a0:	2000026d 	.word	0x2000026d

080020a4 <__sinit>:
 80020a4:	b510      	push	{r4, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	f7ff fff0 	bl	800208c <__sfp_lock_acquire>
 80020ac:	6a23      	ldr	r3, [r4, #32]
 80020ae:	b11b      	cbz	r3, 80020b8 <__sinit+0x14>
 80020b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020b4:	f7ff bff0 	b.w	8002098 <__sfp_lock_release>
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__sinit+0x28>)
 80020ba:	6223      	str	r3, [r4, #32]
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__sinit+0x2c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f5      	bne.n	80020b0 <__sinit+0xc>
 80020c4:	f7ff ffc4 	bl	8002050 <global_stdio_init.part.0>
 80020c8:	e7f2      	b.n	80020b0 <__sinit+0xc>
 80020ca:	bf00      	nop
 80020cc:	08002011 	.word	0x08002011
 80020d0:	20000264 	.word	0x20000264

080020d4 <_fwalk_sglue>:
 80020d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020d8:	4607      	mov	r7, r0
 80020da:	4688      	mov	r8, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	2600      	movs	r6, #0
 80020e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020e4:	f1b9 0901 	subs.w	r9, r9, #1
 80020e8:	d505      	bpl.n	80020f6 <_fwalk_sglue+0x22>
 80020ea:	6824      	ldr	r4, [r4, #0]
 80020ec:	2c00      	cmp	r4, #0
 80020ee:	d1f7      	bne.n	80020e0 <_fwalk_sglue+0xc>
 80020f0:	4630      	mov	r0, r6
 80020f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020f6:	89ab      	ldrh	r3, [r5, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d907      	bls.n	800210c <_fwalk_sglue+0x38>
 80020fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002100:	3301      	adds	r3, #1
 8002102:	d003      	beq.n	800210c <_fwalk_sglue+0x38>
 8002104:	4629      	mov	r1, r5
 8002106:	4638      	mov	r0, r7
 8002108:	47c0      	blx	r8
 800210a:	4306      	orrs	r6, r0
 800210c:	3568      	adds	r5, #104	@ 0x68
 800210e:	e7e9      	b.n	80020e4 <_fwalk_sglue+0x10>

08002110 <iprintf>:
 8002110:	b40f      	push	{r0, r1, r2, r3}
 8002112:	b507      	push	{r0, r1, r2, lr}
 8002114:	4906      	ldr	r1, [pc, #24]	@ (8002130 <iprintf+0x20>)
 8002116:	ab04      	add	r3, sp, #16
 8002118:	6808      	ldr	r0, [r1, #0]
 800211a:	f853 2b04 	ldr.w	r2, [r3], #4
 800211e:	6881      	ldr	r1, [r0, #8]
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f000 f9e5 	bl	80024f0 <_vfiprintf_r>
 8002126:	b003      	add	sp, #12
 8002128:	f85d eb04 	ldr.w	lr, [sp], #4
 800212c:	b004      	add	sp, #16
 800212e:	4770      	bx	lr
 8002130:	20000018 	.word	0x20000018

08002134 <__sread>:
 8002134:	b510      	push	{r4, lr}
 8002136:	460c      	mov	r4, r1
 8002138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800213c:	f000 f868 	bl	8002210 <_read_r>
 8002140:	2800      	cmp	r0, #0
 8002142:	bfab      	itete	ge
 8002144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002146:	89a3      	ldrhlt	r3, [r4, #12]
 8002148:	181b      	addge	r3, r3, r0
 800214a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800214e:	bfac      	ite	ge
 8002150:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002152:	81a3      	strhlt	r3, [r4, #12]
 8002154:	bd10      	pop	{r4, pc}

08002156 <__swrite>:
 8002156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800215a:	461f      	mov	r7, r3
 800215c:	898b      	ldrh	r3, [r1, #12]
 800215e:	4605      	mov	r5, r0
 8002160:	05db      	lsls	r3, r3, #23
 8002162:	460c      	mov	r4, r1
 8002164:	4616      	mov	r6, r2
 8002166:	d505      	bpl.n	8002174 <__swrite+0x1e>
 8002168:	2302      	movs	r3, #2
 800216a:	2200      	movs	r2, #0
 800216c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002170:	f000 f83c 	bl	80021ec <_lseek_r>
 8002174:	89a3      	ldrh	r3, [r4, #12]
 8002176:	4632      	mov	r2, r6
 8002178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800217c:	81a3      	strh	r3, [r4, #12]
 800217e:	4628      	mov	r0, r5
 8002180:	463b      	mov	r3, r7
 8002182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800218a:	f000 b853 	b.w	8002234 <_write_r>

0800218e <__sseek>:
 800218e:	b510      	push	{r4, lr}
 8002190:	460c      	mov	r4, r1
 8002192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002196:	f000 f829 	bl	80021ec <_lseek_r>
 800219a:	1c43      	adds	r3, r0, #1
 800219c:	89a3      	ldrh	r3, [r4, #12]
 800219e:	bf15      	itete	ne
 80021a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80021a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80021a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80021aa:	81a3      	strheq	r3, [r4, #12]
 80021ac:	bf18      	it	ne
 80021ae:	81a3      	strhne	r3, [r4, #12]
 80021b0:	bd10      	pop	{r4, pc}

080021b2 <__sclose>:
 80021b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021b6:	f000 b809 	b.w	80021cc <_close_r>

080021ba <memset>:
 80021ba:	4603      	mov	r3, r0
 80021bc:	4402      	add	r2, r0
 80021be:	4293      	cmp	r3, r2
 80021c0:	d100      	bne.n	80021c4 <memset+0xa>
 80021c2:	4770      	bx	lr
 80021c4:	f803 1b01 	strb.w	r1, [r3], #1
 80021c8:	e7f9      	b.n	80021be <memset+0x4>
	...

080021cc <_close_r>:
 80021cc:	b538      	push	{r3, r4, r5, lr}
 80021ce:	2300      	movs	r3, #0
 80021d0:	4d05      	ldr	r5, [pc, #20]	@ (80021e8 <_close_r+0x1c>)
 80021d2:	4604      	mov	r4, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	602b      	str	r3, [r5, #0]
 80021d8:	f7fe fa5d 	bl	8000696 <_close>
 80021dc:	1c43      	adds	r3, r0, #1
 80021de:	d102      	bne.n	80021e6 <_close_r+0x1a>
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	b103      	cbz	r3, 80021e6 <_close_r+0x1a>
 80021e4:	6023      	str	r3, [r4, #0]
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	20000268 	.word	0x20000268

080021ec <_lseek_r>:
 80021ec:	b538      	push	{r3, r4, r5, lr}
 80021ee:	4604      	mov	r4, r0
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	2200      	movs	r2, #0
 80021f6:	4d05      	ldr	r5, [pc, #20]	@ (800220c <_lseek_r+0x20>)
 80021f8:	602a      	str	r2, [r5, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7fe fa6f 	bl	80006de <_lseek>
 8002200:	1c43      	adds	r3, r0, #1
 8002202:	d102      	bne.n	800220a <_lseek_r+0x1e>
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	b103      	cbz	r3, 800220a <_lseek_r+0x1e>
 8002208:	6023      	str	r3, [r4, #0]
 800220a:	bd38      	pop	{r3, r4, r5, pc}
 800220c:	20000268 	.word	0x20000268

08002210 <_read_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	2200      	movs	r2, #0
 800221a:	4d05      	ldr	r5, [pc, #20]	@ (8002230 <_read_r+0x20>)
 800221c:	602a      	str	r2, [r5, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	f7fe fa1c 	bl	800065c <_read>
 8002224:	1c43      	adds	r3, r0, #1
 8002226:	d102      	bne.n	800222e <_read_r+0x1e>
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	b103      	cbz	r3, 800222e <_read_r+0x1e>
 800222c:	6023      	str	r3, [r4, #0]
 800222e:	bd38      	pop	{r3, r4, r5, pc}
 8002230:	20000268 	.word	0x20000268

08002234 <_write_r>:
 8002234:	b538      	push	{r3, r4, r5, lr}
 8002236:	4604      	mov	r4, r0
 8002238:	4608      	mov	r0, r1
 800223a:	4611      	mov	r1, r2
 800223c:	2200      	movs	r2, #0
 800223e:	4d05      	ldr	r5, [pc, #20]	@ (8002254 <_write_r+0x20>)
 8002240:	602a      	str	r2, [r5, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	f7fd ffa8 	bl	8000198 <_write>
 8002248:	1c43      	adds	r3, r0, #1
 800224a:	d102      	bne.n	8002252 <_write_r+0x1e>
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	b103      	cbz	r3, 8002252 <_write_r+0x1e>
 8002250:	6023      	str	r3, [r4, #0]
 8002252:	bd38      	pop	{r3, r4, r5, pc}
 8002254:	20000268 	.word	0x20000268

08002258 <__errno>:
 8002258:	4b01      	ldr	r3, [pc, #4]	@ (8002260 <__errno+0x8>)
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000018 	.word	0x20000018

08002264 <__libc_init_array>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	2600      	movs	r6, #0
 8002268:	4d0c      	ldr	r5, [pc, #48]	@ (800229c <__libc_init_array+0x38>)
 800226a:	4c0d      	ldr	r4, [pc, #52]	@ (80022a0 <__libc_init_array+0x3c>)
 800226c:	1b64      	subs	r4, r4, r5
 800226e:	10a4      	asrs	r4, r4, #2
 8002270:	42a6      	cmp	r6, r4
 8002272:	d109      	bne.n	8002288 <__libc_init_array+0x24>
 8002274:	f000 fd1c 	bl	8002cb0 <_init>
 8002278:	2600      	movs	r6, #0
 800227a:	4d0a      	ldr	r5, [pc, #40]	@ (80022a4 <__libc_init_array+0x40>)
 800227c:	4c0a      	ldr	r4, [pc, #40]	@ (80022a8 <__libc_init_array+0x44>)
 800227e:	1b64      	subs	r4, r4, r5
 8002280:	10a4      	asrs	r4, r4, #2
 8002282:	42a6      	cmp	r6, r4
 8002284:	d105      	bne.n	8002292 <__libc_init_array+0x2e>
 8002286:	bd70      	pop	{r4, r5, r6, pc}
 8002288:	f855 3b04 	ldr.w	r3, [r5], #4
 800228c:	4798      	blx	r3
 800228e:	3601      	adds	r6, #1
 8002290:	e7ee      	b.n	8002270 <__libc_init_array+0xc>
 8002292:	f855 3b04 	ldr.w	r3, [r5], #4
 8002296:	4798      	blx	r3
 8002298:	3601      	adds	r6, #1
 800229a:	e7f2      	b.n	8002282 <__libc_init_array+0x1e>
 800229c:	08002d5c 	.word	0x08002d5c
 80022a0:	08002d5c 	.word	0x08002d5c
 80022a4:	08002d5c 	.word	0x08002d5c
 80022a8:	08002d60 	.word	0x08002d60

080022ac <__retarget_lock_init_recursive>:
 80022ac:	4770      	bx	lr

080022ae <__retarget_lock_acquire_recursive>:
 80022ae:	4770      	bx	lr

080022b0 <__retarget_lock_release_recursive>:
 80022b0:	4770      	bx	lr
	...

080022b4 <_free_r>:
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4605      	mov	r5, r0
 80022b8:	2900      	cmp	r1, #0
 80022ba:	d040      	beq.n	800233e <_free_r+0x8a>
 80022bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022c0:	1f0c      	subs	r4, r1, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bfb8      	it	lt
 80022c6:	18e4      	addlt	r4, r4, r3
 80022c8:	f000 f8de 	bl	8002488 <__malloc_lock>
 80022cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <_free_r+0x8c>)
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	b933      	cbnz	r3, 80022e0 <_free_r+0x2c>
 80022d2:	6063      	str	r3, [r4, #4]
 80022d4:	6014      	str	r4, [r2, #0]
 80022d6:	4628      	mov	r0, r5
 80022d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022dc:	f000 b8da 	b.w	8002494 <__malloc_unlock>
 80022e0:	42a3      	cmp	r3, r4
 80022e2:	d908      	bls.n	80022f6 <_free_r+0x42>
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	1821      	adds	r1, r4, r0
 80022e8:	428b      	cmp	r3, r1
 80022ea:	bf01      	itttt	eq
 80022ec:	6819      	ldreq	r1, [r3, #0]
 80022ee:	685b      	ldreq	r3, [r3, #4]
 80022f0:	1809      	addeq	r1, r1, r0
 80022f2:	6021      	streq	r1, [r4, #0]
 80022f4:	e7ed      	b.n	80022d2 <_free_r+0x1e>
 80022f6:	461a      	mov	r2, r3
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	b10b      	cbz	r3, 8002300 <_free_r+0x4c>
 80022fc:	42a3      	cmp	r3, r4
 80022fe:	d9fa      	bls.n	80022f6 <_free_r+0x42>
 8002300:	6811      	ldr	r1, [r2, #0]
 8002302:	1850      	adds	r0, r2, r1
 8002304:	42a0      	cmp	r0, r4
 8002306:	d10b      	bne.n	8002320 <_free_r+0x6c>
 8002308:	6820      	ldr	r0, [r4, #0]
 800230a:	4401      	add	r1, r0
 800230c:	1850      	adds	r0, r2, r1
 800230e:	4283      	cmp	r3, r0
 8002310:	6011      	str	r1, [r2, #0]
 8002312:	d1e0      	bne.n	80022d6 <_free_r+0x22>
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4408      	add	r0, r1
 800231a:	6010      	str	r0, [r2, #0]
 800231c:	6053      	str	r3, [r2, #4]
 800231e:	e7da      	b.n	80022d6 <_free_r+0x22>
 8002320:	d902      	bls.n	8002328 <_free_r+0x74>
 8002322:	230c      	movs	r3, #12
 8002324:	602b      	str	r3, [r5, #0]
 8002326:	e7d6      	b.n	80022d6 <_free_r+0x22>
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	1821      	adds	r1, r4, r0
 800232c:	428b      	cmp	r3, r1
 800232e:	bf01      	itttt	eq
 8002330:	6819      	ldreq	r1, [r3, #0]
 8002332:	685b      	ldreq	r3, [r3, #4]
 8002334:	1809      	addeq	r1, r1, r0
 8002336:	6021      	streq	r1, [r4, #0]
 8002338:	6063      	str	r3, [r4, #4]
 800233a:	6054      	str	r4, [r2, #4]
 800233c:	e7cb      	b.n	80022d6 <_free_r+0x22>
 800233e:	bd38      	pop	{r3, r4, r5, pc}
 8002340:	20000274 	.word	0x20000274

08002344 <sbrk_aligned>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	4e0f      	ldr	r6, [pc, #60]	@ (8002384 <sbrk_aligned+0x40>)
 8002348:	460c      	mov	r4, r1
 800234a:	6831      	ldr	r1, [r6, #0]
 800234c:	4605      	mov	r5, r0
 800234e:	b911      	cbnz	r1, 8002356 <sbrk_aligned+0x12>
 8002350:	f000 fc0c 	bl	8002b6c <_sbrk_r>
 8002354:	6030      	str	r0, [r6, #0]
 8002356:	4621      	mov	r1, r4
 8002358:	4628      	mov	r0, r5
 800235a:	f000 fc07 	bl	8002b6c <_sbrk_r>
 800235e:	1c43      	adds	r3, r0, #1
 8002360:	d103      	bne.n	800236a <sbrk_aligned+0x26>
 8002362:	f04f 34ff 	mov.w	r4, #4294967295
 8002366:	4620      	mov	r0, r4
 8002368:	bd70      	pop	{r4, r5, r6, pc}
 800236a:	1cc4      	adds	r4, r0, #3
 800236c:	f024 0403 	bic.w	r4, r4, #3
 8002370:	42a0      	cmp	r0, r4
 8002372:	d0f8      	beq.n	8002366 <sbrk_aligned+0x22>
 8002374:	1a21      	subs	r1, r4, r0
 8002376:	4628      	mov	r0, r5
 8002378:	f000 fbf8 	bl	8002b6c <_sbrk_r>
 800237c:	3001      	adds	r0, #1
 800237e:	d1f2      	bne.n	8002366 <sbrk_aligned+0x22>
 8002380:	e7ef      	b.n	8002362 <sbrk_aligned+0x1e>
 8002382:	bf00      	nop
 8002384:	20000270 	.word	0x20000270

08002388 <_malloc_r>:
 8002388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800238c:	1ccd      	adds	r5, r1, #3
 800238e:	f025 0503 	bic.w	r5, r5, #3
 8002392:	3508      	adds	r5, #8
 8002394:	2d0c      	cmp	r5, #12
 8002396:	bf38      	it	cc
 8002398:	250c      	movcc	r5, #12
 800239a:	2d00      	cmp	r5, #0
 800239c:	4606      	mov	r6, r0
 800239e:	db01      	blt.n	80023a4 <_malloc_r+0x1c>
 80023a0:	42a9      	cmp	r1, r5
 80023a2:	d904      	bls.n	80023ae <_malloc_r+0x26>
 80023a4:	230c      	movs	r3, #12
 80023a6:	6033      	str	r3, [r6, #0]
 80023a8:	2000      	movs	r0, #0
 80023aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002484 <_malloc_r+0xfc>
 80023b2:	f000 f869 	bl	8002488 <__malloc_lock>
 80023b6:	f8d8 3000 	ldr.w	r3, [r8]
 80023ba:	461c      	mov	r4, r3
 80023bc:	bb44      	cbnz	r4, 8002410 <_malloc_r+0x88>
 80023be:	4629      	mov	r1, r5
 80023c0:	4630      	mov	r0, r6
 80023c2:	f7ff ffbf 	bl	8002344 <sbrk_aligned>
 80023c6:	1c43      	adds	r3, r0, #1
 80023c8:	4604      	mov	r4, r0
 80023ca:	d158      	bne.n	800247e <_malloc_r+0xf6>
 80023cc:	f8d8 4000 	ldr.w	r4, [r8]
 80023d0:	4627      	mov	r7, r4
 80023d2:	2f00      	cmp	r7, #0
 80023d4:	d143      	bne.n	800245e <_malloc_r+0xd6>
 80023d6:	2c00      	cmp	r4, #0
 80023d8:	d04b      	beq.n	8002472 <_malloc_r+0xea>
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	4639      	mov	r1, r7
 80023de:	4630      	mov	r0, r6
 80023e0:	eb04 0903 	add.w	r9, r4, r3
 80023e4:	f000 fbc2 	bl	8002b6c <_sbrk_r>
 80023e8:	4581      	cmp	r9, r0
 80023ea:	d142      	bne.n	8002472 <_malloc_r+0xea>
 80023ec:	6821      	ldr	r1, [r4, #0]
 80023ee:	4630      	mov	r0, r6
 80023f0:	1a6d      	subs	r5, r5, r1
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7ff ffa6 	bl	8002344 <sbrk_aligned>
 80023f8:	3001      	adds	r0, #1
 80023fa:	d03a      	beq.n	8002472 <_malloc_r+0xea>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	442b      	add	r3, r5
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	f8d8 3000 	ldr.w	r3, [r8]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	bb62      	cbnz	r2, 8002464 <_malloc_r+0xdc>
 800240a:	f8c8 7000 	str.w	r7, [r8]
 800240e:	e00f      	b.n	8002430 <_malloc_r+0xa8>
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	1b52      	subs	r2, r2, r5
 8002414:	d420      	bmi.n	8002458 <_malloc_r+0xd0>
 8002416:	2a0b      	cmp	r2, #11
 8002418:	d917      	bls.n	800244a <_malloc_r+0xc2>
 800241a:	1961      	adds	r1, r4, r5
 800241c:	42a3      	cmp	r3, r4
 800241e:	6025      	str	r5, [r4, #0]
 8002420:	bf18      	it	ne
 8002422:	6059      	strne	r1, [r3, #4]
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	bf08      	it	eq
 8002428:	f8c8 1000 	streq.w	r1, [r8]
 800242c:	5162      	str	r2, [r4, r5]
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	4630      	mov	r0, r6
 8002432:	f000 f82f 	bl	8002494 <__malloc_unlock>
 8002436:	f104 000b 	add.w	r0, r4, #11
 800243a:	1d23      	adds	r3, r4, #4
 800243c:	f020 0007 	bic.w	r0, r0, #7
 8002440:	1ac2      	subs	r2, r0, r3
 8002442:	bf1c      	itt	ne
 8002444:	1a1b      	subne	r3, r3, r0
 8002446:	50a3      	strne	r3, [r4, r2]
 8002448:	e7af      	b.n	80023aa <_malloc_r+0x22>
 800244a:	6862      	ldr	r2, [r4, #4]
 800244c:	42a3      	cmp	r3, r4
 800244e:	bf0c      	ite	eq
 8002450:	f8c8 2000 	streq.w	r2, [r8]
 8002454:	605a      	strne	r2, [r3, #4]
 8002456:	e7eb      	b.n	8002430 <_malloc_r+0xa8>
 8002458:	4623      	mov	r3, r4
 800245a:	6864      	ldr	r4, [r4, #4]
 800245c:	e7ae      	b.n	80023bc <_malloc_r+0x34>
 800245e:	463c      	mov	r4, r7
 8002460:	687f      	ldr	r7, [r7, #4]
 8002462:	e7b6      	b.n	80023d2 <_malloc_r+0x4a>
 8002464:	461a      	mov	r2, r3
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	42a3      	cmp	r3, r4
 800246a:	d1fb      	bne.n	8002464 <_malloc_r+0xdc>
 800246c:	2300      	movs	r3, #0
 800246e:	6053      	str	r3, [r2, #4]
 8002470:	e7de      	b.n	8002430 <_malloc_r+0xa8>
 8002472:	230c      	movs	r3, #12
 8002474:	4630      	mov	r0, r6
 8002476:	6033      	str	r3, [r6, #0]
 8002478:	f000 f80c 	bl	8002494 <__malloc_unlock>
 800247c:	e794      	b.n	80023a8 <_malloc_r+0x20>
 800247e:	6005      	str	r5, [r0, #0]
 8002480:	e7d6      	b.n	8002430 <_malloc_r+0xa8>
 8002482:	bf00      	nop
 8002484:	20000274 	.word	0x20000274

08002488 <__malloc_lock>:
 8002488:	4801      	ldr	r0, [pc, #4]	@ (8002490 <__malloc_lock+0x8>)
 800248a:	f7ff bf10 	b.w	80022ae <__retarget_lock_acquire_recursive>
 800248e:	bf00      	nop
 8002490:	2000026c 	.word	0x2000026c

08002494 <__malloc_unlock>:
 8002494:	4801      	ldr	r0, [pc, #4]	@ (800249c <__malloc_unlock+0x8>)
 8002496:	f7ff bf0b 	b.w	80022b0 <__retarget_lock_release_recursive>
 800249a:	bf00      	nop
 800249c:	2000026c 	.word	0x2000026c

080024a0 <__sfputc_r>:
 80024a0:	6893      	ldr	r3, [r2, #8]
 80024a2:	b410      	push	{r4}
 80024a4:	3b01      	subs	r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	6093      	str	r3, [r2, #8]
 80024aa:	da07      	bge.n	80024bc <__sfputc_r+0x1c>
 80024ac:	6994      	ldr	r4, [r2, #24]
 80024ae:	42a3      	cmp	r3, r4
 80024b0:	db01      	blt.n	80024b6 <__sfputc_r+0x16>
 80024b2:	290a      	cmp	r1, #10
 80024b4:	d102      	bne.n	80024bc <__sfputc_r+0x1c>
 80024b6:	bc10      	pop	{r4}
 80024b8:	f000 bac4 	b.w	8002a44 <__swbuf_r>
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	1c58      	adds	r0, r3, #1
 80024c0:	6010      	str	r0, [r2, #0]
 80024c2:	7019      	strb	r1, [r3, #0]
 80024c4:	4608      	mov	r0, r1
 80024c6:	bc10      	pop	{r4}
 80024c8:	4770      	bx	lr

080024ca <__sfputs_r>:
 80024ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024cc:	4606      	mov	r6, r0
 80024ce:	460f      	mov	r7, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	18d5      	adds	r5, r2, r3
 80024d4:	42ac      	cmp	r4, r5
 80024d6:	d101      	bne.n	80024dc <__sfputs_r+0x12>
 80024d8:	2000      	movs	r0, #0
 80024da:	e007      	b.n	80024ec <__sfputs_r+0x22>
 80024dc:	463a      	mov	r2, r7
 80024de:	4630      	mov	r0, r6
 80024e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024e4:	f7ff ffdc 	bl	80024a0 <__sfputc_r>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d1f3      	bne.n	80024d4 <__sfputs_r+0xa>
 80024ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024f0 <_vfiprintf_r>:
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	460d      	mov	r5, r1
 80024f6:	4614      	mov	r4, r2
 80024f8:	4698      	mov	r8, r3
 80024fa:	4606      	mov	r6, r0
 80024fc:	b09d      	sub	sp, #116	@ 0x74
 80024fe:	b118      	cbz	r0, 8002508 <_vfiprintf_r+0x18>
 8002500:	6a03      	ldr	r3, [r0, #32]
 8002502:	b90b      	cbnz	r3, 8002508 <_vfiprintf_r+0x18>
 8002504:	f7ff fdce 	bl	80020a4 <__sinit>
 8002508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800250a:	07d9      	lsls	r1, r3, #31
 800250c:	d405      	bmi.n	800251a <_vfiprintf_r+0x2a>
 800250e:	89ab      	ldrh	r3, [r5, #12]
 8002510:	059a      	lsls	r2, r3, #22
 8002512:	d402      	bmi.n	800251a <_vfiprintf_r+0x2a>
 8002514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002516:	f7ff feca 	bl	80022ae <__retarget_lock_acquire_recursive>
 800251a:	89ab      	ldrh	r3, [r5, #12]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	d501      	bpl.n	8002524 <_vfiprintf_r+0x34>
 8002520:	692b      	ldr	r3, [r5, #16]
 8002522:	b99b      	cbnz	r3, 800254c <_vfiprintf_r+0x5c>
 8002524:	4629      	mov	r1, r5
 8002526:	4630      	mov	r0, r6
 8002528:	f000 faca 	bl	8002ac0 <__swsetup_r>
 800252c:	b170      	cbz	r0, 800254c <_vfiprintf_r+0x5c>
 800252e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002530:	07dc      	lsls	r4, r3, #31
 8002532:	d504      	bpl.n	800253e <_vfiprintf_r+0x4e>
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	b01d      	add	sp, #116	@ 0x74
 800253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800253e:	89ab      	ldrh	r3, [r5, #12]
 8002540:	0598      	lsls	r0, r3, #22
 8002542:	d4f7      	bmi.n	8002534 <_vfiprintf_r+0x44>
 8002544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002546:	f7ff feb3 	bl	80022b0 <__retarget_lock_release_recursive>
 800254a:	e7f3      	b.n	8002534 <_vfiprintf_r+0x44>
 800254c:	2300      	movs	r3, #0
 800254e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002550:	2320      	movs	r3, #32
 8002552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002556:	2330      	movs	r3, #48	@ 0x30
 8002558:	f04f 0901 	mov.w	r9, #1
 800255c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002560:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800270c <_vfiprintf_r+0x21c>
 8002564:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002568:	4623      	mov	r3, r4
 800256a:	469a      	mov	sl, r3
 800256c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002570:	b10a      	cbz	r2, 8002576 <_vfiprintf_r+0x86>
 8002572:	2a25      	cmp	r2, #37	@ 0x25
 8002574:	d1f9      	bne.n	800256a <_vfiprintf_r+0x7a>
 8002576:	ebba 0b04 	subs.w	fp, sl, r4
 800257a:	d00b      	beq.n	8002594 <_vfiprintf_r+0xa4>
 800257c:	465b      	mov	r3, fp
 800257e:	4622      	mov	r2, r4
 8002580:	4629      	mov	r1, r5
 8002582:	4630      	mov	r0, r6
 8002584:	f7ff ffa1 	bl	80024ca <__sfputs_r>
 8002588:	3001      	adds	r0, #1
 800258a:	f000 80a7 	beq.w	80026dc <_vfiprintf_r+0x1ec>
 800258e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002590:	445a      	add	r2, fp
 8002592:	9209      	str	r2, [sp, #36]	@ 0x24
 8002594:	f89a 3000 	ldrb.w	r3, [sl]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 809f 	beq.w	80026dc <_vfiprintf_r+0x1ec>
 800259e:	2300      	movs	r3, #0
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025a8:	f10a 0a01 	add.w	sl, sl, #1
 80025ac:	9304      	str	r3, [sp, #16]
 80025ae:	9307      	str	r3, [sp, #28]
 80025b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80025b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80025b6:	4654      	mov	r4, sl
 80025b8:	2205      	movs	r2, #5
 80025ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025be:	4853      	ldr	r0, [pc, #332]	@ (800270c <_vfiprintf_r+0x21c>)
 80025c0:	f000 fae4 	bl	8002b8c <memchr>
 80025c4:	9a04      	ldr	r2, [sp, #16]
 80025c6:	b9d8      	cbnz	r0, 8002600 <_vfiprintf_r+0x110>
 80025c8:	06d1      	lsls	r1, r2, #27
 80025ca:	bf44      	itt	mi
 80025cc:	2320      	movmi	r3, #32
 80025ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025d2:	0713      	lsls	r3, r2, #28
 80025d4:	bf44      	itt	mi
 80025d6:	232b      	movmi	r3, #43	@ 0x2b
 80025d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025dc:	f89a 3000 	ldrb.w	r3, [sl]
 80025e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80025e2:	d015      	beq.n	8002610 <_vfiprintf_r+0x120>
 80025e4:	4654      	mov	r4, sl
 80025e6:	2000      	movs	r0, #0
 80025e8:	f04f 0c0a 	mov.w	ip, #10
 80025ec:	9a07      	ldr	r2, [sp, #28]
 80025ee:	4621      	mov	r1, r4
 80025f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025f4:	3b30      	subs	r3, #48	@ 0x30
 80025f6:	2b09      	cmp	r3, #9
 80025f8:	d94b      	bls.n	8002692 <_vfiprintf_r+0x1a2>
 80025fa:	b1b0      	cbz	r0, 800262a <_vfiprintf_r+0x13a>
 80025fc:	9207      	str	r2, [sp, #28]
 80025fe:	e014      	b.n	800262a <_vfiprintf_r+0x13a>
 8002600:	eba0 0308 	sub.w	r3, r0, r8
 8002604:	fa09 f303 	lsl.w	r3, r9, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	46a2      	mov	sl, r4
 800260c:	9304      	str	r3, [sp, #16]
 800260e:	e7d2      	b.n	80025b6 <_vfiprintf_r+0xc6>
 8002610:	9b03      	ldr	r3, [sp, #12]
 8002612:	1d19      	adds	r1, r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	9103      	str	r1, [sp, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	bfbb      	ittet	lt
 800261c:	425b      	neglt	r3, r3
 800261e:	f042 0202 	orrlt.w	r2, r2, #2
 8002622:	9307      	strge	r3, [sp, #28]
 8002624:	9307      	strlt	r3, [sp, #28]
 8002626:	bfb8      	it	lt
 8002628:	9204      	strlt	r2, [sp, #16]
 800262a:	7823      	ldrb	r3, [r4, #0]
 800262c:	2b2e      	cmp	r3, #46	@ 0x2e
 800262e:	d10a      	bne.n	8002646 <_vfiprintf_r+0x156>
 8002630:	7863      	ldrb	r3, [r4, #1]
 8002632:	2b2a      	cmp	r3, #42	@ 0x2a
 8002634:	d132      	bne.n	800269c <_vfiprintf_r+0x1ac>
 8002636:	9b03      	ldr	r3, [sp, #12]
 8002638:	3402      	adds	r4, #2
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	9203      	str	r2, [sp, #12]
 8002640:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002644:	9305      	str	r3, [sp, #20]
 8002646:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002710 <_vfiprintf_r+0x220>
 800264a:	2203      	movs	r2, #3
 800264c:	4650      	mov	r0, sl
 800264e:	7821      	ldrb	r1, [r4, #0]
 8002650:	f000 fa9c 	bl	8002b8c <memchr>
 8002654:	b138      	cbz	r0, 8002666 <_vfiprintf_r+0x176>
 8002656:	2240      	movs	r2, #64	@ 0x40
 8002658:	9b04      	ldr	r3, [sp, #16]
 800265a:	eba0 000a 	sub.w	r0, r0, sl
 800265e:	4082      	lsls	r2, r0
 8002660:	4313      	orrs	r3, r2
 8002662:	3401      	adds	r4, #1
 8002664:	9304      	str	r3, [sp, #16]
 8002666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800266a:	2206      	movs	r2, #6
 800266c:	4829      	ldr	r0, [pc, #164]	@ (8002714 <_vfiprintf_r+0x224>)
 800266e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002672:	f000 fa8b 	bl	8002b8c <memchr>
 8002676:	2800      	cmp	r0, #0
 8002678:	d03f      	beq.n	80026fa <_vfiprintf_r+0x20a>
 800267a:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <_vfiprintf_r+0x228>)
 800267c:	bb1b      	cbnz	r3, 80026c6 <_vfiprintf_r+0x1d6>
 800267e:	9b03      	ldr	r3, [sp, #12]
 8002680:	3307      	adds	r3, #7
 8002682:	f023 0307 	bic.w	r3, r3, #7
 8002686:	3308      	adds	r3, #8
 8002688:	9303      	str	r3, [sp, #12]
 800268a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800268c:	443b      	add	r3, r7
 800268e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002690:	e76a      	b.n	8002568 <_vfiprintf_r+0x78>
 8002692:	460c      	mov	r4, r1
 8002694:	2001      	movs	r0, #1
 8002696:	fb0c 3202 	mla	r2, ip, r2, r3
 800269a:	e7a8      	b.n	80025ee <_vfiprintf_r+0xfe>
 800269c:	2300      	movs	r3, #0
 800269e:	f04f 0c0a 	mov.w	ip, #10
 80026a2:	4619      	mov	r1, r3
 80026a4:	3401      	adds	r4, #1
 80026a6:	9305      	str	r3, [sp, #20]
 80026a8:	4620      	mov	r0, r4
 80026aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026ae:	3a30      	subs	r2, #48	@ 0x30
 80026b0:	2a09      	cmp	r2, #9
 80026b2:	d903      	bls.n	80026bc <_vfiprintf_r+0x1cc>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0c6      	beq.n	8002646 <_vfiprintf_r+0x156>
 80026b8:	9105      	str	r1, [sp, #20]
 80026ba:	e7c4      	b.n	8002646 <_vfiprintf_r+0x156>
 80026bc:	4604      	mov	r4, r0
 80026be:	2301      	movs	r3, #1
 80026c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80026c4:	e7f0      	b.n	80026a8 <_vfiprintf_r+0x1b8>
 80026c6:	ab03      	add	r3, sp, #12
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	462a      	mov	r2, r5
 80026cc:	4630      	mov	r0, r6
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <_vfiprintf_r+0x22c>)
 80026d0:	a904      	add	r1, sp, #16
 80026d2:	f3af 8000 	nop.w
 80026d6:	4607      	mov	r7, r0
 80026d8:	1c78      	adds	r0, r7, #1
 80026da:	d1d6      	bne.n	800268a <_vfiprintf_r+0x19a>
 80026dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026de:	07d9      	lsls	r1, r3, #31
 80026e0:	d405      	bmi.n	80026ee <_vfiprintf_r+0x1fe>
 80026e2:	89ab      	ldrh	r3, [r5, #12]
 80026e4:	059a      	lsls	r2, r3, #22
 80026e6:	d402      	bmi.n	80026ee <_vfiprintf_r+0x1fe>
 80026e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026ea:	f7ff fde1 	bl	80022b0 <__retarget_lock_release_recursive>
 80026ee:	89ab      	ldrh	r3, [r5, #12]
 80026f0:	065b      	lsls	r3, r3, #25
 80026f2:	f53f af1f 	bmi.w	8002534 <_vfiprintf_r+0x44>
 80026f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80026f8:	e71e      	b.n	8002538 <_vfiprintf_r+0x48>
 80026fa:	ab03      	add	r3, sp, #12
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	462a      	mov	r2, r5
 8002700:	4630      	mov	r0, r6
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <_vfiprintf_r+0x22c>)
 8002704:	a904      	add	r1, sp, #16
 8002706:	f000 f87d 	bl	8002804 <_printf_i>
 800270a:	e7e4      	b.n	80026d6 <_vfiprintf_r+0x1e6>
 800270c:	08002d26 	.word	0x08002d26
 8002710:	08002d2c 	.word	0x08002d2c
 8002714:	08002d30 	.word	0x08002d30
 8002718:	00000000 	.word	0x00000000
 800271c:	080024cb 	.word	0x080024cb

08002720 <_printf_common>:
 8002720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002724:	4616      	mov	r6, r2
 8002726:	4698      	mov	r8, r3
 8002728:	688a      	ldr	r2, [r1, #8]
 800272a:	690b      	ldr	r3, [r1, #16]
 800272c:	4607      	mov	r7, r0
 800272e:	4293      	cmp	r3, r2
 8002730:	bfb8      	it	lt
 8002732:	4613      	movlt	r3, r2
 8002734:	6033      	str	r3, [r6, #0]
 8002736:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800273a:	460c      	mov	r4, r1
 800273c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002740:	b10a      	cbz	r2, 8002746 <_printf_common+0x26>
 8002742:	3301      	adds	r3, #1
 8002744:	6033      	str	r3, [r6, #0]
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	0699      	lsls	r1, r3, #26
 800274a:	bf42      	ittt	mi
 800274c:	6833      	ldrmi	r3, [r6, #0]
 800274e:	3302      	addmi	r3, #2
 8002750:	6033      	strmi	r3, [r6, #0]
 8002752:	6825      	ldr	r5, [r4, #0]
 8002754:	f015 0506 	ands.w	r5, r5, #6
 8002758:	d106      	bne.n	8002768 <_printf_common+0x48>
 800275a:	f104 0a19 	add.w	sl, r4, #25
 800275e:	68e3      	ldr	r3, [r4, #12]
 8002760:	6832      	ldr	r2, [r6, #0]
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	42ab      	cmp	r3, r5
 8002766:	dc2b      	bgt.n	80027c0 <_printf_common+0xa0>
 8002768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800276c:	6822      	ldr	r2, [r4, #0]
 800276e:	3b00      	subs	r3, #0
 8002770:	bf18      	it	ne
 8002772:	2301      	movne	r3, #1
 8002774:	0692      	lsls	r2, r2, #26
 8002776:	d430      	bmi.n	80027da <_printf_common+0xba>
 8002778:	4641      	mov	r1, r8
 800277a:	4638      	mov	r0, r7
 800277c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002780:	47c8      	blx	r9
 8002782:	3001      	adds	r0, #1
 8002784:	d023      	beq.n	80027ce <_printf_common+0xae>
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	6922      	ldr	r2, [r4, #16]
 800278a:	f003 0306 	and.w	r3, r3, #6
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf14      	ite	ne
 8002792:	2500      	movne	r5, #0
 8002794:	6833      	ldreq	r3, [r6, #0]
 8002796:	f04f 0600 	mov.w	r6, #0
 800279a:	bf08      	it	eq
 800279c:	68e5      	ldreq	r5, [r4, #12]
 800279e:	f104 041a 	add.w	r4, r4, #26
 80027a2:	bf08      	it	eq
 80027a4:	1aed      	subeq	r5, r5, r3
 80027a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027aa:	bf08      	it	eq
 80027ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027b0:	4293      	cmp	r3, r2
 80027b2:	bfc4      	itt	gt
 80027b4:	1a9b      	subgt	r3, r3, r2
 80027b6:	18ed      	addgt	r5, r5, r3
 80027b8:	42b5      	cmp	r5, r6
 80027ba:	d11a      	bne.n	80027f2 <_printf_common+0xd2>
 80027bc:	2000      	movs	r0, #0
 80027be:	e008      	b.n	80027d2 <_printf_common+0xb2>
 80027c0:	2301      	movs	r3, #1
 80027c2:	4652      	mov	r2, sl
 80027c4:	4641      	mov	r1, r8
 80027c6:	4638      	mov	r0, r7
 80027c8:	47c8      	blx	r9
 80027ca:	3001      	adds	r0, #1
 80027cc:	d103      	bne.n	80027d6 <_printf_common+0xb6>
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295
 80027d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027d6:	3501      	adds	r5, #1
 80027d8:	e7c1      	b.n	800275e <_printf_common+0x3e>
 80027da:	2030      	movs	r0, #48	@ 0x30
 80027dc:	18e1      	adds	r1, r4, r3
 80027de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027e8:	4422      	add	r2, r4
 80027ea:	3302      	adds	r3, #2
 80027ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027f0:	e7c2      	b.n	8002778 <_printf_common+0x58>
 80027f2:	2301      	movs	r3, #1
 80027f4:	4622      	mov	r2, r4
 80027f6:	4641      	mov	r1, r8
 80027f8:	4638      	mov	r0, r7
 80027fa:	47c8      	blx	r9
 80027fc:	3001      	adds	r0, #1
 80027fe:	d0e6      	beq.n	80027ce <_printf_common+0xae>
 8002800:	3601      	adds	r6, #1
 8002802:	e7d9      	b.n	80027b8 <_printf_common+0x98>

08002804 <_printf_i>:
 8002804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002808:	7e0f      	ldrb	r7, [r1, #24]
 800280a:	4691      	mov	r9, r2
 800280c:	2f78      	cmp	r7, #120	@ 0x78
 800280e:	4680      	mov	r8, r0
 8002810:	460c      	mov	r4, r1
 8002812:	469a      	mov	sl, r3
 8002814:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800281a:	d807      	bhi.n	800282c <_printf_i+0x28>
 800281c:	2f62      	cmp	r7, #98	@ 0x62
 800281e:	d80a      	bhi.n	8002836 <_printf_i+0x32>
 8002820:	2f00      	cmp	r7, #0
 8002822:	f000 80d3 	beq.w	80029cc <_printf_i+0x1c8>
 8002826:	2f58      	cmp	r7, #88	@ 0x58
 8002828:	f000 80ba 	beq.w	80029a0 <_printf_i+0x19c>
 800282c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002834:	e03a      	b.n	80028ac <_printf_i+0xa8>
 8002836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800283a:	2b15      	cmp	r3, #21
 800283c:	d8f6      	bhi.n	800282c <_printf_i+0x28>
 800283e:	a101      	add	r1, pc, #4	@ (adr r1, 8002844 <_printf_i+0x40>)
 8002840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002844:	0800289d 	.word	0x0800289d
 8002848:	080028b1 	.word	0x080028b1
 800284c:	0800282d 	.word	0x0800282d
 8002850:	0800282d 	.word	0x0800282d
 8002854:	0800282d 	.word	0x0800282d
 8002858:	0800282d 	.word	0x0800282d
 800285c:	080028b1 	.word	0x080028b1
 8002860:	0800282d 	.word	0x0800282d
 8002864:	0800282d 	.word	0x0800282d
 8002868:	0800282d 	.word	0x0800282d
 800286c:	0800282d 	.word	0x0800282d
 8002870:	080029b3 	.word	0x080029b3
 8002874:	080028db 	.word	0x080028db
 8002878:	0800296d 	.word	0x0800296d
 800287c:	0800282d 	.word	0x0800282d
 8002880:	0800282d 	.word	0x0800282d
 8002884:	080029d5 	.word	0x080029d5
 8002888:	0800282d 	.word	0x0800282d
 800288c:	080028db 	.word	0x080028db
 8002890:	0800282d 	.word	0x0800282d
 8002894:	0800282d 	.word	0x0800282d
 8002898:	08002975 	.word	0x08002975
 800289c:	6833      	ldr	r3, [r6, #0]
 800289e:	1d1a      	adds	r2, r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6032      	str	r2, [r6, #0]
 80028a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028ac:	2301      	movs	r3, #1
 80028ae:	e09e      	b.n	80029ee <_printf_i+0x1ea>
 80028b0:	6833      	ldr	r3, [r6, #0]
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	1d19      	adds	r1, r3, #4
 80028b6:	6031      	str	r1, [r6, #0]
 80028b8:	0606      	lsls	r6, r0, #24
 80028ba:	d501      	bpl.n	80028c0 <_printf_i+0xbc>
 80028bc:	681d      	ldr	r5, [r3, #0]
 80028be:	e003      	b.n	80028c8 <_printf_i+0xc4>
 80028c0:	0645      	lsls	r5, r0, #25
 80028c2:	d5fb      	bpl.n	80028bc <_printf_i+0xb8>
 80028c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028c8:	2d00      	cmp	r5, #0
 80028ca:	da03      	bge.n	80028d4 <_printf_i+0xd0>
 80028cc:	232d      	movs	r3, #45	@ 0x2d
 80028ce:	426d      	negs	r5, r5
 80028d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028d4:	230a      	movs	r3, #10
 80028d6:	4859      	ldr	r0, [pc, #356]	@ (8002a3c <_printf_i+0x238>)
 80028d8:	e011      	b.n	80028fe <_printf_i+0xfa>
 80028da:	6821      	ldr	r1, [r4, #0]
 80028dc:	6833      	ldr	r3, [r6, #0]
 80028de:	0608      	lsls	r0, r1, #24
 80028e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80028e4:	d402      	bmi.n	80028ec <_printf_i+0xe8>
 80028e6:	0649      	lsls	r1, r1, #25
 80028e8:	bf48      	it	mi
 80028ea:	b2ad      	uxthmi	r5, r5
 80028ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80028ee:	6033      	str	r3, [r6, #0]
 80028f0:	bf14      	ite	ne
 80028f2:	230a      	movne	r3, #10
 80028f4:	2308      	moveq	r3, #8
 80028f6:	4851      	ldr	r0, [pc, #324]	@ (8002a3c <_printf_i+0x238>)
 80028f8:	2100      	movs	r1, #0
 80028fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028fe:	6866      	ldr	r6, [r4, #4]
 8002900:	2e00      	cmp	r6, #0
 8002902:	bfa8      	it	ge
 8002904:	6821      	ldrge	r1, [r4, #0]
 8002906:	60a6      	str	r6, [r4, #8]
 8002908:	bfa4      	itt	ge
 800290a:	f021 0104 	bicge.w	r1, r1, #4
 800290e:	6021      	strge	r1, [r4, #0]
 8002910:	b90d      	cbnz	r5, 8002916 <_printf_i+0x112>
 8002912:	2e00      	cmp	r6, #0
 8002914:	d04b      	beq.n	80029ae <_printf_i+0x1aa>
 8002916:	4616      	mov	r6, r2
 8002918:	fbb5 f1f3 	udiv	r1, r5, r3
 800291c:	fb03 5711 	mls	r7, r3, r1, r5
 8002920:	5dc7      	ldrb	r7, [r0, r7]
 8002922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002926:	462f      	mov	r7, r5
 8002928:	42bb      	cmp	r3, r7
 800292a:	460d      	mov	r5, r1
 800292c:	d9f4      	bls.n	8002918 <_printf_i+0x114>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d10b      	bne.n	800294a <_printf_i+0x146>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	07df      	lsls	r7, r3, #31
 8002936:	d508      	bpl.n	800294a <_printf_i+0x146>
 8002938:	6923      	ldr	r3, [r4, #16]
 800293a:	6861      	ldr	r1, [r4, #4]
 800293c:	4299      	cmp	r1, r3
 800293e:	bfde      	ittt	le
 8002940:	2330      	movle	r3, #48	@ 0x30
 8002942:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002946:	f106 36ff 	addle.w	r6, r6, #4294967295
 800294a:	1b92      	subs	r2, r2, r6
 800294c:	6122      	str	r2, [r4, #16]
 800294e:	464b      	mov	r3, r9
 8002950:	4621      	mov	r1, r4
 8002952:	4640      	mov	r0, r8
 8002954:	f8cd a000 	str.w	sl, [sp]
 8002958:	aa03      	add	r2, sp, #12
 800295a:	f7ff fee1 	bl	8002720 <_printf_common>
 800295e:	3001      	adds	r0, #1
 8002960:	d14a      	bne.n	80029f8 <_printf_i+0x1f4>
 8002962:	f04f 30ff 	mov.w	r0, #4294967295
 8002966:	b004      	add	sp, #16
 8002968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	6023      	str	r3, [r4, #0]
 8002974:	2778      	movs	r7, #120	@ 0x78
 8002976:	4832      	ldr	r0, [pc, #200]	@ (8002a40 <_printf_i+0x23c>)
 8002978:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	6831      	ldr	r1, [r6, #0]
 8002980:	061f      	lsls	r7, r3, #24
 8002982:	f851 5b04 	ldr.w	r5, [r1], #4
 8002986:	d402      	bmi.n	800298e <_printf_i+0x18a>
 8002988:	065f      	lsls	r7, r3, #25
 800298a:	bf48      	it	mi
 800298c:	b2ad      	uxthmi	r5, r5
 800298e:	6031      	str	r1, [r6, #0]
 8002990:	07d9      	lsls	r1, r3, #31
 8002992:	bf44      	itt	mi
 8002994:	f043 0320 	orrmi.w	r3, r3, #32
 8002998:	6023      	strmi	r3, [r4, #0]
 800299a:	b11d      	cbz	r5, 80029a4 <_printf_i+0x1a0>
 800299c:	2310      	movs	r3, #16
 800299e:	e7ab      	b.n	80028f8 <_printf_i+0xf4>
 80029a0:	4826      	ldr	r0, [pc, #152]	@ (8002a3c <_printf_i+0x238>)
 80029a2:	e7e9      	b.n	8002978 <_printf_i+0x174>
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	f023 0320 	bic.w	r3, r3, #32
 80029aa:	6023      	str	r3, [r4, #0]
 80029ac:	e7f6      	b.n	800299c <_printf_i+0x198>
 80029ae:	4616      	mov	r6, r2
 80029b0:	e7bd      	b.n	800292e <_printf_i+0x12a>
 80029b2:	6833      	ldr	r3, [r6, #0]
 80029b4:	6825      	ldr	r5, [r4, #0]
 80029b6:	1d18      	adds	r0, r3, #4
 80029b8:	6961      	ldr	r1, [r4, #20]
 80029ba:	6030      	str	r0, [r6, #0]
 80029bc:	062e      	lsls	r6, r5, #24
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	d501      	bpl.n	80029c6 <_printf_i+0x1c2>
 80029c2:	6019      	str	r1, [r3, #0]
 80029c4:	e002      	b.n	80029cc <_printf_i+0x1c8>
 80029c6:	0668      	lsls	r0, r5, #25
 80029c8:	d5fb      	bpl.n	80029c2 <_printf_i+0x1be>
 80029ca:	8019      	strh	r1, [r3, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	4616      	mov	r6, r2
 80029d0:	6123      	str	r3, [r4, #16]
 80029d2:	e7bc      	b.n	800294e <_printf_i+0x14a>
 80029d4:	6833      	ldr	r3, [r6, #0]
 80029d6:	2100      	movs	r1, #0
 80029d8:	1d1a      	adds	r2, r3, #4
 80029da:	6032      	str	r2, [r6, #0]
 80029dc:	681e      	ldr	r6, [r3, #0]
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	4630      	mov	r0, r6
 80029e2:	f000 f8d3 	bl	8002b8c <memchr>
 80029e6:	b108      	cbz	r0, 80029ec <_printf_i+0x1e8>
 80029e8:	1b80      	subs	r0, r0, r6
 80029ea:	6060      	str	r0, [r4, #4]
 80029ec:	6863      	ldr	r3, [r4, #4]
 80029ee:	6123      	str	r3, [r4, #16]
 80029f0:	2300      	movs	r3, #0
 80029f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029f6:	e7aa      	b.n	800294e <_printf_i+0x14a>
 80029f8:	4632      	mov	r2, r6
 80029fa:	4649      	mov	r1, r9
 80029fc:	4640      	mov	r0, r8
 80029fe:	6923      	ldr	r3, [r4, #16]
 8002a00:	47d0      	blx	sl
 8002a02:	3001      	adds	r0, #1
 8002a04:	d0ad      	beq.n	8002962 <_printf_i+0x15e>
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	079b      	lsls	r3, r3, #30
 8002a0a:	d413      	bmi.n	8002a34 <_printf_i+0x230>
 8002a0c:	68e0      	ldr	r0, [r4, #12]
 8002a0e:	9b03      	ldr	r3, [sp, #12]
 8002a10:	4298      	cmp	r0, r3
 8002a12:	bfb8      	it	lt
 8002a14:	4618      	movlt	r0, r3
 8002a16:	e7a6      	b.n	8002966 <_printf_i+0x162>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	4632      	mov	r2, r6
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	4640      	mov	r0, r8
 8002a20:	47d0      	blx	sl
 8002a22:	3001      	adds	r0, #1
 8002a24:	d09d      	beq.n	8002962 <_printf_i+0x15e>
 8002a26:	3501      	adds	r5, #1
 8002a28:	68e3      	ldr	r3, [r4, #12]
 8002a2a:	9903      	ldr	r1, [sp, #12]
 8002a2c:	1a5b      	subs	r3, r3, r1
 8002a2e:	42ab      	cmp	r3, r5
 8002a30:	dcf2      	bgt.n	8002a18 <_printf_i+0x214>
 8002a32:	e7eb      	b.n	8002a0c <_printf_i+0x208>
 8002a34:	2500      	movs	r5, #0
 8002a36:	f104 0619 	add.w	r6, r4, #25
 8002a3a:	e7f5      	b.n	8002a28 <_printf_i+0x224>
 8002a3c:	08002d37 	.word	0x08002d37
 8002a40:	08002d48 	.word	0x08002d48

08002a44 <__swbuf_r>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	460e      	mov	r6, r1
 8002a48:	4614      	mov	r4, r2
 8002a4a:	4605      	mov	r5, r0
 8002a4c:	b118      	cbz	r0, 8002a56 <__swbuf_r+0x12>
 8002a4e:	6a03      	ldr	r3, [r0, #32]
 8002a50:	b90b      	cbnz	r3, 8002a56 <__swbuf_r+0x12>
 8002a52:	f7ff fb27 	bl	80020a4 <__sinit>
 8002a56:	69a3      	ldr	r3, [r4, #24]
 8002a58:	60a3      	str	r3, [r4, #8]
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	071a      	lsls	r2, r3, #28
 8002a5e:	d501      	bpl.n	8002a64 <__swbuf_r+0x20>
 8002a60:	6923      	ldr	r3, [r4, #16]
 8002a62:	b943      	cbnz	r3, 8002a76 <__swbuf_r+0x32>
 8002a64:	4621      	mov	r1, r4
 8002a66:	4628      	mov	r0, r5
 8002a68:	f000 f82a 	bl	8002ac0 <__swsetup_r>
 8002a6c:	b118      	cbz	r0, 8002a76 <__swbuf_r+0x32>
 8002a6e:	f04f 37ff 	mov.w	r7, #4294967295
 8002a72:	4638      	mov	r0, r7
 8002a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	6922      	ldr	r2, [r4, #16]
 8002a7a:	b2f6      	uxtb	r6, r6
 8002a7c:	1a98      	subs	r0, r3, r2
 8002a7e:	6963      	ldr	r3, [r4, #20]
 8002a80:	4637      	mov	r7, r6
 8002a82:	4283      	cmp	r3, r0
 8002a84:	dc05      	bgt.n	8002a92 <__swbuf_r+0x4e>
 8002a86:	4621      	mov	r1, r4
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f7ff fa43 	bl	8001f14 <_fflush_r>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1ed      	bne.n	8002a6e <__swbuf_r+0x2a>
 8002a92:	68a3      	ldr	r3, [r4, #8]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60a3      	str	r3, [r4, #8]
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	6022      	str	r2, [r4, #0]
 8002a9e:	701e      	strb	r6, [r3, #0]
 8002aa0:	6962      	ldr	r2, [r4, #20]
 8002aa2:	1c43      	adds	r3, r0, #1
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d004      	beq.n	8002ab2 <__swbuf_r+0x6e>
 8002aa8:	89a3      	ldrh	r3, [r4, #12]
 8002aaa:	07db      	lsls	r3, r3, #31
 8002aac:	d5e1      	bpl.n	8002a72 <__swbuf_r+0x2e>
 8002aae:	2e0a      	cmp	r6, #10
 8002ab0:	d1df      	bne.n	8002a72 <__swbuf_r+0x2e>
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f7ff fa2d 	bl	8001f14 <_fflush_r>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d0d9      	beq.n	8002a72 <__swbuf_r+0x2e>
 8002abe:	e7d6      	b.n	8002a6e <__swbuf_r+0x2a>

08002ac0 <__swsetup_r>:
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <__swsetup_r+0xa8>)
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	460c      	mov	r4, r1
 8002aca:	b118      	cbz	r0, 8002ad4 <__swsetup_r+0x14>
 8002acc:	6a03      	ldr	r3, [r0, #32]
 8002ace:	b90b      	cbnz	r3, 8002ad4 <__swsetup_r+0x14>
 8002ad0:	f7ff fae8 	bl	80020a4 <__sinit>
 8002ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ad8:	0719      	lsls	r1, r3, #28
 8002ada:	d422      	bmi.n	8002b22 <__swsetup_r+0x62>
 8002adc:	06da      	lsls	r2, r3, #27
 8002ade:	d407      	bmi.n	8002af0 <__swsetup_r+0x30>
 8002ae0:	2209      	movs	r2, #9
 8002ae2:	602a      	str	r2, [r5, #0]
 8002ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	81a3      	strh	r3, [r4, #12]
 8002aee:	e033      	b.n	8002b58 <__swsetup_r+0x98>
 8002af0:	0758      	lsls	r0, r3, #29
 8002af2:	d512      	bpl.n	8002b1a <__swsetup_r+0x5a>
 8002af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002af6:	b141      	cbz	r1, 8002b0a <__swsetup_r+0x4a>
 8002af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002afc:	4299      	cmp	r1, r3
 8002afe:	d002      	beq.n	8002b06 <__swsetup_r+0x46>
 8002b00:	4628      	mov	r0, r5
 8002b02:	f7ff fbd7 	bl	80022b4 <_free_r>
 8002b06:	2300      	movs	r3, #0
 8002b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b10:	81a3      	strh	r3, [r4, #12]
 8002b12:	2300      	movs	r3, #0
 8002b14:	6063      	str	r3, [r4, #4]
 8002b16:	6923      	ldr	r3, [r4, #16]
 8002b18:	6023      	str	r3, [r4, #0]
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	6923      	ldr	r3, [r4, #16]
 8002b24:	b94b      	cbnz	r3, 8002b3a <__swsetup_r+0x7a>
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b30:	d003      	beq.n	8002b3a <__swsetup_r+0x7a>
 8002b32:	4621      	mov	r1, r4
 8002b34:	4628      	mov	r0, r5
 8002b36:	f000 f85c 	bl	8002bf2 <__smakebuf_r>
 8002b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b3e:	f013 0201 	ands.w	r2, r3, #1
 8002b42:	d00a      	beq.n	8002b5a <__swsetup_r+0x9a>
 8002b44:	2200      	movs	r2, #0
 8002b46:	60a2      	str	r2, [r4, #8]
 8002b48:	6962      	ldr	r2, [r4, #20]
 8002b4a:	4252      	negs	r2, r2
 8002b4c:	61a2      	str	r2, [r4, #24]
 8002b4e:	6922      	ldr	r2, [r4, #16]
 8002b50:	b942      	cbnz	r2, 8002b64 <__swsetup_r+0xa4>
 8002b52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b56:	d1c5      	bne.n	8002ae4 <__swsetup_r+0x24>
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
 8002b5a:	0799      	lsls	r1, r3, #30
 8002b5c:	bf58      	it	pl
 8002b5e:	6962      	ldrpl	r2, [r4, #20]
 8002b60:	60a2      	str	r2, [r4, #8]
 8002b62:	e7f4      	b.n	8002b4e <__swsetup_r+0x8e>
 8002b64:	2000      	movs	r0, #0
 8002b66:	e7f7      	b.n	8002b58 <__swsetup_r+0x98>
 8002b68:	20000018 	.word	0x20000018

08002b6c <_sbrk_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4d05      	ldr	r5, [pc, #20]	@ (8002b88 <_sbrk_r+0x1c>)
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fd fdbe 	bl	80006f8 <_sbrk>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_sbrk_r+0x1a>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_sbrk_r+0x1a>
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	20000268 	.word	0x20000268

08002b8c <memchr>:
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	b510      	push	{r4, lr}
 8002b90:	b2c9      	uxtb	r1, r1
 8002b92:	4402      	add	r2, r0
 8002b94:	4293      	cmp	r3, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	d101      	bne.n	8002b9e <memchr+0x12>
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	e003      	b.n	8002ba6 <memchr+0x1a>
 8002b9e:	7804      	ldrb	r4, [r0, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	428c      	cmp	r4, r1
 8002ba4:	d1f6      	bne.n	8002b94 <memchr+0x8>
 8002ba6:	bd10      	pop	{r4, pc}

08002ba8 <__swhatbuf_r>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	460c      	mov	r4, r1
 8002bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb0:	4615      	mov	r5, r2
 8002bb2:	2900      	cmp	r1, #0
 8002bb4:	461e      	mov	r6, r3
 8002bb6:	b096      	sub	sp, #88	@ 0x58
 8002bb8:	da0c      	bge.n	8002bd4 <__swhatbuf_r+0x2c>
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002bc2:	bf14      	ite	ne
 8002bc4:	2340      	movne	r3, #64	@ 0x40
 8002bc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002bca:	2000      	movs	r0, #0
 8002bcc:	6031      	str	r1, [r6, #0]
 8002bce:	602b      	str	r3, [r5, #0]
 8002bd0:	b016      	add	sp, #88	@ 0x58
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	466a      	mov	r2, sp
 8002bd6:	f000 f849 	bl	8002c6c <_fstat_r>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	dbed      	blt.n	8002bba <__swhatbuf_r+0x12>
 8002bde:	9901      	ldr	r1, [sp, #4]
 8002be0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002be4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002be8:	4259      	negs	r1, r3
 8002bea:	4159      	adcs	r1, r3
 8002bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf0:	e7eb      	b.n	8002bca <__swhatbuf_r+0x22>

08002bf2 <__smakebuf_r>:
 8002bf2:	898b      	ldrh	r3, [r1, #12]
 8002bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bf6:	079d      	lsls	r5, r3, #30
 8002bf8:	4606      	mov	r6, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	d507      	bpl.n	8002c0e <__smakebuf_r+0x1c>
 8002bfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002c02:	6023      	str	r3, [r4, #0]
 8002c04:	6123      	str	r3, [r4, #16]
 8002c06:	2301      	movs	r3, #1
 8002c08:	6163      	str	r3, [r4, #20]
 8002c0a:	b003      	add	sp, #12
 8002c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c0e:	466a      	mov	r2, sp
 8002c10:	ab01      	add	r3, sp, #4
 8002c12:	f7ff ffc9 	bl	8002ba8 <__swhatbuf_r>
 8002c16:	9f00      	ldr	r7, [sp, #0]
 8002c18:	4605      	mov	r5, r0
 8002c1a:	4639      	mov	r1, r7
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	f7ff fbb3 	bl	8002388 <_malloc_r>
 8002c22:	b948      	cbnz	r0, 8002c38 <__smakebuf_r+0x46>
 8002c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c28:	059a      	lsls	r2, r3, #22
 8002c2a:	d4ee      	bmi.n	8002c0a <__smakebuf_r+0x18>
 8002c2c:	f023 0303 	bic.w	r3, r3, #3
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	81a3      	strh	r3, [r4, #12]
 8002c36:	e7e2      	b.n	8002bfe <__smakebuf_r+0xc>
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	9b01      	ldr	r3, [sp, #4]
 8002c46:	6020      	str	r0, [r4, #0]
 8002c48:	b15b      	cbz	r3, 8002c62 <__smakebuf_r+0x70>
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c50:	f000 f81e 	bl	8002c90 <_isatty_r>
 8002c54:	b128      	cbz	r0, 8002c62 <__smakebuf_r+0x70>
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	f023 0303 	bic.w	r3, r3, #3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	431d      	orrs	r5, r3
 8002c66:	81a5      	strh	r5, [r4, #12]
 8002c68:	e7cf      	b.n	8002c0a <__smakebuf_r+0x18>
	...

08002c6c <_fstat_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	2300      	movs	r3, #0
 8002c70:	4d06      	ldr	r5, [pc, #24]	@ (8002c8c <_fstat_r+0x20>)
 8002c72:	4604      	mov	r4, r0
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	602b      	str	r3, [r5, #0]
 8002c7a:	f7fd fd17 	bl	80006ac <_fstat>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	d102      	bne.n	8002c88 <_fstat_r+0x1c>
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	b103      	cbz	r3, 8002c88 <_fstat_r+0x1c>
 8002c86:	6023      	str	r3, [r4, #0]
 8002c88:	bd38      	pop	{r3, r4, r5, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000268 	.word	0x20000268

08002c90 <_isatty_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	2300      	movs	r3, #0
 8002c94:	4d05      	ldr	r5, [pc, #20]	@ (8002cac <_isatty_r+0x1c>)
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fd fd15 	bl	80006ca <_isatty>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_isatty_r+0x1a>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_isatty_r+0x1a>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	20000268 	.word	0x20000268

08002cb0 <_init>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	bf00      	nop
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr

08002cbc <_fini>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr
