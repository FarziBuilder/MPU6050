
MPU_Try3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a530  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800a640  0800a640  0000b640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada0  0800ada0  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ada0  0800ada0  0000bda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ada8  0800ada8  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ada8  0800ada8  0000bda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adac  0800adac  0000bdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800adb0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001e8  0800af98  0000c1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800af98  0000c48c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef42  00000000  00000000  0000c211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002018  00000000  00000000  0001b153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0001d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfb  00000000  00000000  0001e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec0  00000000  00000000  0001ec93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c7a  00000000  00000000  00037b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f11b  00000000  00000000  000497cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d88e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005908  00000000  00000000  000d892c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000de234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a628 	.word	0x0800a628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a628 	.word	0x0800a628

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001098:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800109c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80010b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010b8:	e000      	b.n	80010bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80010ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f9      	beq.n	80010ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010c6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <_write>:




int _write(int le, char *ptr, int len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e009      	b.n	8001102 <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ffca 	bl	8001090 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf1      	blt.n	80010ee <_write+0x12>
	}
	return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 ffd8 	bl	80020cc <HAL_Init>
  HAL_Delay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001120:	f001 f836 	bl	8002190 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f812 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f000 f8fe 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112c:	f000 f8d2 	bl	80012d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001130:	f000 f84e 	bl	80011d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001134:	f000 f87a 	bl	800122c <MX_TIM1_Init>
//  else
//  {
//	  printf("NOT WRITTEN!!!");
//  }

  mpu6050_Init();
 8001138:	f000 f96a 	bl	8001410 <mpu6050_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//TimerCheck();
	FinalAngle();
 800113c:	f000 fce8 	bl	8001b10 <FinalAngle>
	//mpu6050_ReadAccel();
	HAL_Delay(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001144:	f001 f824 	bl	8002190 <HAL_Delay>
	FinalAngle();
 8001148:	bf00      	nop
 800114a:	e7f7      	b.n	800113c <main+0x28>

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	@ 0x40
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2228      	movs	r2, #40	@ 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f004 fccc 	bl	8005af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800117e:	2300      	movs	r3, #0
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001182:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fc77 	bl	8003a80 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001198:	f000 f934 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2102      	movs	r1, #2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 fee4 	bl	8003f84 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011c2:	f000 f91f 	bl	8001404 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3740      	adds	r7, #64	@ 0x40
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_I2C1_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_I2C1_Init+0x58>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_I2C1_Init+0x50>)
 800120e:	f001 faaf 	bl	8002770 <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 f8f4 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000204 	.word	0x20000204
 8001224:	40005400 	.word	0x40005400
 8001228:	000186a0 	.word	0x000186a0

0800122c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001248:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <MX_TIM1_Init+0xa0>)
 800124a:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <MX_TIM1_Init+0xa4>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <MX_TIM1_Init+0xa0>)
 8001250:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001254:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <MX_TIM1_Init+0xa0>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <MX_TIM1_Init+0xa0>)
 800125e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <MX_TIM1_Init+0xa0>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <MX_TIM1_Init+0xa0>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_TIM1_Init+0xa0>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001276:	4815      	ldr	r0, [pc, #84]	@ (80012cc <MX_TIM1_Init+0xa0>)
 8001278:	f003 f812 	bl	80042a0 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001282:	f000 f8bf 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	@ (80012cc <MX_TIM1_Init+0xa0>)
 8001294:	f003 f89e 	bl	80043d4 <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800129e:	f000 f8b1 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	@ (80012cc <MX_TIM1_Init+0xa0>)
 80012b0:	f003 fa50 	bl	8004754 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012ba:	f000 f8a3 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 80012be:	4803      	ldr	r0, [pc, #12]	@ (80012cc <MX_TIM1_Init+0xa0>)
 80012c0:	f003 f83e 	bl	8004340 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000258 	.word	0x20000258
 80012d0:	40012c00 	.word	0x40012c00

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f003 fa80 	bl	8004810 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f875 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200002a0 	.word	0x200002a0
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a2c      	ldr	r2, [pc, #176]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a26      	ldr	r2, [pc, #152]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 800135a:	f043 0320 	orr.w	r3, r3, #32
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0320 	and.w	r3, r3, #32
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a20      	ldr	r2, [pc, #128]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a1a      	ldr	r2, [pc, #104]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_GPIO_Init+0xcc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2120      	movs	r1, #32
 80013a0:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 80013a2:	f001 f9ab 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_GPIO_Init+0xd4>)
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <MX_GPIO_Init+0xd8>)
 80013bc:	f001 f81a 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013c0:	2320      	movs	r3, #32
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <MX_GPIO_Init+0xd0>)
 80013d8:	f001 f80c 	bl	80023f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2028      	movs	r0, #40	@ 0x28
 80013e2:	f000 ffd0 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e6:	2028      	movs	r0, #40	@ 0x28
 80013e8:	f000 ffe9 	bl	80023be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	10110000 	.word	0x10110000
 8001400:	40011000 	.word	0x40011000

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <mpu6050_Init>:
float gyro_X, gyro_Y,gyro_Z;
float final_accel_X, final_accel_Y, final_accel_Z;
double AngleRoll, AngleYaw, AnglePitch;


void mpu6050_Init(){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af04      	add	r7, sp, #16
	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 100);
 8001416:	2364      	movs	r3, #100	@ 0x64
 8001418:	2201      	movs	r2, #1
 800141a:	21d0      	movs	r1, #208	@ 0xd0
 800141c:	4830      	ldr	r0, [pc, #192]	@ (80014e0 <mpu6050_Init+0xd0>)
 800141e:	f001 fe4d 	bl	80030bc <HAL_I2C_IsDeviceReady>
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]

	  if (ret == HAL_OK){
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <mpu6050_Init+0x24>
		  printf("I AM READYY!");
 800142c:	482d      	ldr	r0, [pc, #180]	@ (80014e4 <mpu6050_Init+0xd4>)
 800142e:	f004 f9fb 	bl	8005828 <iprintf>
 8001432:	e002      	b.n	800143a <mpu6050_Init+0x2a>
	  }
	  else{
		  printf("NOOOO!!!");
 8001434:	482c      	ldr	r0, [pc, #176]	@ (80014e8 <mpu6050_Init+0xd8>)
 8001436:	f004 f9f7 	bl	8005828 <iprintf>
	  }

	  uint8_t temp_data = GYRO_SCALE;
 800143a:	2310      	movs	r3, #16
 800143c:	71bb      	strb	r3, [r7, #6]

	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 800143e:	2364      	movs	r3, #100	@ 0x64
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2301      	movs	r3, #1
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	1dbb      	adds	r3, r7, #6
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	221b      	movs	r2, #27
 800144e:	21d0      	movs	r1, #208	@ 0xd0
 8001450:	4823      	ldr	r0, [pc, #140]	@ (80014e0 <mpu6050_Init+0xd0>)
 8001452:	f001 fad1 	bl	80029f8 <HAL_I2C_Mem_Write>
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]

	  if (ret == HAL_OK)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <mpu6050_Init+0x58>
	  {
		  printf("Written gyro! \n");
 8001460:	4822      	ldr	r0, [pc, #136]	@ (80014ec <mpu6050_Init+0xdc>)
 8001462:	f004 fa49 	bl	80058f8 <puts>
 8001466:	e002      	b.n	800146e <mpu6050_Init+0x5e>
	  }
	  else
	  {
		  printf("NOT WRITTEN IN GYRO!!! \n");
 8001468:	4821      	ldr	r0, [pc, #132]	@ (80014f0 <mpu6050_Init+0xe0>)
 800146a:	f004 fa45 	bl	80058f8 <puts>
	  }

	  temp_data = ACCEL_SCALE;
 800146e:	2310      	movs	r3, #16
 8001470:	71bb      	strb	r3, [r7, #6]

	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_ACCEL, 1, &temp_data, 1, 100);
 8001472:	2364      	movs	r3, #100	@ 0x64
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2301      	movs	r3, #1
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	1dbb      	adds	r3, r7, #6
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	221c      	movs	r2, #28
 8001482:	21d0      	movs	r1, #208	@ 0xd0
 8001484:	4816      	ldr	r0, [pc, #88]	@ (80014e0 <mpu6050_Init+0xd0>)
 8001486:	f001 fab7 	bl	80029f8 <HAL_I2C_Mem_Write>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]

	  if (ret == HAL_OK)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d103      	bne.n	800149c <mpu6050_Init+0x8c>
	  	  {
	  		  printf("Written accel! \n");
 8001494:	4817      	ldr	r0, [pc, #92]	@ (80014f4 <mpu6050_Init+0xe4>)
 8001496:	f004 fa2f 	bl	80058f8 <puts>
 800149a:	e002      	b.n	80014a2 <mpu6050_Init+0x92>
	  	  }
	  	  else
	  	  {
	  		  printf("NOT WRITTEN IN ACCEL!!! \n");
 800149c:	4816      	ldr	r0, [pc, #88]	@ (80014f8 <mpu6050_Init+0xe8>)
 800149e:	f004 fa2b 	bl	80058f8 <puts>
	  	  }

	  temp_data = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71bb      	strb	r3, [r7, #6]

	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_PWR, 1, &temp_data, 1, 100);
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	226b      	movs	r2, #107	@ 0x6b
 80014b6:	21d0      	movs	r1, #208	@ 0xd0
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <mpu6050_Init+0xd0>)
 80014ba:	f001 fa9d 	bl	80029f8 <HAL_I2C_Mem_Write>
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]

	  if (ret == HAL_OK)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d103      	bne.n	80014d0 <mpu6050_Init+0xc0>
		  {
			  printf("Power Mode ON! \n");
 80014c8:	480c      	ldr	r0, [pc, #48]	@ (80014fc <mpu6050_Init+0xec>)
 80014ca:	f004 fa15 	bl	80058f8 <puts>
		  }
		  else
		  {
			  printf("Power Mode OFF!!! \n");
		  }
}
 80014ce:	e002      	b.n	80014d6 <mpu6050_Init+0xc6>
			  printf("Power Mode OFF!!! \n");
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <mpu6050_Init+0xf0>)
 80014d2:	f004 fa11 	bl	80058f8 <puts>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000204 	.word	0x20000204
 80014e4:	0800a640 	.word	0x0800a640
 80014e8:	0800a650 	.word	0x0800a650
 80014ec:	0800a65c 	.word	0x0800a65c
 80014f0:	0800a66c 	.word	0x0800a66c
 80014f4:	0800a684 	.word	0x0800a684
 80014f8:	0800a694 	.word	0x0800a694
 80014fc:	0800a6b0 	.word	0x0800a6b0
 8001500:	0800a6c0 	.word	0x0800a6c0
 8001504:	00000000 	.word	0x00000000

08001508 <mpu6050_ReadAccel>:

void mpu6050_ReadAccel()
{
 8001508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800150c:	b095      	sub	sp, #84	@ 0x54
 800150e:	af04      	add	r7, sp, #16
	uint8_t dataX[2];
	HAL_StatusTypeDef retX = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_X, 1, dataX, 1, 100);
 8001510:	2364      	movs	r3, #100	@ 0x64
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2301      	movs	r3, #1
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	223b      	movs	r2, #59	@ 0x3b
 8001522:	21d0      	movs	r1, #208	@ 0xd0
 8001524:	48b2      	ldr	r0, [pc, #712]	@ (80017f0 <mpu6050_ReadAccel+0x2e8>)
 8001526:	f001 fb61 	bl	8002bec <HAL_I2C_Mem_Read>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	uint16_t combinedX = (dataX[0] << 8) | dataX[1];
 8001530:	7b3b      	ldrb	r3, [r7, #12]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7b7b      	ldrb	r3, [r7, #13]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	int16_t accelX = (int16_t)combinedX;
 8001540:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001542:	877b      	strh	r3, [r7, #58]	@ 0x3a
	final_accel_X = (accelX/AccelRange) * GValue;
 8001544:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fbc7 	bl	8000cdc <__aeabi_i2f>
 800154e:	4603      	mov	r3, r0
 8001550:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fcc9 	bl	8000eec <__aeabi_fdiv>
 800155a:	4603      	mov	r3, r0
 800155c:	49a5      	ldr	r1, [pc, #660]	@ (80017f4 <mpu6050_ReadAccel+0x2ec>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc10 	bl	8000d84 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4ba3      	ldr	r3, [pc, #652]	@ (80017f8 <mpu6050_ReadAccel+0x2f0>)
 800156a:	601a      	str	r2, [r3, #0]
//	  {
//		  printf("OFF!!! \n");
//	  }

	uint8_t dataY[2];
	HAL_StatusTypeDef retY = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_Y, 1, dataY, 1, 100);
 800156c:	2364      	movs	r3, #100	@ 0x64
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	223d      	movs	r2, #61	@ 0x3d
 800157e:	21d0      	movs	r1, #208	@ 0xd0
 8001580:	489b      	ldr	r0, [pc, #620]	@ (80017f0 <mpu6050_ReadAccel+0x2e8>)
 8001582:	f001 fb33 	bl	8002bec <HAL_I2C_Mem_Read>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

	uint16_t combinedY = (dataY[0] << 8) | dataY[1];
 800158c:	7a3b      	ldrb	r3, [r7, #8]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7a7b      	ldrb	r3, [r7, #9]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21b      	sxth	r3, r3
 800159a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t accelY = (int16_t)combinedY;
 800159c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800159e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	final_accel_Y = (accelY/AccelRange) * GValue;
 80015a0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fb99 	bl	8000cdc <__aeabi_i2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fc9b 	bl	8000eec <__aeabi_fdiv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	498e      	ldr	r1, [pc, #568]	@ (80017f4 <mpu6050_ReadAccel+0x2ec>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fbe2 	bl	8000d84 <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b8d      	ldr	r3, [pc, #564]	@ (80017fc <mpu6050_ReadAccel+0x2f4>)
 80015c6:	601a      	str	r2, [r3, #0]
//	  {
//		  printf("OFF!!! \n");
//	  }

	uint8_t dataZ[2];
	HAL_StatusTypeDef retZ = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_Z, 1, dataZ, 1, 100);
 80015c8:	2364      	movs	r3, #100	@ 0x64
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2301      	movs	r3, #1
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	223f      	movs	r2, #63	@ 0x3f
 80015d8:	21d0      	movs	r1, #208	@ 0xd0
 80015da:	4885      	ldr	r0, [pc, #532]	@ (80017f0 <mpu6050_ReadAccel+0x2e8>)
 80015dc:	f001 fb06 	bl	8002bec <HAL_I2C_Mem_Read>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	uint16_t combinedZ = (dataZ[0] << 8) | dataZ[1];
 80015e6:	793b      	ldrb	r3, [r7, #4]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	863b      	strh	r3, [r7, #48]	@ 0x30
	int16_t accelZ = (int16_t)combinedZ;
 80015f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	final_accel_Z = (accelZ/AccelRange) * GValue;
 80015fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb6c 	bl	8000cdc <__aeabi_i2f>
 8001604:	4603      	mov	r3, r0
 8001606:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fc6e 	bl	8000eec <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	4978      	ldr	r1, [pc, #480]	@ (80017f4 <mpu6050_ReadAccel+0x2ec>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fbb5 	bl	8000d84 <__aeabi_fmul>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b78      	ldr	r3, [pc, #480]	@ (8001800 <mpu6050_ReadAccel+0x2f8>)
 8001620:	601a      	str	r2, [r3, #0]
//	  else
//	  {
//		  printf("OFF!!! \n");
//	  }

	double AngleRoll = atan(final_accel_Y/sqrt(final_accel_X * final_accel_X + final_accel_Z*final_accel_Z)) * 1/(3.142/180) + 3.578485f;
 8001622:	4b76      	ldr	r3, [pc, #472]	@ (80017fc <mpu6050_ReadAccel+0x2f4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fefe 	bl	8000428 <__aeabi_f2d>
 800162c:	4680      	mov	r8, r0
 800162e:	4689      	mov	r9, r1
 8001630:	4b71      	ldr	r3, [pc, #452]	@ (80017f8 <mpu6050_ReadAccel+0x2f0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a70      	ldr	r2, [pc, #448]	@ (80017f8 <mpu6050_ReadAccel+0x2f0>)
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fba2 	bl	8000d84 <__aeabi_fmul>
 8001640:	4603      	mov	r3, r0
 8001642:	461e      	mov	r6, r3
 8001644:	4b6e      	ldr	r3, [pc, #440]	@ (8001800 <mpu6050_ReadAccel+0x2f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6d      	ldr	r2, [pc, #436]	@ (8001800 <mpu6050_ReadAccel+0x2f8>)
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fb98 	bl	8000d84 <__aeabi_fmul>
 8001654:	4603      	mov	r3, r0
 8001656:	4619      	mov	r1, r3
 8001658:	4630      	mov	r0, r6
 800165a:	f7ff fa8b 	bl	8000b74 <__addsf3>
 800165e:	4603      	mov	r3, r0
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fee1 	bl	8000428 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f007 fd7b 	bl	8009168 <sqrt>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4640      	mov	r0, r8
 8001678:	4649      	mov	r1, r9
 800167a:	f7ff f857 	bl	800072c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f007 fd93 	bl	80091b0 <atan>
 800168a:	a353      	add	r3, pc, #332	@ (adr r3, 80017d8 <mpu6050_ReadAccel+0x2d0>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f84c 	bl	800072c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	a350      	add	r3, pc, #320	@ (adr r3, 80017e0 <mpu6050_ReadAccel+0x2d8>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe fd63 	bl	800016c <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double AnglePitch = -atan(final_accel_X/sqrt(final_accel_Y*final_accel_Y + final_accel_Z*final_accel_Z))*1/(3.142/180);
 80016ae:	4b52      	ldr	r3, [pc, #328]	@ (80017f8 <mpu6050_ReadAccel+0x2f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe feb8 	bl	8000428 <__aeabi_f2d>
 80016b8:	4680      	mov	r8, r0
 80016ba:	4689      	mov	r9, r1
 80016bc:	4b4f      	ldr	r3, [pc, #316]	@ (80017fc <mpu6050_ReadAccel+0x2f4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a4e      	ldr	r2, [pc, #312]	@ (80017fc <mpu6050_ReadAccel+0x2f4>)
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fb5c 	bl	8000d84 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461e      	mov	r6, r3
 80016d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001800 <mpu6050_ReadAccel+0x2f8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001800 <mpu6050_ReadAccel+0x2f8>)
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fb52 	bl	8000d84 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4630      	mov	r0, r6
 80016e6:	f7ff fa45 	bl	8000b74 <__addsf3>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fe9b 	bl	8000428 <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f007 fd35 	bl	8009168 <sqrt>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4640      	mov	r0, r8
 8001704:	4649      	mov	r1, r9
 8001706:	f7ff f811 	bl	800072c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f007 fd4d 	bl	80091b0 <atan>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4614      	mov	r4, r2
 800171c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001720:	a32d      	add	r3, pc, #180	@ (adr r3, 80017d8 <mpu6050_ReadAccel+0x2d0>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7fe ffff 	bl	800072c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double AngleYaw = atan(final_accel_Z/sqrt(final_accel_X*final_accel_X + final_accel_Y*final_accel_Y)* 1/(3.142/180)) + 1.569705f;
 8001736:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <mpu6050_ReadAccel+0x2f8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe74 	bl	8000428 <__aeabi_f2d>
 8001740:	4604      	mov	r4, r0
 8001742:	460d      	mov	r5, r1
 8001744:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <mpu6050_ReadAccel+0x2f0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2b      	ldr	r2, [pc, #172]	@ (80017f8 <mpu6050_ReadAccel+0x2f0>)
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb18 	bl	8000d84 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	461e      	mov	r6, r3
 8001758:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <mpu6050_ReadAccel+0x2f4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a27      	ldr	r2, [pc, #156]	@ (80017fc <mpu6050_ReadAccel+0x2f4>)
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fb0e 	bl	8000d84 <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	4619      	mov	r1, r3
 800176c:	4630      	mov	r0, r6
 800176e:	f7ff fa01 	bl	8000b74 <__addsf3>
 8001772:	4603      	mov	r3, r0
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe57 	bl	8000428 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f007 fcf1 	bl	8009168 <sqrt>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe ffcd 	bl	800072c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	a30f      	add	r3, pc, #60	@ (adr r3, 80017d8 <mpu6050_ReadAccel+0x2d0>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe ffc4 	bl	800072c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f007 fd00 	bl	80091b0 <atan>
 80017b0:	a30d      	add	r3, pc, #52	@ (adr r3, 80017e8 <mpu6050_ReadAccel+0x2e0>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe fcd9 	bl	800016c <__adddf3>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	e9c7 2304 	strd	r2, r3, [r7, #16]

//	printf("Roll Angle is %f\n", AngleRoll);
//	printf("Pitch Angle is %f\n", AnglePitch);
//	printf("Yaw Angle is %f\n", AngleYaw);

	printf("\n \n \n \n");
 80017c2:	4810      	ldr	r0, [pc, #64]	@ (8001804 <mpu6050_ReadAccel+0x2fc>)
 80017c4:	f004 f898 	bl	80058f8 <puts>
}
 80017c8:	bf00      	nop
 80017ca:	3744      	adds	r7, #68	@ 0x44
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	80fa7e3f 	.word	0x80fa7e3f
 80017dc:	3f91dfde 	.word	0x3f91dfde
 80017e0:	c0000000 	.word	0xc0000000
 80017e4:	400ca0bc 	.word	0x400ca0bc
 80017e8:	00000000 	.word	0x00000000
 80017ec:	3ff91d83 	.word	0x3ff91d83
 80017f0:	20000204 	.word	0x20000204
 80017f4:	411cf5c3 	.word	0x411cf5c3
 80017f8:	20000310 	.word	0x20000310
 80017fc:	20000314 	.word	0x20000314
 8001800:	20000318 	.word	0x20000318
 8001804:	0800a6d4 	.word	0x0800a6d4

08001808 <mpu6050_ReadGyro>:

void mpu6050_ReadGyro()
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b091      	sub	sp, #68	@ 0x44
 800180c:	af04      	add	r7, sp, #16
	uint8_t dataX[2];
	HAL_StatusTypeDef retX = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_X, 1, dataX, 1, 100);
 800180e:	2364      	movs	r3, #100	@ 0x64
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	2301      	movs	r3, #1
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	2243      	movs	r2, #67	@ 0x43
 8001820:	21d0      	movs	r1, #208	@ 0xd0
 8001822:	4855      	ldr	r0, [pc, #340]	@ (8001978 <mpu6050_ReadGyro+0x170>)
 8001824:	f001 f9e2 	bl	8002bec <HAL_I2C_Mem_Read>
 8001828:	4603      	mov	r3, r0
 800182a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	uint16_t combinedX = (dataX[0] << 8) | dataX[1];
 800182e:	7b3b      	ldrb	r3, [r7, #12]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	853b      	strh	r3, [r7, #40]	@ 0x28
	int16_t accelX = (int16_t)combinedX;
 800183e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001840:	84fb      	strh	r3, [r7, #38]	@ 0x26
	final_gyro_X = (accelX * GYROCONVERTOR) + 1.953141f;
 8001842:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa48 	bl	8000cdc <__aeabi_i2f>
 800184c:	4603      	mov	r3, r0
 800184e:	494b      	ldr	r1, [pc, #300]	@ (800197c <mpu6050_ReadGyro+0x174>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fa97 	bl	8000d84 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	4949      	ldr	r1, [pc, #292]	@ (8001980 <mpu6050_ReadGyro+0x178>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f98a 	bl	8000b74 <__addsf3>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <mpu6050_ReadGyro+0x17c>)
 8001866:	601a      	str	r2, [r3, #0]

	if (retX == HAL_OK)
 8001868:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <mpu6050_ReadGyro+0x6e>
	  {
		//printf("GyroX is %f \n",final_gyro_X);
	  }
	  else
	  {
		  printf("OFFX!!! \n");
 8001870:	4845      	ldr	r0, [pc, #276]	@ (8001988 <mpu6050_ReadGyro+0x180>)
 8001872:	f004 f841 	bl	80058f8 <puts>
	  }

	uint8_t dataY[2];
	HAL_StatusTypeDef retY = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_Y, 1, dataY, 1, 100);
 8001876:	2364      	movs	r3, #100	@ 0x64
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2301      	movs	r3, #1
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	2245      	movs	r2, #69	@ 0x45
 8001888:	21d0      	movs	r1, #208	@ 0xd0
 800188a:	483b      	ldr	r0, [pc, #236]	@ (8001978 <mpu6050_ReadGyro+0x170>)
 800188c:	f001 f9ae 	bl	8002bec <HAL_I2C_Mem_Read>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	uint16_t combinedY = (dataY[0] << 8) | dataY[1];
 8001896:	7a3b      	ldrb	r3, [r7, #8]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	7a7b      	ldrb	r3, [r7, #9]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	847b      	strh	r3, [r7, #34]	@ 0x22
	int16_t accelY = (int16_t)combinedY;
 80018a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80018a8:	843b      	strh	r3, [r7, #32]
	final_gyro_Y = (accelY * GYROCONVERTOR) - 0.022888f;
 80018aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa14 	bl	8000cdc <__aeabi_i2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4931      	ldr	r1, [pc, #196]	@ (800197c <mpu6050_ReadGyro+0x174>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa63 	bl	8000d84 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	4932      	ldr	r1, [pc, #200]	@ (800198c <mpu6050_ReadGyro+0x184>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f954 	bl	8000b70 <__aeabi_fsub>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <mpu6050_ReadGyro+0x188>)
 80018ce:	601a      	str	r2, [r3, #0]

	if (retY == HAL_OK)
 80018d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <mpu6050_ReadGyro+0xd6>
	  {
		//printf("GyroY is %f \n",final_gyro_Y);
	  }
	  else
	  {
		  printf("OFFY!!! \n");
 80018d8:	482e      	ldr	r0, [pc, #184]	@ (8001994 <mpu6050_ReadGyro+0x18c>)
 80018da:	f004 f80d 	bl	80058f8 <puts>
	  }

	uint8_t dataZ[2];
	HAL_StatusTypeDef retZ = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_Z, 1, dataZ, 1, 100);
 80018de:	2364      	movs	r3, #100	@ 0x64
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2301      	movs	r3, #1
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	2247      	movs	r2, #71	@ 0x47
 80018ee:	21d0      	movs	r1, #208	@ 0xd0
 80018f0:	4821      	ldr	r0, [pc, #132]	@ (8001978 <mpu6050_ReadGyro+0x170>)
 80018f2:	f001 f97b 	bl	8002bec <HAL_I2C_Mem_Read>
 80018f6:	4603      	mov	r3, r0
 80018f8:	77fb      	strb	r3, [r7, #31]

	uint16_t combinedZ = (dataZ[0] << 8) | dataZ[1];
 80018fa:	793b      	ldrb	r3, [r7, #4]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	797b      	ldrb	r3, [r7, #5]
 8001902:	b21b      	sxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b21b      	sxth	r3, r3
 8001908:	83bb      	strh	r3, [r7, #28]
	int16_t accelZ = (int16_t)combinedZ;
 800190a:	8bbb      	ldrh	r3, [r7, #28]
 800190c:	837b      	strh	r3, [r7, #26]
	final_gyro_Z = (accelZ * GYROCONVERTOR);
 800190e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f9e2 	bl	8000cdc <__aeabi_i2f>
 8001918:	4603      	mov	r3, r0
 800191a:	4918      	ldr	r1, [pc, #96]	@ (800197c <mpu6050_ReadGyro+0x174>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fa31 	bl	8000d84 <__aeabi_fmul>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <mpu6050_ReadGyro+0x190>)
 8001928:	601a      	str	r2, [r3, #0]

	if (retZ == HAL_OK)
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <mpu6050_ReadGyro+0x12e>
	  {
		//printf("GyroZ is %f \n",final_gyro_Z);
	  }
	  else
	  {
		  printf("OFFZ!!! \n");
 8001930:	481a      	ldr	r0, [pc, #104]	@ (800199c <mpu6050_ReadGyro+0x194>)
 8001932:	f003 ffe1 	bl	80058f8 <puts>
	  }

	uint32_t currentTime = __HAL_TIM_GET_COUNTER(&htim1);
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <mpu6050_ReadGyro+0x198>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	617b      	str	r3, [r7, #20]
	float TickSpan, TimeSpan;
	if(currentTime < previousTime){
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <mpu6050_ReadGyro+0x19c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	d231      	bcs.n	80019ac <mpu6050_ReadGyro+0x1a4>
		TickSpan = (65535.0f - previousTime) + currentTime;
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <mpu6050_ReadGyro+0x19c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f9c1 	bl	8000cd4 <__aeabi_ui2f>
 8001952:	4603      	mov	r3, r0
 8001954:	4619      	mov	r1, r3
 8001956:	4814      	ldr	r0, [pc, #80]	@ (80019a8 <mpu6050_ReadGyro+0x1a0>)
 8001958:	f7ff f90a 	bl	8000b70 <__aeabi_fsub>
 800195c:	4603      	mov	r3, r0
 800195e:	461c      	mov	r4, r3
 8001960:	6978      	ldr	r0, [r7, #20]
 8001962:	f7ff f9b7 	bl	8000cd4 <__aeabi_ui2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff f902 	bl	8000b74 <__addsf3>
 8001970:	4603      	mov	r3, r0
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001974:	e023      	b.n	80019be <mpu6050_ReadGyro+0x1b6>
 8001976:	bf00      	nop
 8001978:	20000204 	.word	0x20000204
 800197c:	3bfa01f4 	.word	0x3bfa01f4
 8001980:	3ffa0086 	.word	0x3ffa0086
 8001984:	200002f8 	.word	0x200002f8
 8001988:	0800a6dc 	.word	0x0800a6dc
 800198c:	3cbb7f9d 	.word	0x3cbb7f9d
 8001990:	200002fc 	.word	0x200002fc
 8001994:	0800a6e8 	.word	0x0800a6e8
 8001998:	20000300 	.word	0x20000300
 800199c:	0800a6f4 	.word	0x0800a6f4
 80019a0:	20000258 	.word	0x20000258
 80019a4:	200002e8 	.word	0x200002e8
 80019a8:	477fff00 	.word	0x477fff00
		//printf("OverFlow\n");
		//TickSpan = (float) TickSpan;
	}else{
		TickSpan = currentTime - previousTime;
 80019ac:	4b49      	ldr	r3, [pc, #292]	@ (8001ad4 <mpu6050_ReadGyro+0x2cc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f98d 	bl	8000cd4 <__aeabi_ui2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		//printf("Chill calc\n");
	}


	TimeSpan = TickSpan / 64000.0f;
 80019be:	4946      	ldr	r1, [pc, #280]	@ (8001ad8 <mpu6050_ReadGyro+0x2d0>)
 80019c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019c2:	f7ff fa93 	bl	8000eec <__aeabi_fdiv>
 80019c6:	4603      	mov	r3, r0
 80019c8:	613b      	str	r3, [r7, #16]

	gyro_X = 0.7f * gyro_X + 0.3f * final_gyro_X;
 80019ca:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <mpu6050_ReadGyro+0x2d4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4944      	ldr	r1, [pc, #272]	@ (8001ae0 <mpu6050_ReadGyro+0x2d8>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f9d7 	bl	8000d84 <__aeabi_fmul>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461c      	mov	r4, r3
 80019da:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <mpu6050_ReadGyro+0x2dc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4942      	ldr	r1, [pc, #264]	@ (8001ae8 <mpu6050_ReadGyro+0x2e0>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f9cf 	bl	8000d84 <__aeabi_fmul>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff f8c2 	bl	8000b74 <__addsf3>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <mpu6050_ReadGyro+0x2d4>)
 80019f6:	601a      	str	r2, [r3, #0]
	gyro_Y = 0.7f * gyro_Y + 0.3f * final_gyro_Y;
 80019f8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aec <mpu6050_ReadGyro+0x2e4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4938      	ldr	r1, [pc, #224]	@ (8001ae0 <mpu6050_ReadGyro+0x2d8>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9c0 	bl	8000d84 <__aeabi_fmul>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461c      	mov	r4, r3
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <mpu6050_ReadGyro+0x2e8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4936      	ldr	r1, [pc, #216]	@ (8001ae8 <mpu6050_ReadGyro+0x2e0>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f9b8 	bl	8000d84 <__aeabi_fmul>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7ff f8ab 	bl	8000b74 <__addsf3>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <mpu6050_ReadGyro+0x2e4>)
 8001a24:	601a      	str	r2, [r3, #0]
	gyro_Z = 0.7f * gyro_Z + 0.3f * final_gyro_Z;
 8001a26:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <mpu6050_ReadGyro+0x2ec>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	492d      	ldr	r1, [pc, #180]	@ (8001ae0 <mpu6050_ReadGyro+0x2d8>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f9a9 	bl	8000d84 <__aeabi_fmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461c      	mov	r4, r3
 8001a36:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <mpu6050_ReadGyro+0x2f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	492b      	ldr	r1, [pc, #172]	@ (8001ae8 <mpu6050_ReadGyro+0x2e0>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f9a1 	bl	8000d84 <__aeabi_fmul>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff f894 	bl	8000b74 <__addsf3>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <mpu6050_ReadGyro+0x2ec>)
 8001a52:	601a      	str	r2, [r3, #0]

	//printf("\nThe TimeValues  is %f %f, %f\n",TimeSpan, TickSpan, TIMERFREQUENCY);
//	float angX,angY,angZ;
	angX1 += gyro_X * TimeSpan;
 8001a54:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <mpu6050_ReadGyro+0x2d4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6939      	ldr	r1, [r7, #16]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f992 	bl	8000d84 <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <mpu6050_ReadGyro+0x2f4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff f882 	bl	8000b74 <__addsf3>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <mpu6050_ReadGyro+0x2f4>)
 8001a76:	601a      	str	r2, [r3, #0]
	angY1 += gyro_Y * TimeSpan;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <mpu6050_ReadGyro+0x2e4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6939      	ldr	r1, [r7, #16]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f980 	bl	8000d84 <__aeabi_fmul>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <mpu6050_ReadGyro+0x2f8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f7ff f870 	bl	8000b74 <__addsf3>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <mpu6050_ReadGyro+0x2f8>)
 8001a9a:	601a      	str	r2, [r3, #0]
	angZ1 += gyro_Z * TimeSpan;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <mpu6050_ReadGyro+0x2ec>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f96e 	bl	8000d84 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <mpu6050_ReadGyro+0x2fc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	f7ff f85e 	bl	8000b74 <__addsf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <mpu6050_ReadGyro+0x2fc>)
 8001abe:	601a      	str	r2, [r3, #0]

	//printf("\n\n 1GyroX is %f \n GyroY is %f \n GyroZ is %f \n\n", gyro_X, gyro_Y, gyro_Z);

	if(__HAL_TIM_GET_COUNTER(&htim1) >= 60000)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <mpu6050_ReadGyro+0x300>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	{
		//printf("2GyroX is %f \n GyroY is %f \n GyroZ is %f \n\n",angX1 , angY1, angZ1);
	}


	previousTime = currentTime;
 8001ac6:	4a03      	ldr	r2, [pc, #12]	@ (8001ad4 <mpu6050_ReadGyro+0x2cc>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	6013      	str	r3, [r2, #0]
//	}
//
//	printf("\n Calib values of X is %f\nCalib values of Y is %f\nCalib values of Z is %f\n",calib_gyroX/2000.0f,calib_gyroY/2000.0f,calib_gyroZ/2000.0f);

	//printf("\n");
}
 8001acc:	bf00      	nop
 8001ace:	3734      	adds	r7, #52	@ 0x34
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	200002e8 	.word	0x200002e8
 8001ad8:	477a0000 	.word	0x477a0000
 8001adc:	20000304 	.word	0x20000304
 8001ae0:	3f333333 	.word	0x3f333333
 8001ae4:	200002f8 	.word	0x200002f8
 8001ae8:	3e99999a 	.word	0x3e99999a
 8001aec:	20000308 	.word	0x20000308
 8001af0:	200002fc 	.word	0x200002fc
 8001af4:	2000030c 	.word	0x2000030c
 8001af8:	20000300 	.word	0x20000300
 8001afc:	200002ec 	.word	0x200002ec
 8001b00:	200002f0 	.word	0x200002f0
 8001b04:	200002f4 	.word	0x200002f4
 8001b08:	20000258 	.word	0x20000258
 8001b0c:	00000000 	.word	0x00000000

08001b10 <FinalAngle>:

}


void FinalAngle()
{
 8001b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af02      	add	r7, sp, #8
	mpu6050_ReadGyro(); //final_gyro values updated
 8001b18:	f7ff fe76 	bl	8001808 <mpu6050_ReadGyro>
	mpu6050_ReadAccel();
 8001b1c:	f7ff fcf4 	bl	8001508 <mpu6050_ReadAccel>

	float angle_pitch = 0.996f * angX1 + 0.004f * AnglePitch;
 8001b20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce0 <FinalAngle+0x1d0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	496f      	ldr	r1, [pc, #444]	@ (8001ce4 <FinalAngle+0x1d4>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f92c 	bl	8000d84 <__aeabi_fmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fc7a 	bl	8000428 <__aeabi_f2d>
 8001b34:	4604      	mov	r4, r0
 8001b36:	460d      	mov	r5, r1
 8001b38:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce8 <FinalAngle+0x1d8>)
 8001b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3e:	a364      	add	r3, pc, #400	@ (adr r3, 8001cd0 <FinalAngle+0x1c0>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fcc8 	bl	80004d8 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7fe fb0c 	bl	800016c <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7fe ffb4 	bl	8000ac8 <__aeabi_d2f>
 8001b60:	4603      	mov	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]
	float angle_roll = 0.996f * angY1 + 0.004f * AngleRoll;
 8001b64:	4b61      	ldr	r3, [pc, #388]	@ (8001cec <FinalAngle+0x1dc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	495e      	ldr	r1, [pc, #376]	@ (8001ce4 <FinalAngle+0x1d4>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f90a 	bl	8000d84 <__aeabi_fmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc58 	bl	8000428 <__aeabi_f2d>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf0 <FinalAngle+0x1e0>)
 8001b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b82:	a353      	add	r3, pc, #332	@ (adr r3, 8001cd0 <FinalAngle+0x1c0>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fca6 	bl	80004d8 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4620      	mov	r0, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	f7fe faea 	bl	800016c <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe ff92 	bl	8000ac8 <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
	float angle_yaw = 0.996f * angZ1 + 0.004f * AngleYaw;
 8001ba8:	4b52      	ldr	r3, [pc, #328]	@ (8001cf4 <FinalAngle+0x1e4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	494d      	ldr	r1, [pc, #308]	@ (8001ce4 <FinalAngle+0x1d4>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f8e8 	bl	8000d84 <__aeabi_fmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc36 	bl	8000428 <__aeabi_f2d>
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	460d      	mov	r5, r1
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf8 <FinalAngle+0x1e8>)
 8001bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc6:	a342      	add	r3, pc, #264	@ (adr r3, 8001cd0 <FinalAngle+0x1c0>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fc84 	bl	80004d8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fac8 	bl	800016c <__adddf3>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ff70 	bl	8000ac8 <__aeabi_d2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	607b      	str	r3, [r7, #4]

	angle_pitch -= angle_roll * sin(gyro_Z * 0.000001066);                  //If the IMU has yawed transfer the roll angle to the pitch angel.
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7fe fc1b 	bl	8000428 <__aeabi_f2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	68b8      	ldr	r0, [r7, #8]
 8001bf8:	f7fe fc16 	bl	8000428 <__aeabi_f2d>
 8001bfc:	4680      	mov	r8, r0
 8001bfe:	4689      	mov	r9, r1
 8001c00:	4b3e      	ldr	r3, [pc, #248]	@ (8001cfc <FinalAngle+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fc0f 	bl	8000428 <__aeabi_f2d>
 8001c0a:	a333      	add	r3, pc, #204	@ (adr r3, 8001cd8 <FinalAngle+0x1c8>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fc62 	bl	80004d8 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f007 fc5c 	bl	80094d8 <sin>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4640      	mov	r0, r8
 8001c26:	4649      	mov	r1, r9
 8001c28:	f7fe fc56 	bl	80004d8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fa98 	bl	8000168 <__aeabi_dsub>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ff42 	bl	8000ac8 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
	angle_roll += angle_pitch * sin(gyro_Z * 0.000001066);                  //If the IMU has yawed transfer the pitch angle to the roll angel.
 8001c48:	68b8      	ldr	r0, [r7, #8]
 8001c4a:	f7fe fbed 	bl	8000428 <__aeabi_f2d>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	460d      	mov	r5, r1
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7fe fbe8 	bl	8000428 <__aeabi_f2d>
 8001c58:	4680      	mov	r8, r0
 8001c5a:	4689      	mov	r9, r1
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <FinalAngle+0x1ec>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fbe1 	bl	8000428 <__aeabi_f2d>
 8001c66:	a31c      	add	r3, pc, #112	@ (adr r3, 8001cd8 <FinalAngle+0x1c8>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe fc34 	bl	80004d8 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f007 fc2e 	bl	80094d8 <sin>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4640      	mov	r0, r8
 8001c82:	4649      	mov	r1, r9
 8001c84:	f7fe fc28 	bl	80004d8 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4629      	mov	r1, r5
 8001c90:	f7fe fa6c 	bl	800016c <__adddf3>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ff14 	bl	8000ac8 <__aeabi_d2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60bb      	str	r3, [r7, #8]

	printf("\n\n\nPitch Angle is %f Roll Angle is %f\n\n\n",angle_pitch, angle_roll);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7fe fbbf 	bl	8000428 <__aeabi_f2d>
 8001caa:	4604      	mov	r4, r0
 8001cac:	460d      	mov	r5, r1
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	f7fe fbba 	bl	8000428 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	e9cd 2300 	strd	r2, r3, [sp]
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	480f      	ldr	r0, [pc, #60]	@ (8001d00 <FinalAngle+0x1f0>)
 8001cc2:	f003 fdb1 	bl	8005828 <iprintf>

}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cd0:	e0000000 	.word	0xe0000000
 8001cd4:	3f70624d 	.word	0x3f70624d
 8001cd8:	652c6e62 	.word	0x652c6e62
 8001cdc:	3eb1e26f 	.word	0x3eb1e26f
 8001ce0:	200002ec 	.word	0x200002ec
 8001ce4:	3f7ef9db 	.word	0x3f7ef9db
 8001ce8:	20000330 	.word	0x20000330
 8001cec:	200002f0 	.word	0x200002f0
 8001cf0:	20000320 	.word	0x20000320
 8001cf4:	200002f4 	.word	0x200002f4
 8001cf8:	20000328 	.word	0x20000328
 8001cfc:	2000030c 	.word	0x2000030c
 8001d00:	0800a700 	.word	0x0800a700

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_MspInit+0x5c>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <HAL_MspInit+0x5c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_MspInit+0x5c>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_MspInit+0x5c>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a0e      	ldr	r2, [pc, #56]	@ (8001d60 <HAL_MspInit+0x5c>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_MspInit+0x5c>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_MspInit+0x60>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_MspInit+0x60>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010000 	.word	0x40010000

08001d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <HAL_I2C_MspInit+0x90>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d132      	bne.n	8001dee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_I2C_MspInit+0x94>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <HAL_I2C_MspInit+0x94>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_I2C_MspInit+0x94>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001da0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da6:	2312      	movs	r3, #18
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4812      	ldr	r0, [pc, #72]	@ (8001e00 <HAL_I2C_MspInit+0x98>)
 8001db6:	f000 fb1d 	bl	80023f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_I2C_MspInit+0x9c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <HAL_I2C_MspInit+0x9c>)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_I2C_MspInit+0x94>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_I2C_MspInit+0x94>)
 8001ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_I2C_MspInit+0x94>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	@ 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40005400 	.word	0x40005400
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010c00 	.word	0x40010c00
 8001e04:	40010000 	.word	0x40010000

08001e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_TIM_Base_MspInit+0x34>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10b      	bne.n	8001e32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_TIM_Base_MspInit+0x38>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <HAL_TIM_Base_MspInit+0x38>)
 8001e20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e24:	6193      	str	r3, [r2, #24]
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_TIM_Base_MspInit+0x38>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a15      	ldr	r2, [pc, #84]	@ (8001eb4 <HAL_UART_MspInit+0x70>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d123      	bne.n	8001eac <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e64:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <HAL_UART_MspInit+0x74>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <HAL_UART_MspInit+0x74>)
 8001e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6e:	61d3      	str	r3, [r2, #28]
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <HAL_UART_MspInit+0x74>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_UART_MspInit+0x74>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <HAL_UART_MspInit+0x74>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_UART_MspInit+0x74>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e94:	230c      	movs	r3, #12
 8001e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <HAL_UART_MspInit+0x78>)
 8001ea8:	f000 faa4 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40004400 	.word	0x40004400
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010800 	.word	0x40010800

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f000 f922 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f20:	f000 fc04 	bl	800272c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <_kill>:

int _kill(int pid, int sig)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f40:	f003 fe2c 	bl	8005b9c <__errno>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2216      	movs	r2, #22
 8001f48:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_exit>:

void _exit (int status)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffe7 	bl	8001f36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <_exit+0x12>

08001f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f7e:	f3af 8000 	nop.w
 8001f82:	4601      	mov	r1, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf0      	blt.n	8001f7e <_read+0x12>
  }

  return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fcc:	605a      	str	r2, [r3, #4]
  return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <_isatty>:

int _isatty(int file)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
	...

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	@ (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f003 fdb0 	bl	8005b9c <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20005000 	.word	0x20005000
 8002068:	00000400 	.word	0x00000400
 800206c:	20000338 	.word	0x20000338
 8002070:	20000490 	.word	0x20000490

08002074 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002080:	f7ff fff8 	bl	8002074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002084:	480b      	ldr	r0, [pc, #44]	@ (80020b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002086:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002088:	4a0c      	ldr	r2, [pc, #48]	@ (80020bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800209c:	4c09      	ldr	r4, [pc, #36]	@ (80020c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f003 fd7d 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ae:	f7ff f831 	bl	8001114 <main>
  bx lr
 80020b2:	4770      	bx	lr
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80020bc:	0800adb0 	.word	0x0800adb0
  ldr r2, =_sbss
 80020c0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80020c4:	2000048c 	.word	0x2000048c

080020c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_2_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <HAL_Init+0x28>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <HAL_Init+0x28>)
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f947 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f000 f808 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fe0c 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40022000 	.word	0x40022000

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f95f 	bl	80023da <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 f927 	bl	8002386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000000 	.word	0x20000000
 8002150:	20000008 	.word	0x20000008
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_IncTick+0x1c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_IncTick+0x20>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a03      	ldr	r2, [pc, #12]	@ (8002178 <HAL_IncTick+0x20>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000008 	.word	0x20000008
 8002178:	2000033c 	.word	0x2000033c

0800217c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b02      	ldr	r3, [pc, #8]	@ (800218c <HAL_GetTick+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	2000033c 	.word	0x2000033c

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fff0 	bl	800217c <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffe0 	bl	800217c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000008 	.word	0x20000008

080021d8 <__NVIC_SetPriorityGrouping>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4906      	ldr	r1, [pc, #24]	@ (8002270 <__NVIC_EnableIRQ+0x34>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	@ (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	@ (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	@ 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <SysTick_Config>:
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f7ff ff90 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	@ (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff2d 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff42 	bl	8002220 <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff90 	bl	80022c8 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5f 	bl	8002274 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff35 	bl	800223c <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa2 	bl	800232c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	@ 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	e169      	b.n	80026dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002408:	2201      	movs	r2, #1
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8158 	bne.w	80026d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a9a      	ldr	r2, [pc, #616]	@ (8002694 <HAL_GPIO_Init+0x2a0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d05e      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002430:	4a98      	ldr	r2, [pc, #608]	@ (8002694 <HAL_GPIO_Init+0x2a0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d875      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002436:	4a98      	ldr	r2, [pc, #608]	@ (8002698 <HAL_GPIO_Init+0x2a4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d058      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 800243c:	4a96      	ldr	r2, [pc, #600]	@ (8002698 <HAL_GPIO_Init+0x2a4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d86f      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002442:	4a96      	ldr	r2, [pc, #600]	@ (800269c <HAL_GPIO_Init+0x2a8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d052      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002448:	4a94      	ldr	r2, [pc, #592]	@ (800269c <HAL_GPIO_Init+0x2a8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d869      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800244e:	4a94      	ldr	r2, [pc, #592]	@ (80026a0 <HAL_GPIO_Init+0x2ac>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d04c      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002454:	4a92      	ldr	r2, [pc, #584]	@ (80026a0 <HAL_GPIO_Init+0x2ac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d863      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800245a:	4a92      	ldr	r2, [pc, #584]	@ (80026a4 <HAL_GPIO_Init+0x2b0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d046      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002460:	4a90      	ldr	r2, [pc, #576]	@ (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d85d      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002466:	2b12      	cmp	r3, #18
 8002468:	d82a      	bhi.n	80024c0 <HAL_GPIO_Init+0xcc>
 800246a:	2b12      	cmp	r3, #18
 800246c:	d859      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800246e:	a201      	add	r2, pc, #4	@ (adr r2, 8002474 <HAL_GPIO_Init+0x80>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	080024ef 	.word	0x080024ef
 8002478:	080024c9 	.word	0x080024c9
 800247c:	080024db 	.word	0x080024db
 8002480:	0800251d 	.word	0x0800251d
 8002484:	08002523 	.word	0x08002523
 8002488:	08002523 	.word	0x08002523
 800248c:	08002523 	.word	0x08002523
 8002490:	08002523 	.word	0x08002523
 8002494:	08002523 	.word	0x08002523
 8002498:	08002523 	.word	0x08002523
 800249c:	08002523 	.word	0x08002523
 80024a0:	08002523 	.word	0x08002523
 80024a4:	08002523 	.word	0x08002523
 80024a8:	08002523 	.word	0x08002523
 80024ac:	08002523 	.word	0x08002523
 80024b0:	08002523 	.word	0x08002523
 80024b4:	08002523 	.word	0x08002523
 80024b8:	080024d1 	.word	0x080024d1
 80024bc:	080024e5 	.word	0x080024e5
 80024c0:	4a79      	ldr	r2, [pc, #484]	@ (80026a8 <HAL_GPIO_Init+0x2b4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024c6:	e02c      	b.n	8002522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	623b      	str	r3, [r7, #32]
          break;
 80024ce:	e029      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	3304      	adds	r3, #4
 80024d6:	623b      	str	r3, [r7, #32]
          break;
 80024d8:	e024      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	3308      	adds	r3, #8
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e01f      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	330c      	adds	r3, #12
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e01a      	b.n	8002524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024f6:	2304      	movs	r3, #4
 80024f8:	623b      	str	r3, [r7, #32]
          break;
 80024fa:	e013      	b.n	8002524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002504:	2308      	movs	r3, #8
 8002506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	611a      	str	r2, [r3, #16]
          break;
 800250e:	e009      	b.n	8002524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002510:	2308      	movs	r3, #8
 8002512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	615a      	str	r2, [r3, #20]
          break;
 800251a:	e003      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
          break;
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x130>
          break;
 8002522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2bff      	cmp	r3, #255	@ 0xff
 8002528:	d801      	bhi.n	800252e <HAL_GPIO_Init+0x13a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	e001      	b.n	8002532 <HAL_GPIO_Init+0x13e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2bff      	cmp	r3, #255	@ 0xff
 8002538:	d802      	bhi.n	8002540 <HAL_GPIO_Init+0x14c>
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	e002      	b.n	8002546 <HAL_GPIO_Init+0x152>
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	3b08      	subs	r3, #8
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	210f      	movs	r1, #15
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	401a      	ands	r2, r3
 8002558:	6a39      	ldr	r1, [r7, #32]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	431a      	orrs	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80b1 	beq.w	80026d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002574:	4b4d      	ldr	r3, [pc, #308]	@ (80026ac <HAL_GPIO_Init+0x2b8>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a4c      	ldr	r2, [pc, #304]	@ (80026ac <HAL_GPIO_Init+0x2b8>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b4a      	ldr	r3, [pc, #296]	@ (80026ac <HAL_GPIO_Init+0x2b8>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800258c:	4a48      	ldr	r2, [pc, #288]	@ (80026b0 <HAL_GPIO_Init+0x2bc>)
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a40      	ldr	r2, [pc, #256]	@ (80026b4 <HAL_GPIO_Init+0x2c0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_GPIO_Init+0x1ec>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3f      	ldr	r2, [pc, #252]	@ (80026b8 <HAL_GPIO_Init+0x2c4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00d      	beq.n	80025dc <HAL_GPIO_Init+0x1e8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3e      	ldr	r2, [pc, #248]	@ (80026bc <HAL_GPIO_Init+0x2c8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1e4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3d      	ldr	r2, [pc, #244]	@ (80026c0 <HAL_GPIO_Init+0x2cc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_GPIO_Init+0x1e0>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e006      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e004      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025d8:	2302      	movs	r3, #2
 80025da:	e002      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	4093      	lsls	r3, r2
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025f2:	492f      	ldr	r1, [pc, #188]	@ (80026b0 <HAL_GPIO_Init+0x2bc>)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260c:	4b2d      	ldr	r3, [pc, #180]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	492c      	ldr	r1, [pc, #176]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261a:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	43db      	mvns	r3, r3
 8002622:	4928      	ldr	r1, [pc, #160]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002624:	4013      	ands	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4922      	ldr	r1, [pc, #136]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002642:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	43db      	mvns	r3, r3
 800264a:	491e      	ldr	r1, [pc, #120]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800264c:	4013      	ands	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4918      	ldr	r1, [pc, #96]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800266a:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	43db      	mvns	r3, r3
 8002672:	4914      	ldr	r1, [pc, #80]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002674:	4013      	ands	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d021      	beq.n	80026c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	490e      	ldr	r1, [pc, #56]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e021      	b.n	80026d6 <HAL_GPIO_Init+0x2e2>
 8002692:	bf00      	nop
 8002694:	10320000 	.word	0x10320000
 8002698:	10310000 	.word	0x10310000
 800269c:	10220000 	.word	0x10220000
 80026a0:	10210000 	.word	0x10210000
 80026a4:	10120000 	.word	0x10120000
 80026a8:	10110000 	.word	0x10110000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40011400 	.word	0x40011400
 80026c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_GPIO_Init+0x304>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	4909      	ldr	r1, [pc, #36]	@ (80026f8 <HAL_GPIO_Init+0x304>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	3301      	adds	r3, #1
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f47f ae8e 	bne.w	8002408 <HAL_GPIO_Init+0x14>
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	372c      	adds	r7, #44	@ 0x2c
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40010400 	.word	0x40010400

080026fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800270c:	787b      	ldrb	r3, [r7, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002718:	e003      	b.n	8002722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	611a      	str	r2, [r3, #16]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f806 	bl	800275c <HAL_GPIO_EXTI_Callback>
  }
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40010400 	.word	0x40010400

0800275c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fae6 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	@ 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f001 fd1e 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	@ (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	@ (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	@ (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	@ (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	@ (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	@ (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	@ (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a12:	f7ff fbb3 	bl	800217c <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	f040 80d9 	bne.w	8002bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2319      	movs	r3, #25
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	496d      	ldr	r1, [pc, #436]	@ (8002be4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fdef 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0cc      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Mem_Write+0x56>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0c5      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d007      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	@ 0x21
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8002be8 <HAL_I2C_Mem_Write+0x1f0>)
 8002ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab6:	88f8      	ldrh	r0, [r7, #6]
 8002ab8:	893a      	ldrh	r2, [r7, #8]
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fc26 	bl	8003318 <I2C_RequestMemoryWrite>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d052      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e081      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 feb4 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06b      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d11b      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x180>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1aa      	bne.n	8002ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fea7 	bl	80038d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e016      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	00100002 	.word	0x00100002
 8002be8:	ffff0000 	.word	0xffff0000

08002bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	@ 0x30
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0a:	f7ff fab7 	bl	800217c <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 8244 	bne.w	80030a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2319      	movs	r3, #25
 8002c24:	2201      	movs	r2, #1
 8002c26:	4982      	ldr	r1, [pc, #520]	@ (8002e30 <HAL_I2C_Mem_Read+0x244>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fcf3 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e237      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x5a>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e230      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d007      	beq.n	8002c6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2222      	movs	r2, #34	@ 0x22
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	@ 0x40
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a62      	ldr	r2, [pc, #392]	@ (8002e34 <HAL_I2C_Mem_Read+0x248>)
 8002cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fbc0 	bl	8003444 <I2C_RequestMemoryRead>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e1ec      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d113      	bne.n	8002cfe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e1c0      	b.n	8003080 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d11e      	bne.n	8002d44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d16:	b672      	cpsid	i
}
 8002d18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d40:	b662      	cpsie	i
}
 8002d42:	e035      	b.n	8002db0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d11e      	bne.n	8002d8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5c:	b672      	cpsid	i
}
 8002d5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d86:	b662      	cpsie	i
}
 8002d88:	e012      	b.n	8002db0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002db0:	e166      	b.n	8003080 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	f200 811f 	bhi.w	8002ffa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d123      	bne.n	8002e0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fdcd 	bl	8003968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e167      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e0a:	e139      	b.n	8003080 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d152      	bne.n	8002eba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4906      	ldr	r1, [pc, #24]	@ (8002e38 <HAL_I2C_Mem_Read+0x24c>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fbf8 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e13c      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
 8002e2e:	bf00      	nop
 8002e30:	00100002 	.word	0x00100002
 8002e34:	ffff0000 	.word	0xffff0000
 8002e38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3c:	b672      	cpsid	i
}
 8002e3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e82:	b662      	cpsie	i
}
 8002e84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb8:	e0e2      	b.n	8003080 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	497b      	ldr	r1, [pc, #492]	@ (80030b0 <HAL_I2C_Mem_Read+0x4c4>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fba5 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0e9      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee4:	b672      	cpsid	i
}
 8002ee6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f1a:	4b66      	ldr	r3, [pc, #408]	@ (80030b4 <HAL_I2C_Mem_Read+0x4c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	08db      	lsrs	r3, r3, #3
 8002f20:	4a65      	ldr	r2, [pc, #404]	@ (80030b8 <HAL_I2C_Mem_Read+0x4cc>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0a1a      	lsrs	r2, r3, #8
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00da      	lsls	r2, r3, #3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d118      	bne.n	8002f72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f62:	b662      	cpsie	i
}
 8002f64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e09a      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d1d9      	bne.n	8002f34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fc2:	b662      	cpsie	i
}
 8002fc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff8:	e042      	b.n	8003080 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fcb2 	bl	8003968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e04c      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d118      	bne.n	8003080 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	f47f ae94 	bne.w	8002db2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3728      	adds	r7, #40	@ 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	00010004 	.word	0x00010004
 80030b4:	20000000 	.word	0x20000000
 80030b8:	14f8b589 	.word	0x14f8b589

080030bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff f856 	bl	800217c <HAL_GetTick>
 80030d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	f040 8111 	bne.w	8003306 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2319      	movs	r3, #25
 80030ea:	2201      	movs	r2, #1
 80030ec:	4988      	ldr	r1, [pc, #544]	@ (8003310 <HAL_I2C_IsDeviceReady+0x254>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa90 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	e104      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_I2C_IsDeviceReady+0x50>
 8003108:	2302      	movs	r3, #2
 800310a:	e0fd      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d007      	beq.n	8003132 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2224      	movs	r2, #36	@ 0x24
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a70      	ldr	r2, [pc, #448]	@ (8003314 <HAL_I2C_IsDeviceReady+0x258>)
 8003154:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003164:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa4e 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318c:	d103      	bne.n	8003196 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b6      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fe ffe7 	bl	800217c <HAL_GetTick>
 80031ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031de:	e025      	b.n	800322c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe ffcc 	bl	800217c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <HAL_I2C_IsDeviceReady+0x13a>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	22a0      	movs	r2, #160	@ 0xa0
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2ba0      	cmp	r3, #160	@ 0xa0
 8003236:	d005      	beq.n	8003244 <HAL_I2C_IsDeviceReady+0x188>
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_I2C_IsDeviceReady+0x188>
 800323e:	7dbb      	ldrb	r3, [r7, #22]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0cd      	beq.n	80031e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d129      	bne.n	80032ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003268:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2319      	movs	r3, #25
 8003286:	2201      	movs	r2, #1
 8003288:	4921      	ldr	r1, [pc, #132]	@ (8003310 <HAL_I2C_IsDeviceReady+0x254>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f9c2 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e036      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e02c      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2319      	movs	r3, #25
 80032ce:	2201      	movs	r2, #1
 80032d0:	490f      	ldr	r1, [pc, #60]	@ (8003310 <HAL_I2C_IsDeviceReady+0x254>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f99e 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e012      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f4ff af32 	bcc.w	8003156 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	00100002 	.word	0x00100002
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	460b      	mov	r3, r1
 800332c:	813b      	strh	r3, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	2200      	movs	r2, #0
 800334a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f960 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003368:	d103      	bne.n	8003372 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003370:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e05f      	b.n	8003436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	492d      	ldr	r1, [pc, #180]	@ (8003440 <I2C_RequestMemoryWrite+0x128>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f9bb 	bl	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e04c      	b.n	8003436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa46 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d107      	bne.n	80033da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02b      	b.n	8003436 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	611a      	str	r2, [r3, #16]
 80033ee:	e021      	b.n	8003434 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003400:	6a39      	ldr	r1, [r7, #32]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fa20 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e005      	b.n	8003436 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800342a:	893b      	ldrh	r3, [r7, #8]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	00010002 	.word	0x00010002

08003444 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	460b      	mov	r3, r1
 8003458:	813b      	strh	r3, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800346c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800347c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2200      	movs	r2, #0
 8003486:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8c2 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a4:	d103      	bne.n	80034ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0aa      	b.n	8003608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	4952      	ldr	r1, [pc, #328]	@ (8003610 <I2C_RequestMemoryRead+0x1cc>)
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f91d 	bl	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e097      	b.n	8003608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f0:	6a39      	ldr	r1, [r7, #32]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f9a8 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2b04      	cmp	r3, #4
 8003504:	d107      	bne.n	8003516 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003514:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e076      	b.n	8003608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003520:	893b      	ldrh	r3, [r7, #8]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]
 800352a:	e021      	b.n	8003570 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800352c:	893b      	ldrh	r3, [r7, #8]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	b29b      	uxth	r3, r3
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353c:	6a39      	ldr	r1, [r7, #32]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f982 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	2b04      	cmp	r3, #4
 8003550:	d107      	bne.n	8003562 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003560:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e050      	b.n	8003608 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003566:	893b      	ldrh	r3, [r7, #8]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	6a39      	ldr	r1, [r7, #32]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f967 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	2b04      	cmp	r3, #4
 8003586:	d107      	bne.n	8003598 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003596:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e035      	b.n	8003608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f82b 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d2:	d103      	bne.n	80035dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e013      	b.n	8003608 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	6a3a      	ldr	r2, [r7, #32]
 80035f4:	4906      	ldr	r1, [pc, #24]	@ (8003610 <I2C_RequestMemoryRead+0x1cc>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f886 	bl	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	00010002 	.word	0x00010002

08003614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003624:	e048      	b.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d044      	beq.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fda5 	bl	800217c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d139      	bne.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10d      	bne.n	800366a <I2C_WaitOnFlagUntilTimeout+0x56>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	43da      	mvns	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	e00c      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x70>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	43da      	mvns	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	429a      	cmp	r2, r3
 8003688:	d116      	bne.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e023      	b.n	8003700 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	0c1b      	lsrs	r3, r3, #16
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10d      	bne.n	80036de <I2C_WaitOnFlagUntilTimeout+0xca>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	e00c      	b.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4013      	ands	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d093      	beq.n	8003626 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003716:	e071      	b.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003726:	d123      	bne.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003736:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e067      	b.n	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d041      	beq.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7fe fd00 	bl	800217c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d136      	bne.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10c      	bne.n	80037b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e00b      	b.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e021      	b.n	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10c      	bne.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	43da      	mvns	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4013      	ands	r3, r2
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e00b      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4013      	ands	r3, r2
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f af6d 	bne.w	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003854:	e034      	b.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f8e3 	bl	8003a22 <I2C_IsAcknowledgeFailed>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e034      	b.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d028      	beq.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe fc85 	bl	800217c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11d      	bne.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388e:	2b80      	cmp	r3, #128	@ 0x80
 8003890:	d016      	beq.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e007      	b.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ca:	2b80      	cmp	r3, #128	@ 0x80
 80038cc:	d1c3      	bne.n	8003856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e4:	e034      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f89b 	bl	8003a22 <I2C_IsAcknowledgeFailed>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e034      	b.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d028      	beq.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fe fc3d 	bl	800217c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11d      	bne.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b04      	cmp	r3, #4
 8003920:	d016      	beq.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d1c3      	bne.n	80038e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003974:	e049      	b.n	8003a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b10      	cmp	r3, #16
 8003982:	d119      	bne.n	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0210 	mvn.w	r2, #16
 800398c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e030      	b.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b8:	f7fe fbe0 	bl	800217c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11d      	bne.n	8003a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d8:	2b40      	cmp	r3, #64	@ 0x40
 80039da:	d016      	beq.n	8003a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b40      	cmp	r3, #64	@ 0x40
 8003a16:	d1ae      	bne.n	8003976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a38:	d11b      	bne.n	8003a72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f043 0204 	orr.w	r2, r3, #4
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e272      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8087 	beq.w	8003bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa0:	4b92      	ldr	r3, [pc, #584]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d00c      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aac:	4b8f      	ldr	r3, [pc, #572]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d112      	bne.n	8003ade <HAL_RCC_OscConfig+0x5e>
 8003ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac4:	d10b      	bne.n	8003ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac6:	4b89      	ldr	r3, [pc, #548]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d06c      	beq.n	8003bac <HAL_RCC_OscConfig+0x12c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d168      	bne.n	8003bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e24c      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x76>
 8003ae8:	4b80      	ldr	r3, [pc, #512]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a7f      	ldr	r2, [pc, #508]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e02e      	b.n	8003b54 <HAL_RCC_OscConfig+0xd4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x98>
 8003afe:	4b7b      	ldr	r3, [pc, #492]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7a      	ldr	r2, [pc, #488]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b78      	ldr	r3, [pc, #480]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a77      	ldr	r2, [pc, #476]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xd4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0xbc>
 8003b22:	4b72      	ldr	r3, [pc, #456]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a71      	ldr	r2, [pc, #452]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6e      	ldr	r2, [pc, #440]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xd4>
 8003b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6a      	ldr	r2, [pc, #424]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b68      	ldr	r3, [pc, #416]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a67      	ldr	r2, [pc, #412]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fb0e 	bl	800217c <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe fb0a 	bl	800217c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e200      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b5d      	ldr	r3, [pc, #372]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe4>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fafa 	bl	800217c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe faf6 	bl	800217c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1ec      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b53      	ldr	r3, [pc, #332]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x10c>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d063      	beq.n	8003c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bba:	4b4c      	ldr	r3, [pc, #304]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bc6:	4b49      	ldr	r3, [pc, #292]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x18c>
 8003bd2:	4b46      	ldr	r3, [pc, #280]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b43      	ldr	r3, [pc, #268]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x176>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1c0      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4939      	ldr	r1, [pc, #228]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e03a      	b.n	8003c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b36      	ldr	r3, [pc, #216]	@ (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe faaf 	bl	800217c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe faab 	bl	800217c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1a1      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4927      	ldr	r1, [pc, #156]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b26      	ldr	r3, [pc, #152]	@ (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fa8e 	bl	800217c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fe fa8a 	bl	800217c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e180      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d03a      	beq.n	8003d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d019      	beq.n	8003cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b17      	ldr	r3, [pc, #92]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fa6e 	bl	800217c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fe fa6a 	bl	800217c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e160      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f000 face 	bl	8004264 <RCC_Delay>
 8003cc8:	e01c      	b.n	8003d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fa54 	bl	800217c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fe fa50 	bl	800217c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d908      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e146      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	42420000 	.word	0x42420000
 8003cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	4b92      	ldr	r3, [pc, #584]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e9      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a6 	beq.w	8003e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b8b      	ldr	r3, [pc, #556]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b88      	ldr	r3, [pc, #544]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a87      	ldr	r2, [pc, #540]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	61d3      	str	r3, [r2, #28]
 8003d2e:	4b85      	ldr	r3, [pc, #532]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	4b82      	ldr	r3, [pc, #520]	@ (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d118      	bne.n	8003d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d56:	f7fe fa11 	bl	800217c <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5e:	f7fe fa0d 	bl	800217c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b64      	cmp	r3, #100	@ 0x64
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e103      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	4b75      	ldr	r3, [pc, #468]	@ (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d106      	bne.n	8003d92 <HAL_RCC_OscConfig+0x312>
 8003d84:	4b6f      	ldr	r3, [pc, #444]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4a6e      	ldr	r2, [pc, #440]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6213      	str	r3, [r2, #32]
 8003d90:	e02d      	b.n	8003dee <HAL_RCC_OscConfig+0x36e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x334>
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4a69      	ldr	r2, [pc, #420]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	6213      	str	r3, [r2, #32]
 8003da6:	4b67      	ldr	r3, [pc, #412]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4a66      	ldr	r2, [pc, #408]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6213      	str	r3, [r2, #32]
 8003db2:	e01c      	b.n	8003dee <HAL_RCC_OscConfig+0x36e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d10c      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x356>
 8003dbc:	4b61      	ldr	r3, [pc, #388]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a60      	ldr	r2, [pc, #384]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	f043 0304 	orr.w	r3, r3, #4
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6213      	str	r3, [r2, #32]
 8003dd4:	e00b      	b.n	8003dee <HAL_RCC_OscConfig+0x36e>
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a5a      	ldr	r2, [pc, #360]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6213      	str	r3, [r2, #32]
 8003de2:	4b58      	ldr	r3, [pc, #352]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4a57      	ldr	r2, [pc, #348]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d015      	beq.n	8003e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe f9c1 	bl	800217c <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fe f9bd 	bl	800217c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0b1      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	4b4b      	ldr	r3, [pc, #300]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ee      	beq.n	8003dfe <HAL_RCC_OscConfig+0x37e>
 8003e20:	e014      	b.n	8003e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e22:	f7fe f9ab 	bl	800217c <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fe f9a7 	bl	800217c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e09b      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e40:	4b40      	ldr	r3, [pc, #256]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ee      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d105      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e52:	4b3c      	ldr	r3, [pc, #240]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	4a3b      	ldr	r2, [pc, #236]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8087 	beq.w	8003f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e68:	4b36      	ldr	r3, [pc, #216]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d061      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d146      	bne.n	8003f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b33      	ldr	r3, [pc, #204]	@ (8003f4c <HAL_RCC_OscConfig+0x4cc>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe f97b 	bl	800217c <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fe f977 	bl	800217c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e06d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9c:	4b29      	ldr	r3, [pc, #164]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d108      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4921      	ldr	r1, [pc, #132]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a19      	ldr	r1, [r3, #32]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	491b      	ldr	r1, [pc, #108]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003edc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fe f94b 	bl	800217c <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eea:	f7fe f947 	bl	800217c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003efc:	4b11      	ldr	r3, [pc, #68]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x46a>
 8003f08:	e035      	b.n	8003f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b10      	ldr	r3, [pc, #64]	@ (8003f4c <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fe f934 	bl	800217c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fe f930 	bl	800217c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e026      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x498>
 8003f36:	e01e      	b.n	8003f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e019      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <HAL_RCC_OscConfig+0x500>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000

08003f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0d0      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b6a      	ldr	r3, [pc, #424]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d910      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b67      	ldr	r3, [pc, #412]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	4965      	ldr	r1, [pc, #404]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b8      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b59      	ldr	r3, [pc, #356]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff8:	4b53      	ldr	r3, [pc, #332]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b50      	ldr	r3, [pc, #320]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	494d      	ldr	r1, [pc, #308]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d040      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b47      	ldr	r3, [pc, #284]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d115      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07f      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b41      	ldr	r3, [pc, #260]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e073      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3d      	ldr	r3, [pc, #244]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06b      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b39      	ldr	r3, [pc, #228]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4936      	ldr	r1, [pc, #216]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fe f882 	bl	800217c <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fe f87e 	bl	800217c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e053      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2d      	ldr	r3, [pc, #180]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b27      	ldr	r3, [pc, #156]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d210      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	4922      	ldr	r1, [pc, #136]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b20      	ldr	r3, [pc, #128]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e032      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e0:	4b19      	ldr	r3, [pc, #100]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4916      	ldr	r1, [pc, #88]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040fe:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	490e      	ldr	r1, [pc, #56]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004112:	f000 f821 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004116:	4602      	mov	r2, r0
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	490a      	ldr	r1, [pc, #40]	@ (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	5ccb      	ldrb	r3, [r1, r3]
 8004126:	fa22 f303 	lsr.w	r3, r2, r3
 800412a:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <HAL_RCC_ClockConfig+0x1cc>)
 800412c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800412e:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <HAL_RCC_ClockConfig+0x1d0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd ffe0 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	0800a72c 	.word	0x0800a72c
 8004150:	20000000 	.word	0x20000000
 8004154:	20000004 	.word	0x20000004

08004158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004172:	4b1e      	ldr	r3, [pc, #120]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x94>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b04      	cmp	r3, #4
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x30>
 8004182:	2b08      	cmp	r3, #8
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x36>
 8004186:	e027      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800418a:	613b      	str	r3, [r7, #16]
      break;
 800418c:	e027      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	0c9b      	lsrs	r3, r3, #18
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	4a17      	ldr	r2, [pc, #92]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004198:	5cd3      	ldrb	r3, [r2, r3]
 800419a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d010      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041a6:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x94>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0c5b      	lsrs	r3, r3, #17
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	4a11      	ldr	r2, [pc, #68]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ba:	fb03 f202 	mul.w	r2, r3, r2
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e004      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0c      	ldr	r2, [pc, #48]	@ (80041fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	613b      	str	r3, [r7, #16]
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041da:	613b      	str	r3, [r7, #16]
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	693b      	ldr	r3, [r7, #16]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	007a1200 	.word	0x007a1200
 80041f4:	0800a744 	.word	0x0800a744
 80041f8:	0800a754 	.word	0x0800a754
 80041fc:	003d0900 	.word	0x003d0900

08004200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004204:	4b02      	ldr	r3, [pc, #8]	@ (8004210 <HAL_RCC_GetHCLKFreq+0x10>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	20000000 	.word	0x20000000

08004214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004218:	f7ff fff2 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4903      	ldr	r1, [pc, #12]	@ (8004238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	0800a73c 	.word	0x0800a73c

0800423c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004240:	f7ff ffde 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0adb      	lsrs	r3, r3, #11
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4903      	ldr	r1, [pc, #12]	@ (8004260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	0800a73c 	.word	0x0800a73c

08004264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800426c:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <RCC_Delay+0x34>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0a      	ldr	r2, [pc, #40]	@ (800429c <RCC_Delay+0x38>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0a5b      	lsrs	r3, r3, #9
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004280:	bf00      	nop
  }
  while (Delay --);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f9      	bne.n	8004280 <RCC_Delay+0x1c>
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	20000000 	.word	0x20000000
 800429c:	10624dd3 	.word	0x10624dd3

080042a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e041      	b.n	8004336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fd9e 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 f940 	bl	8004564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e032      	b.n	80043be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_TIM_Base_Start+0x88>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_TIM_Base_Start+0x48>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004372:	d009      	beq.n	8004388 <HAL_TIM_Base_Start+0x48>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a14      	ldr	r2, [pc, #80]	@ (80043cc <HAL_TIM_Base_Start+0x8c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIM_Base_Start+0x48>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <HAL_TIM_Base_Start+0x90>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d010      	beq.n	80043bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	e007      	b.n	80043bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800

080043d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIM_ConfigClockSource+0x1c>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e0b4      	b.n	800455a <HAL_TIM_ConfigClockSource+0x186>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800440e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004428:	d03e      	beq.n	80044a8 <HAL_TIM_ConfigClockSource+0xd4>
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442e:	f200 8087 	bhi.w	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004436:	f000 8086 	beq.w	8004546 <HAL_TIM_ConfigClockSource+0x172>
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443e:	d87f      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b70      	cmp	r3, #112	@ 0x70
 8004442:	d01a      	beq.n	800447a <HAL_TIM_ConfigClockSource+0xa6>
 8004444:	2b70      	cmp	r3, #112	@ 0x70
 8004446:	d87b      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b60      	cmp	r3, #96	@ 0x60
 800444a:	d050      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x11a>
 800444c:	2b60      	cmp	r3, #96	@ 0x60
 800444e:	d877      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b50      	cmp	r3, #80	@ 0x50
 8004452:	d03c      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xfa>
 8004454:	2b50      	cmp	r3, #80	@ 0x50
 8004456:	d873      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b40      	cmp	r3, #64	@ 0x40
 800445a:	d058      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x13a>
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	d86f      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b30      	cmp	r3, #48	@ 0x30
 8004462:	d064      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 8004464:	2b30      	cmp	r3, #48	@ 0x30
 8004466:	d86b      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d060      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 800446c:	2b20      	cmp	r3, #32
 800446e:	d867      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d05c      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 8004474:	2b10      	cmp	r3, #16
 8004476:	d05a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	e062      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800448a:	f000 f944 	bl	8004716 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800449c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	609a      	str	r2, [r3, #8]
      break;
 80044a6:	e04f      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044b8:	f000 f92d 	bl	8004716 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ca:	609a      	str	r2, [r3, #8]
      break;
 80044cc:	e03c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 f8a4 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2150      	movs	r1, #80	@ 0x50
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f8fb 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 80044ec:	e02c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044fa:	461a      	mov	r2, r3
 80044fc:	f000 f8c2 	bl	8004684 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2160      	movs	r1, #96	@ 0x60
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f8eb 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800450c:	e01c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451a:	461a      	mov	r2, r3
 800451c:	f000 f884 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2140      	movs	r1, #64	@ 0x40
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f8db 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800452c:	e00c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f000 f8d2 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800453e:	e003      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      break;
 8004544:	e000      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a29      	ldr	r2, [pc, #164]	@ (800461c <TIM_Base_SetConfig+0xb8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_Base_SetConfig+0x30>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0x30>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a26      	ldr	r2, [pc, #152]	@ (8004620 <TIM_Base_SetConfig+0xbc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0x30>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a25      	ldr	r2, [pc, #148]	@ (8004624 <TIM_Base_SetConfig+0xc0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d108      	bne.n	80045a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <TIM_Base_SetConfig+0xb8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0x62>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0x62>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a19      	ldr	r2, [pc, #100]	@ (8004620 <TIM_Base_SetConfig+0xbc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0x62>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <TIM_Base_SetConfig+0xc0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a07      	ldr	r2, [pc, #28]	@ (800461c <TIM_Base_SetConfig+0xb8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	615a      	str	r2, [r3, #20]
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800

08004628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 030a 	bic.w	r3, r3, #10
 8004664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0210 	bic.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	031b      	lsls	r3, r3, #12
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	f043 0307 	orr.w	r3, r3, #7
 8004704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004730:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	021a      	lsls	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	431a      	orrs	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	609a      	str	r2, [r3, #8]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004768:	2302      	movs	r3, #2
 800476a:	e046      	b.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a16      	ldr	r2, [pc, #88]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00e      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b8:	d009      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a12      	ldr	r2, [pc, #72]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d004      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a10      	ldr	r2, [pc, #64]	@ (800480c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d10c      	bne.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e042      	b.n	80048a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd fb04 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	@ 0x24
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f82b 	bl	80048b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048ea:	f023 030c 	bic.w	r3, r3, #12
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	430b      	orrs	r3, r1
 80048f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2c      	ldr	r2, [pc, #176]	@ (80049c4 <UART_SetConfig+0x114>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d103      	bne.n	8004920 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7ff fc90 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	e002      	b.n	8004926 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004920:	f7ff fc78 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8004924:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009a      	lsls	r2, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	4a22      	ldr	r2, [pc, #136]	@ (80049c8 <UART_SetConfig+0x118>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	0119      	lsls	r1, r3, #4
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009a      	lsls	r2, r3, #2
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	fbb2 f2f3 	udiv	r2, r2, r3
 800495c:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <UART_SetConfig+0x118>)
 800495e:	fba3 0302 	umull	r0, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2064      	movs	r0, #100	@ 0x64
 8004966:	fb00 f303 	mul.w	r3, r0, r3
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	3332      	adds	r3, #50	@ 0x32
 8004970:	4a15      	ldr	r2, [pc, #84]	@ (80049c8 <UART_SetConfig+0x118>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800497c:	4419      	add	r1, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <UART_SetConfig+0x118>)
 8004996:	fba3 0302 	umull	r0, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2064      	movs	r0, #100	@ 0x64
 800499e:	fb00 f303 	mul.w	r3, r0, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	3332      	adds	r3, #50	@ 0x32
 80049a8:	4a07      	ldr	r2, [pc, #28]	@ (80049c8 <UART_SetConfig+0x118>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f003 020f 	and.w	r2, r3, #15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	440a      	add	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40013800 	.word	0x40013800
 80049c8:	51eb851f 	.word	0x51eb851f

080049cc <__cvt>:
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d2:	461d      	mov	r5, r3
 80049d4:	bfbb      	ittet	lt
 80049d6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80049da:	461d      	movlt	r5, r3
 80049dc:	2300      	movge	r3, #0
 80049de:	232d      	movlt	r3, #45	@ 0x2d
 80049e0:	b088      	sub	sp, #32
 80049e2:	4614      	mov	r4, r2
 80049e4:	bfb8      	it	lt
 80049e6:	4614      	movlt	r4, r2
 80049e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80049ec:	7013      	strb	r3, [r2, #0]
 80049ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80049f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80049f4:	f023 0820 	bic.w	r8, r3, #32
 80049f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049fc:	d005      	beq.n	8004a0a <__cvt+0x3e>
 80049fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a02:	d100      	bne.n	8004a06 <__cvt+0x3a>
 8004a04:	3601      	adds	r6, #1
 8004a06:	2302      	movs	r3, #2
 8004a08:	e000      	b.n	8004a0c <__cvt+0x40>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	aa07      	add	r2, sp, #28
 8004a0e:	9204      	str	r2, [sp, #16]
 8004a10:	aa06      	add	r2, sp, #24
 8004a12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a16:	e9cd 3600 	strd	r3, r6, [sp]
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	f001 f987 	bl	8005d30 <_dtoa_r>
 8004a22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a26:	4607      	mov	r7, r0
 8004a28:	d119      	bne.n	8004a5e <__cvt+0x92>
 8004a2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a2c:	07db      	lsls	r3, r3, #31
 8004a2e:	d50e      	bpl.n	8004a4e <__cvt+0x82>
 8004a30:	eb00 0906 	add.w	r9, r0, r6
 8004a34:	2200      	movs	r2, #0
 8004a36:	2300      	movs	r3, #0
 8004a38:	4620      	mov	r0, r4
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	f7fb ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8004a40:	b108      	cbz	r0, 8004a46 <__cvt+0x7a>
 8004a42:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a46:	2230      	movs	r2, #48	@ 0x30
 8004a48:	9b07      	ldr	r3, [sp, #28]
 8004a4a:	454b      	cmp	r3, r9
 8004a4c:	d31e      	bcc.n	8004a8c <__cvt+0xc0>
 8004a4e:	4638      	mov	r0, r7
 8004a50:	9b07      	ldr	r3, [sp, #28]
 8004a52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004a54:	1bdb      	subs	r3, r3, r7
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	b008      	add	sp, #32
 8004a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a62:	eb00 0906 	add.w	r9, r0, r6
 8004a66:	d1e5      	bne.n	8004a34 <__cvt+0x68>
 8004a68:	7803      	ldrb	r3, [r0, #0]
 8004a6a:	2b30      	cmp	r3, #48	@ 0x30
 8004a6c:	d10a      	bne.n	8004a84 <__cvt+0xb8>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2300      	movs	r3, #0
 8004a72:	4620      	mov	r0, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	f7fb ff97 	bl	80009a8 <__aeabi_dcmpeq>
 8004a7a:	b918      	cbnz	r0, 8004a84 <__cvt+0xb8>
 8004a7c:	f1c6 0601 	rsb	r6, r6, #1
 8004a80:	f8ca 6000 	str.w	r6, [sl]
 8004a84:	f8da 3000 	ldr.w	r3, [sl]
 8004a88:	4499      	add	r9, r3
 8004a8a:	e7d3      	b.n	8004a34 <__cvt+0x68>
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	9107      	str	r1, [sp, #28]
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e7d9      	b.n	8004a48 <__cvt+0x7c>

08004a94 <__exponent>:
 8004a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a96:	2900      	cmp	r1, #0
 8004a98:	bfb6      	itet	lt
 8004a9a:	232d      	movlt	r3, #45	@ 0x2d
 8004a9c:	232b      	movge	r3, #43	@ 0x2b
 8004a9e:	4249      	neglt	r1, r1
 8004aa0:	2909      	cmp	r1, #9
 8004aa2:	7002      	strb	r2, [r0, #0]
 8004aa4:	7043      	strb	r3, [r0, #1]
 8004aa6:	dd29      	ble.n	8004afc <__exponent+0x68>
 8004aa8:	f10d 0307 	add.w	r3, sp, #7
 8004aac:	461d      	mov	r5, r3
 8004aae:	270a      	movs	r7, #10
 8004ab0:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	fb07 1416 	mls	r4, r7, r6, r1
 8004aba:	3430      	adds	r4, #48	@ 0x30
 8004abc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	2c63      	cmp	r4, #99	@ 0x63
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aca:	dcf1      	bgt.n	8004ab0 <__exponent+0x1c>
 8004acc:	3130      	adds	r1, #48	@ 0x30
 8004ace:	1e94      	subs	r4, r2, #2
 8004ad0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	1c41      	adds	r1, r0, #1
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	d30a      	bcc.n	8004af2 <__exponent+0x5e>
 8004adc:	f10d 0309 	add.w	r3, sp, #9
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	42ac      	cmp	r4, r5
 8004ae4:	bf88      	it	hi
 8004ae6:	2300      	movhi	r3, #0
 8004ae8:	3302      	adds	r3, #2
 8004aea:	4403      	add	r3, r0
 8004aec:	1a18      	subs	r0, r3, r0
 8004aee:	b003      	add	sp, #12
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004af6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004afa:	e7ed      	b.n	8004ad8 <__exponent+0x44>
 8004afc:	2330      	movs	r3, #48	@ 0x30
 8004afe:	3130      	adds	r1, #48	@ 0x30
 8004b00:	7083      	strb	r3, [r0, #2]
 8004b02:	70c1      	strb	r1, [r0, #3]
 8004b04:	1d03      	adds	r3, r0, #4
 8004b06:	e7f1      	b.n	8004aec <__exponent+0x58>

08004b08 <_printf_float>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	b091      	sub	sp, #68	@ 0x44
 8004b0e:	460c      	mov	r4, r1
 8004b10:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004b14:	4616      	mov	r6, r2
 8004b16:	461f      	mov	r7, r3
 8004b18:	4605      	mov	r5, r0
 8004b1a:	f000 fff5 	bl	8005b08 <_localeconv_r>
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	9308      	str	r3, [sp, #32]
 8004b24:	f7fb fb14 	bl	8000150 <strlen>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b30:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b32:	3307      	adds	r3, #7
 8004b34:	f023 0307 	bic.w	r3, r3, #7
 8004b38:	f103 0208 	add.w	r2, r3, #8
 8004b3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b40:	f8d4 b000 	ldr.w	fp, [r4]
 8004b44:	f8c8 2000 	str.w	r2, [r8]
 8004b48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b52:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004b56:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b62:	4b9c      	ldr	r3, [pc, #624]	@ (8004dd4 <_printf_float+0x2cc>)
 8004b64:	f7fb ff52 	bl	8000a0c <__aeabi_dcmpun>
 8004b68:	bb70      	cbnz	r0, 8004bc8 <_printf_float+0xc0>
 8004b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b72:	4b98      	ldr	r3, [pc, #608]	@ (8004dd4 <_printf_float+0x2cc>)
 8004b74:	f7fb ff2c 	bl	80009d0 <__aeabi_dcmple>
 8004b78:	bb30      	cbnz	r0, 8004bc8 <_printf_float+0xc0>
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4640      	mov	r0, r8
 8004b80:	4649      	mov	r1, r9
 8004b82:	f7fb ff1b 	bl	80009bc <__aeabi_dcmplt>
 8004b86:	b110      	cbz	r0, 8004b8e <_printf_float+0x86>
 8004b88:	232d      	movs	r3, #45	@ 0x2d
 8004b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b8e:	4a92      	ldr	r2, [pc, #584]	@ (8004dd8 <_printf_float+0x2d0>)
 8004b90:	4b92      	ldr	r3, [pc, #584]	@ (8004ddc <_printf_float+0x2d4>)
 8004b92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b96:	bf94      	ite	ls
 8004b98:	4690      	movls	r8, r2
 8004b9a:	4698      	movhi	r8, r3
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f04f 0900 	mov.w	r9, #0
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	f02b 0304 	bic.w	r3, fp, #4
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	4633      	mov	r3, r6
 8004bac:	4621      	mov	r1, r4
 8004bae:	4628      	mov	r0, r5
 8004bb0:	9700      	str	r7, [sp, #0]
 8004bb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004bb4:	f000 f9d4 	bl	8004f60 <_printf_common>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f040 8090 	bne.w	8004cde <_printf_float+0x1d6>
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	b011      	add	sp, #68	@ 0x44
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	4649      	mov	r1, r9
 8004bd0:	f7fb ff1c 	bl	8000a0c <__aeabi_dcmpun>
 8004bd4:	b148      	cbz	r0, 8004bea <_printf_float+0xe2>
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bfb8      	it	lt
 8004bdc:	232d      	movlt	r3, #45	@ 0x2d
 8004bde:	4a80      	ldr	r2, [pc, #512]	@ (8004de0 <_printf_float+0x2d8>)
 8004be0:	bfb8      	it	lt
 8004be2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004be6:	4b7f      	ldr	r3, [pc, #508]	@ (8004de4 <_printf_float+0x2dc>)
 8004be8:	e7d3      	b.n	8004b92 <_printf_float+0x8a>
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	d13f      	bne.n	8004c74 <_printf_float+0x16c>
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	9206      	str	r2, [sp, #24]
 8004c02:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c04:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004c08:	aa0d      	add	r2, sp, #52	@ 0x34
 8004c0a:	9203      	str	r2, [sp, #12]
 8004c0c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004c10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	4642      	mov	r2, r8
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c20:	f7ff fed4 	bl	80049cc <__cvt>
 8004c24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c26:	4680      	mov	r8, r0
 8004c28:	2947      	cmp	r1, #71	@ 0x47
 8004c2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c2c:	d128      	bne.n	8004c80 <_printf_float+0x178>
 8004c2e:	1cc8      	adds	r0, r1, #3
 8004c30:	db02      	blt.n	8004c38 <_printf_float+0x130>
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	4299      	cmp	r1, r3
 8004c36:	dd40      	ble.n	8004cba <_printf_float+0x1b2>
 8004c38:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c3c:	fa5f fa8a 	uxtb.w	sl, sl
 8004c40:	4652      	mov	r2, sl
 8004c42:	3901      	subs	r1, #1
 8004c44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c48:	910d      	str	r1, [sp, #52]	@ 0x34
 8004c4a:	f7ff ff23 	bl	8004a94 <__exponent>
 8004c4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c50:	4681      	mov	r9, r0
 8004c52:	1813      	adds	r3, r2, r0
 8004c54:	2a01      	cmp	r2, #1
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	dc02      	bgt.n	8004c60 <_printf_float+0x158>
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	07d2      	lsls	r2, r2, #31
 8004c5e:	d501      	bpl.n	8004c64 <_printf_float+0x15c>
 8004c60:	3301      	adds	r3, #1
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d09e      	beq.n	8004baa <_printf_float+0xa2>
 8004c6c:	232d      	movs	r3, #45	@ 0x2d
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c72:	e79a      	b.n	8004baa <_printf_float+0xa2>
 8004c74:	2947      	cmp	r1, #71	@ 0x47
 8004c76:	d1bf      	bne.n	8004bf8 <_printf_float+0xf0>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1bd      	bne.n	8004bf8 <_printf_float+0xf0>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e7ba      	b.n	8004bf6 <_printf_float+0xee>
 8004c80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c84:	d9dc      	bls.n	8004c40 <_printf_float+0x138>
 8004c86:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c8a:	d118      	bne.n	8004cbe <_printf_float+0x1b6>
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	dd0b      	ble.n	8004caa <_printf_float+0x1a2>
 8004c92:	6121      	str	r1, [r4, #16]
 8004c94:	b913      	cbnz	r3, 8004c9c <_printf_float+0x194>
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	07d0      	lsls	r0, r2, #31
 8004c9a:	d502      	bpl.n	8004ca2 <_printf_float+0x19a>
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	440b      	add	r3, r1
 8004ca0:	6123      	str	r3, [r4, #16]
 8004ca2:	f04f 0900 	mov.w	r9, #0
 8004ca6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ca8:	e7dc      	b.n	8004c64 <_printf_float+0x15c>
 8004caa:	b913      	cbnz	r3, 8004cb2 <_printf_float+0x1aa>
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	07d2      	lsls	r2, r2, #31
 8004cb0:	d501      	bpl.n	8004cb6 <_printf_float+0x1ae>
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	e7f4      	b.n	8004ca0 <_printf_float+0x198>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e7f2      	b.n	8004ca0 <_printf_float+0x198>
 8004cba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cc0:	4299      	cmp	r1, r3
 8004cc2:	db05      	blt.n	8004cd0 <_printf_float+0x1c8>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	6121      	str	r1, [r4, #16]
 8004cc8:	07d8      	lsls	r0, r3, #31
 8004cca:	d5ea      	bpl.n	8004ca2 <_printf_float+0x19a>
 8004ccc:	1c4b      	adds	r3, r1, #1
 8004cce:	e7e7      	b.n	8004ca0 <_printf_float+0x198>
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	bfcc      	ite	gt
 8004cd4:	2201      	movgt	r2, #1
 8004cd6:	f1c1 0202 	rsble	r2, r1, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	e7e0      	b.n	8004ca0 <_printf_float+0x198>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	055a      	lsls	r2, r3, #21
 8004ce2:	d407      	bmi.n	8004cf4 <_printf_float+0x1ec>
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d12b      	bne.n	8004d4a <_printf_float+0x242>
 8004cf2:	e764      	b.n	8004bbe <_printf_float+0xb6>
 8004cf4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cf8:	f240 80dc 	bls.w	8004eb4 <_printf_float+0x3ac>
 8004cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d00:	2200      	movs	r2, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	f7fb fe50 	bl	80009a8 <__aeabi_dcmpeq>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d033      	beq.n	8004d74 <_printf_float+0x26c>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	4a35      	ldr	r2, [pc, #212]	@ (8004de8 <_printf_float+0x2e0>)
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af51 	beq.w	8004bbe <_printf_float+0xb6>
 8004d1c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004d20:	4543      	cmp	r3, r8
 8004d22:	db02      	blt.n	8004d2a <_printf_float+0x222>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07d8      	lsls	r0, r3, #31
 8004d28:	d50f      	bpl.n	8004d4a <_printf_float+0x242>
 8004d2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	f43f af42 	beq.w	8004bbe <_printf_float+0xb6>
 8004d3a:	f04f 0900 	mov.w	r9, #0
 8004d3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d42:	f104 0a1a 	add.w	sl, r4, #26
 8004d46:	45c8      	cmp	r8, r9
 8004d48:	dc09      	bgt.n	8004d5e <_printf_float+0x256>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	079b      	lsls	r3, r3, #30
 8004d4e:	f100 8102 	bmi.w	8004f56 <_printf_float+0x44e>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e731      	b.n	8004bc2 <_printf_float+0xba>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4652      	mov	r2, sl
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f af28 	beq.w	8004bbe <_printf_float+0xb6>
 8004d6e:	f109 0901 	add.w	r9, r9, #1
 8004d72:	e7e8      	b.n	8004d46 <_printf_float+0x23e>
 8004d74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dc38      	bgt.n	8004dec <_printf_float+0x2e4>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <_printf_float+0x2e0>)
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	f43f af1a 	beq.w	8004bbe <_printf_float+0xb6>
 8004d8a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004d8e:	ea59 0303 	orrs.w	r3, r9, r3
 8004d92:	d102      	bne.n	8004d9a <_printf_float+0x292>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	07d9      	lsls	r1, r3, #31
 8004d98:	d5d7      	bpl.n	8004d4a <_printf_float+0x242>
 8004d9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f af0a 	beq.w	8004bbe <_printf_float+0xb6>
 8004daa:	f04f 0a00 	mov.w	sl, #0
 8004dae:	f104 0b1a 	add.w	fp, r4, #26
 8004db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004db4:	425b      	negs	r3, r3
 8004db6:	4553      	cmp	r3, sl
 8004db8:	dc01      	bgt.n	8004dbe <_printf_float+0x2b6>
 8004dba:	464b      	mov	r3, r9
 8004dbc:	e793      	b.n	8004ce6 <_printf_float+0x1de>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	465a      	mov	r2, fp
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	47b8      	blx	r7
 8004dc8:	3001      	adds	r0, #1
 8004dca:	f43f aef8 	beq.w	8004bbe <_printf_float+0xb6>
 8004dce:	f10a 0a01 	add.w	sl, sl, #1
 8004dd2:	e7ee      	b.n	8004db2 <_printf_float+0x2aa>
 8004dd4:	7fefffff 	.word	0x7fefffff
 8004dd8:	0800a756 	.word	0x0800a756
 8004ddc:	0800a75a 	.word	0x0800a75a
 8004de0:	0800a75e 	.word	0x0800a75e
 8004de4:	0800a762 	.word	0x0800a762
 8004de8:	0800a766 	.word	0x0800a766
 8004dec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004df2:	4553      	cmp	r3, sl
 8004df4:	bfa8      	it	ge
 8004df6:	4653      	movge	r3, sl
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	4699      	mov	r9, r3
 8004dfc:	dc36      	bgt.n	8004e6c <_printf_float+0x364>
 8004dfe:	f04f 0b00 	mov.w	fp, #0
 8004e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e06:	f104 021a 	add.w	r2, r4, #26
 8004e0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e0e:	eba3 0309 	sub.w	r3, r3, r9
 8004e12:	455b      	cmp	r3, fp
 8004e14:	dc31      	bgt.n	8004e7a <_printf_float+0x372>
 8004e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e18:	459a      	cmp	sl, r3
 8004e1a:	dc3a      	bgt.n	8004e92 <_printf_float+0x38a>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	07da      	lsls	r2, r3, #31
 8004e20:	d437      	bmi.n	8004e92 <_printf_float+0x38a>
 8004e22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e24:	ebaa 0903 	sub.w	r9, sl, r3
 8004e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e2a:	ebaa 0303 	sub.w	r3, sl, r3
 8004e2e:	4599      	cmp	r9, r3
 8004e30:	bfa8      	it	ge
 8004e32:	4699      	movge	r9, r3
 8004e34:	f1b9 0f00 	cmp.w	r9, #0
 8004e38:	dc33      	bgt.n	8004ea2 <_printf_float+0x39a>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e42:	f104 0b1a 	add.w	fp, r4, #26
 8004e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e48:	ebaa 0303 	sub.w	r3, sl, r3
 8004e4c:	eba3 0309 	sub.w	r3, r3, r9
 8004e50:	4543      	cmp	r3, r8
 8004e52:	f77f af7a 	ble.w	8004d4a <_printf_float+0x242>
 8004e56:	2301      	movs	r3, #1
 8004e58:	465a      	mov	r2, fp
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f aeac 	beq.w	8004bbe <_printf_float+0xb6>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	e7ec      	b.n	8004e46 <_printf_float+0x33e>
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	d1c2      	bne.n	8004dfe <_printf_float+0x2f6>
 8004e78:	e6a1      	b.n	8004bbe <_printf_float+0xb6>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4628      	mov	r0, r5
 8004e80:	920a      	str	r2, [sp, #40]	@ 0x28
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f ae9a 	beq.w	8004bbe <_printf_float+0xb6>
 8004e8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e8c:	f10b 0b01 	add.w	fp, fp, #1
 8004e90:	e7bb      	b.n	8004e0a <_printf_float+0x302>
 8004e92:	4631      	mov	r1, r6
 8004e94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e98:	4628      	mov	r0, r5
 8004e9a:	47b8      	blx	r7
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d1c0      	bne.n	8004e22 <_printf_float+0x31a>
 8004ea0:	e68d      	b.n	8004bbe <_printf_float+0xb6>
 8004ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	4442      	add	r2, r8
 8004eac:	47b8      	blx	r7
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d1c3      	bne.n	8004e3a <_printf_float+0x332>
 8004eb2:	e684      	b.n	8004bbe <_printf_float+0xb6>
 8004eb4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004eb8:	f1ba 0f01 	cmp.w	sl, #1
 8004ebc:	dc01      	bgt.n	8004ec2 <_printf_float+0x3ba>
 8004ebe:	07db      	lsls	r3, r3, #31
 8004ec0:	d536      	bpl.n	8004f30 <_printf_float+0x428>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f43f ae76 	beq.w	8004bbe <_printf_float+0xb6>
 8004ed2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b8      	blx	r7
 8004edc:	3001      	adds	r0, #1
 8004ede:	f43f ae6e 	beq.w	8004bbe <_printf_float+0xb6>
 8004ee2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eee:	f7fb fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 8004ef2:	b9c0      	cbnz	r0, 8004f26 <_printf_float+0x41e>
 8004ef4:	4653      	mov	r3, sl
 8004ef6:	f108 0201 	add.w	r2, r8, #1
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	d10c      	bne.n	8004f1e <_printf_float+0x416>
 8004f04:	e65b      	b.n	8004bbe <_printf_float+0xb6>
 8004f06:	2301      	movs	r3, #1
 8004f08:	465a      	mov	r2, fp
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae54 	beq.w	8004bbe <_printf_float+0xb6>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	45d0      	cmp	r8, sl
 8004f1c:	dbf3      	blt.n	8004f06 <_printf_float+0x3fe>
 8004f1e:	464b      	mov	r3, r9
 8004f20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f24:	e6e0      	b.n	8004ce8 <_printf_float+0x1e0>
 8004f26:	f04f 0800 	mov.w	r8, #0
 8004f2a:	f104 0b1a 	add.w	fp, r4, #26
 8004f2e:	e7f4      	b.n	8004f1a <_printf_float+0x412>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4642      	mov	r2, r8
 8004f34:	e7e1      	b.n	8004efa <_printf_float+0x3f2>
 8004f36:	2301      	movs	r3, #1
 8004f38:	464a      	mov	r2, r9
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f ae3c 	beq.w	8004bbe <_printf_float+0xb6>
 8004f46:	f108 0801 	add.w	r8, r8, #1
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f4e:	1a5b      	subs	r3, r3, r1
 8004f50:	4543      	cmp	r3, r8
 8004f52:	dcf0      	bgt.n	8004f36 <_printf_float+0x42e>
 8004f54:	e6fd      	b.n	8004d52 <_printf_float+0x24a>
 8004f56:	f04f 0800 	mov.w	r8, #0
 8004f5a:	f104 0919 	add.w	r9, r4, #25
 8004f5e:	e7f4      	b.n	8004f4a <_printf_float+0x442>

08004f60 <_printf_common>:
 8004f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	4616      	mov	r6, r2
 8004f66:	4698      	mov	r8, r3
 8004f68:	688a      	ldr	r2, [r1, #8]
 8004f6a:	690b      	ldr	r3, [r1, #16]
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	bfb8      	it	lt
 8004f72:	4613      	movlt	r3, r2
 8004f74:	6033      	str	r3, [r6, #0]
 8004f76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f80:	b10a      	cbz	r2, 8004f86 <_printf_common+0x26>
 8004f82:	3301      	adds	r3, #1
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	0699      	lsls	r1, r3, #26
 8004f8a:	bf42      	ittt	mi
 8004f8c:	6833      	ldrmi	r3, [r6, #0]
 8004f8e:	3302      	addmi	r3, #2
 8004f90:	6033      	strmi	r3, [r6, #0]
 8004f92:	6825      	ldr	r5, [r4, #0]
 8004f94:	f015 0506 	ands.w	r5, r5, #6
 8004f98:	d106      	bne.n	8004fa8 <_printf_common+0x48>
 8004f9a:	f104 0a19 	add.w	sl, r4, #25
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	6832      	ldr	r2, [r6, #0]
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	dc2b      	bgt.n	8005000 <_printf_common+0xa0>
 8004fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	3b00      	subs	r3, #0
 8004fb0:	bf18      	it	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	0692      	lsls	r2, r2, #26
 8004fb6:	d430      	bmi.n	800501a <_printf_common+0xba>
 8004fb8:	4641      	mov	r1, r8
 8004fba:	4638      	mov	r0, r7
 8004fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fc0:	47c8      	blx	r9
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d023      	beq.n	800500e <_printf_common+0xae>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	6922      	ldr	r2, [r4, #16]
 8004fca:	f003 0306 	and.w	r3, r3, #6
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	bf14      	ite	ne
 8004fd2:	2500      	movne	r5, #0
 8004fd4:	6833      	ldreq	r3, [r6, #0]
 8004fd6:	f04f 0600 	mov.w	r6, #0
 8004fda:	bf08      	it	eq
 8004fdc:	68e5      	ldreq	r5, [r4, #12]
 8004fde:	f104 041a 	add.w	r4, r4, #26
 8004fe2:	bf08      	it	eq
 8004fe4:	1aed      	subeq	r5, r5, r3
 8004fe6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004fea:	bf08      	it	eq
 8004fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	bfc4      	itt	gt
 8004ff4:	1a9b      	subgt	r3, r3, r2
 8004ff6:	18ed      	addgt	r5, r5, r3
 8004ff8:	42b5      	cmp	r5, r6
 8004ffa:	d11a      	bne.n	8005032 <_printf_common+0xd2>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e008      	b.n	8005012 <_printf_common+0xb2>
 8005000:	2301      	movs	r3, #1
 8005002:	4652      	mov	r2, sl
 8005004:	4641      	mov	r1, r8
 8005006:	4638      	mov	r0, r7
 8005008:	47c8      	blx	r9
 800500a:	3001      	adds	r0, #1
 800500c:	d103      	bne.n	8005016 <_printf_common+0xb6>
 800500e:	f04f 30ff 	mov.w	r0, #4294967295
 8005012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005016:	3501      	adds	r5, #1
 8005018:	e7c1      	b.n	8004f9e <_printf_common+0x3e>
 800501a:	2030      	movs	r0, #48	@ 0x30
 800501c:	18e1      	adds	r1, r4, r3
 800501e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005028:	4422      	add	r2, r4
 800502a:	3302      	adds	r3, #2
 800502c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005030:	e7c2      	b.n	8004fb8 <_printf_common+0x58>
 8005032:	2301      	movs	r3, #1
 8005034:	4622      	mov	r2, r4
 8005036:	4641      	mov	r1, r8
 8005038:	4638      	mov	r0, r7
 800503a:	47c8      	blx	r9
 800503c:	3001      	adds	r0, #1
 800503e:	d0e6      	beq.n	800500e <_printf_common+0xae>
 8005040:	3601      	adds	r6, #1
 8005042:	e7d9      	b.n	8004ff8 <_printf_common+0x98>

08005044 <_printf_i>:
 8005044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	7e0f      	ldrb	r7, [r1, #24]
 800504a:	4691      	mov	r9, r2
 800504c:	2f78      	cmp	r7, #120	@ 0x78
 800504e:	4680      	mov	r8, r0
 8005050:	460c      	mov	r4, r1
 8005052:	469a      	mov	sl, r3
 8005054:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800505a:	d807      	bhi.n	800506c <_printf_i+0x28>
 800505c:	2f62      	cmp	r7, #98	@ 0x62
 800505e:	d80a      	bhi.n	8005076 <_printf_i+0x32>
 8005060:	2f00      	cmp	r7, #0
 8005062:	f000 80d3 	beq.w	800520c <_printf_i+0x1c8>
 8005066:	2f58      	cmp	r7, #88	@ 0x58
 8005068:	f000 80ba 	beq.w	80051e0 <_printf_i+0x19c>
 800506c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005074:	e03a      	b.n	80050ec <_printf_i+0xa8>
 8005076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800507a:	2b15      	cmp	r3, #21
 800507c:	d8f6      	bhi.n	800506c <_printf_i+0x28>
 800507e:	a101      	add	r1, pc, #4	@ (adr r1, 8005084 <_printf_i+0x40>)
 8005080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050f1 	.word	0x080050f1
 800508c:	0800506d 	.word	0x0800506d
 8005090:	0800506d 	.word	0x0800506d
 8005094:	0800506d 	.word	0x0800506d
 8005098:	0800506d 	.word	0x0800506d
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	0800506d 	.word	0x0800506d
 80050a4:	0800506d 	.word	0x0800506d
 80050a8:	0800506d 	.word	0x0800506d
 80050ac:	0800506d 	.word	0x0800506d
 80050b0:	080051f3 	.word	0x080051f3
 80050b4:	0800511b 	.word	0x0800511b
 80050b8:	080051ad 	.word	0x080051ad
 80050bc:	0800506d 	.word	0x0800506d
 80050c0:	0800506d 	.word	0x0800506d
 80050c4:	08005215 	.word	0x08005215
 80050c8:	0800506d 	.word	0x0800506d
 80050cc:	0800511b 	.word	0x0800511b
 80050d0:	0800506d 	.word	0x0800506d
 80050d4:	0800506d 	.word	0x0800506d
 80050d8:	080051b5 	.word	0x080051b5
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6032      	str	r2, [r6, #0]
 80050e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050ec:	2301      	movs	r3, #1
 80050ee:	e09e      	b.n	800522e <_printf_i+0x1ea>
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	1d19      	adds	r1, r3, #4
 80050f6:	6031      	str	r1, [r6, #0]
 80050f8:	0606      	lsls	r6, r0, #24
 80050fa:	d501      	bpl.n	8005100 <_printf_i+0xbc>
 80050fc:	681d      	ldr	r5, [r3, #0]
 80050fe:	e003      	b.n	8005108 <_printf_i+0xc4>
 8005100:	0645      	lsls	r5, r0, #25
 8005102:	d5fb      	bpl.n	80050fc <_printf_i+0xb8>
 8005104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005108:	2d00      	cmp	r5, #0
 800510a:	da03      	bge.n	8005114 <_printf_i+0xd0>
 800510c:	232d      	movs	r3, #45	@ 0x2d
 800510e:	426d      	negs	r5, r5
 8005110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005114:	230a      	movs	r3, #10
 8005116:	4859      	ldr	r0, [pc, #356]	@ (800527c <_printf_i+0x238>)
 8005118:	e011      	b.n	800513e <_printf_i+0xfa>
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	0608      	lsls	r0, r1, #24
 8005120:	f853 5b04 	ldr.w	r5, [r3], #4
 8005124:	d402      	bmi.n	800512c <_printf_i+0xe8>
 8005126:	0649      	lsls	r1, r1, #25
 8005128:	bf48      	it	mi
 800512a:	b2ad      	uxthmi	r5, r5
 800512c:	2f6f      	cmp	r7, #111	@ 0x6f
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	bf14      	ite	ne
 8005132:	230a      	movne	r3, #10
 8005134:	2308      	moveq	r3, #8
 8005136:	4851      	ldr	r0, [pc, #324]	@ (800527c <_printf_i+0x238>)
 8005138:	2100      	movs	r1, #0
 800513a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800513e:	6866      	ldr	r6, [r4, #4]
 8005140:	2e00      	cmp	r6, #0
 8005142:	bfa8      	it	ge
 8005144:	6821      	ldrge	r1, [r4, #0]
 8005146:	60a6      	str	r6, [r4, #8]
 8005148:	bfa4      	itt	ge
 800514a:	f021 0104 	bicge.w	r1, r1, #4
 800514e:	6021      	strge	r1, [r4, #0]
 8005150:	b90d      	cbnz	r5, 8005156 <_printf_i+0x112>
 8005152:	2e00      	cmp	r6, #0
 8005154:	d04b      	beq.n	80051ee <_printf_i+0x1aa>
 8005156:	4616      	mov	r6, r2
 8005158:	fbb5 f1f3 	udiv	r1, r5, r3
 800515c:	fb03 5711 	mls	r7, r3, r1, r5
 8005160:	5dc7      	ldrb	r7, [r0, r7]
 8005162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005166:	462f      	mov	r7, r5
 8005168:	42bb      	cmp	r3, r7
 800516a:	460d      	mov	r5, r1
 800516c:	d9f4      	bls.n	8005158 <_printf_i+0x114>
 800516e:	2b08      	cmp	r3, #8
 8005170:	d10b      	bne.n	800518a <_printf_i+0x146>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	07df      	lsls	r7, r3, #31
 8005176:	d508      	bpl.n	800518a <_printf_i+0x146>
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	6861      	ldr	r1, [r4, #4]
 800517c:	4299      	cmp	r1, r3
 800517e:	bfde      	ittt	le
 8005180:	2330      	movle	r3, #48	@ 0x30
 8005182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005186:	f106 36ff 	addle.w	r6, r6, #4294967295
 800518a:	1b92      	subs	r2, r2, r6
 800518c:	6122      	str	r2, [r4, #16]
 800518e:	464b      	mov	r3, r9
 8005190:	4621      	mov	r1, r4
 8005192:	4640      	mov	r0, r8
 8005194:	f8cd a000 	str.w	sl, [sp]
 8005198:	aa03      	add	r2, sp, #12
 800519a:	f7ff fee1 	bl	8004f60 <_printf_common>
 800519e:	3001      	adds	r0, #1
 80051a0:	d14a      	bne.n	8005238 <_printf_i+0x1f4>
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	b004      	add	sp, #16
 80051a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	f043 0320 	orr.w	r3, r3, #32
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	2778      	movs	r7, #120	@ 0x78
 80051b6:	4832      	ldr	r0, [pc, #200]	@ (8005280 <_printf_i+0x23c>)
 80051b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	6831      	ldr	r1, [r6, #0]
 80051c0:	061f      	lsls	r7, r3, #24
 80051c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80051c6:	d402      	bmi.n	80051ce <_printf_i+0x18a>
 80051c8:	065f      	lsls	r7, r3, #25
 80051ca:	bf48      	it	mi
 80051cc:	b2ad      	uxthmi	r5, r5
 80051ce:	6031      	str	r1, [r6, #0]
 80051d0:	07d9      	lsls	r1, r3, #31
 80051d2:	bf44      	itt	mi
 80051d4:	f043 0320 	orrmi.w	r3, r3, #32
 80051d8:	6023      	strmi	r3, [r4, #0]
 80051da:	b11d      	cbz	r5, 80051e4 <_printf_i+0x1a0>
 80051dc:	2310      	movs	r3, #16
 80051de:	e7ab      	b.n	8005138 <_printf_i+0xf4>
 80051e0:	4826      	ldr	r0, [pc, #152]	@ (800527c <_printf_i+0x238>)
 80051e2:	e7e9      	b.n	80051b8 <_printf_i+0x174>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	f023 0320 	bic.w	r3, r3, #32
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	e7f6      	b.n	80051dc <_printf_i+0x198>
 80051ee:	4616      	mov	r6, r2
 80051f0:	e7bd      	b.n	800516e <_printf_i+0x12a>
 80051f2:	6833      	ldr	r3, [r6, #0]
 80051f4:	6825      	ldr	r5, [r4, #0]
 80051f6:	1d18      	adds	r0, r3, #4
 80051f8:	6961      	ldr	r1, [r4, #20]
 80051fa:	6030      	str	r0, [r6, #0]
 80051fc:	062e      	lsls	r6, r5, #24
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	d501      	bpl.n	8005206 <_printf_i+0x1c2>
 8005202:	6019      	str	r1, [r3, #0]
 8005204:	e002      	b.n	800520c <_printf_i+0x1c8>
 8005206:	0668      	lsls	r0, r5, #25
 8005208:	d5fb      	bpl.n	8005202 <_printf_i+0x1be>
 800520a:	8019      	strh	r1, [r3, #0]
 800520c:	2300      	movs	r3, #0
 800520e:	4616      	mov	r6, r2
 8005210:	6123      	str	r3, [r4, #16]
 8005212:	e7bc      	b.n	800518e <_printf_i+0x14a>
 8005214:	6833      	ldr	r3, [r6, #0]
 8005216:	2100      	movs	r1, #0
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	6032      	str	r2, [r6, #0]
 800521c:	681e      	ldr	r6, [r3, #0]
 800521e:	6862      	ldr	r2, [r4, #4]
 8005220:	4630      	mov	r0, r6
 8005222:	f000 fce8 	bl	8005bf6 <memchr>
 8005226:	b108      	cbz	r0, 800522c <_printf_i+0x1e8>
 8005228:	1b80      	subs	r0, r0, r6
 800522a:	6060      	str	r0, [r4, #4]
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	2300      	movs	r3, #0
 8005232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005236:	e7aa      	b.n	800518e <_printf_i+0x14a>
 8005238:	4632      	mov	r2, r6
 800523a:	4649      	mov	r1, r9
 800523c:	4640      	mov	r0, r8
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	47d0      	blx	sl
 8005242:	3001      	adds	r0, #1
 8005244:	d0ad      	beq.n	80051a2 <_printf_i+0x15e>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	079b      	lsls	r3, r3, #30
 800524a:	d413      	bmi.n	8005274 <_printf_i+0x230>
 800524c:	68e0      	ldr	r0, [r4, #12]
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	4298      	cmp	r0, r3
 8005252:	bfb8      	it	lt
 8005254:	4618      	movlt	r0, r3
 8005256:	e7a6      	b.n	80051a6 <_printf_i+0x162>
 8005258:	2301      	movs	r3, #1
 800525a:	4632      	mov	r2, r6
 800525c:	4649      	mov	r1, r9
 800525e:	4640      	mov	r0, r8
 8005260:	47d0      	blx	sl
 8005262:	3001      	adds	r0, #1
 8005264:	d09d      	beq.n	80051a2 <_printf_i+0x15e>
 8005266:	3501      	adds	r5, #1
 8005268:	68e3      	ldr	r3, [r4, #12]
 800526a:	9903      	ldr	r1, [sp, #12]
 800526c:	1a5b      	subs	r3, r3, r1
 800526e:	42ab      	cmp	r3, r5
 8005270:	dcf2      	bgt.n	8005258 <_printf_i+0x214>
 8005272:	e7eb      	b.n	800524c <_printf_i+0x208>
 8005274:	2500      	movs	r5, #0
 8005276:	f104 0619 	add.w	r6, r4, #25
 800527a:	e7f5      	b.n	8005268 <_printf_i+0x224>
 800527c:	0800a768 	.word	0x0800a768
 8005280:	0800a779 	.word	0x0800a779

08005284 <_scanf_float>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	b087      	sub	sp, #28
 800528a:	9303      	str	r3, [sp, #12]
 800528c:	688b      	ldr	r3, [r1, #8]
 800528e:	4617      	mov	r7, r2
 8005290:	1e5a      	subs	r2, r3, #1
 8005292:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005296:	bf82      	ittt	hi
 8005298:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800529c:	eb03 0b05 	addhi.w	fp, r3, r5
 80052a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80052a4:	460a      	mov	r2, r1
 80052a6:	f04f 0500 	mov.w	r5, #0
 80052aa:	bf88      	it	hi
 80052ac:	608b      	strhi	r3, [r1, #8]
 80052ae:	680b      	ldr	r3, [r1, #0]
 80052b0:	4680      	mov	r8, r0
 80052b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80052b6:	f842 3b1c 	str.w	r3, [r2], #28
 80052ba:	460c      	mov	r4, r1
 80052bc:	bf98      	it	ls
 80052be:	f04f 0b00 	movls.w	fp, #0
 80052c2:	4616      	mov	r6, r2
 80052c4:	46aa      	mov	sl, r5
 80052c6:	46a9      	mov	r9, r5
 80052c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80052cc:	9201      	str	r2, [sp, #4]
 80052ce:	9502      	str	r5, [sp, #8]
 80052d0:	68a2      	ldr	r2, [r4, #8]
 80052d2:	b152      	cbz	r2, 80052ea <_scanf_float+0x66>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80052da:	d865      	bhi.n	80053a8 <_scanf_float+0x124>
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d83d      	bhi.n	800535c <_scanf_float+0xd8>
 80052e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80052e4:	b2c8      	uxtb	r0, r1
 80052e6:	280e      	cmp	r0, #14
 80052e8:	d93b      	bls.n	8005362 <_scanf_float+0xde>
 80052ea:	f1b9 0f00 	cmp.w	r9, #0
 80052ee:	d003      	beq.n	80052f8 <_scanf_float+0x74>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052fc:	f1ba 0f01 	cmp.w	sl, #1
 8005300:	f200 8118 	bhi.w	8005534 <_scanf_float+0x2b0>
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	429e      	cmp	r6, r3
 8005308:	f200 8109 	bhi.w	800551e <_scanf_float+0x29a>
 800530c:	2001      	movs	r0, #1
 800530e:	b007      	add	sp, #28
 8005310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005314:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005318:	2a0d      	cmp	r2, #13
 800531a:	d8e6      	bhi.n	80052ea <_scanf_float+0x66>
 800531c:	a101      	add	r1, pc, #4	@ (adr r1, 8005324 <_scanf_float+0xa0>)
 800531e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005322:	bf00      	nop
 8005324:	0800546b 	.word	0x0800546b
 8005328:	080052eb 	.word	0x080052eb
 800532c:	080052eb 	.word	0x080052eb
 8005330:	080052eb 	.word	0x080052eb
 8005334:	080054cb 	.word	0x080054cb
 8005338:	080054a3 	.word	0x080054a3
 800533c:	080052eb 	.word	0x080052eb
 8005340:	080052eb 	.word	0x080052eb
 8005344:	08005479 	.word	0x08005479
 8005348:	080052eb 	.word	0x080052eb
 800534c:	080052eb 	.word	0x080052eb
 8005350:	080052eb 	.word	0x080052eb
 8005354:	080052eb 	.word	0x080052eb
 8005358:	08005431 	.word	0x08005431
 800535c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005360:	e7da      	b.n	8005318 <_scanf_float+0x94>
 8005362:	290e      	cmp	r1, #14
 8005364:	d8c1      	bhi.n	80052ea <_scanf_float+0x66>
 8005366:	a001      	add	r0, pc, #4	@ (adr r0, 800536c <_scanf_float+0xe8>)
 8005368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800536c:	08005421 	.word	0x08005421
 8005370:	080052eb 	.word	0x080052eb
 8005374:	08005421 	.word	0x08005421
 8005378:	080054b7 	.word	0x080054b7
 800537c:	080052eb 	.word	0x080052eb
 8005380:	080053c9 	.word	0x080053c9
 8005384:	08005407 	.word	0x08005407
 8005388:	08005407 	.word	0x08005407
 800538c:	08005407 	.word	0x08005407
 8005390:	08005407 	.word	0x08005407
 8005394:	08005407 	.word	0x08005407
 8005398:	08005407 	.word	0x08005407
 800539c:	08005407 	.word	0x08005407
 80053a0:	08005407 	.word	0x08005407
 80053a4:	08005407 	.word	0x08005407
 80053a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80053aa:	d809      	bhi.n	80053c0 <_scanf_float+0x13c>
 80053ac:	2b60      	cmp	r3, #96	@ 0x60
 80053ae:	d8b1      	bhi.n	8005314 <_scanf_float+0x90>
 80053b0:	2b54      	cmp	r3, #84	@ 0x54
 80053b2:	d07b      	beq.n	80054ac <_scanf_float+0x228>
 80053b4:	2b59      	cmp	r3, #89	@ 0x59
 80053b6:	d198      	bne.n	80052ea <_scanf_float+0x66>
 80053b8:	2d07      	cmp	r5, #7
 80053ba:	d196      	bne.n	80052ea <_scanf_float+0x66>
 80053bc:	2508      	movs	r5, #8
 80053be:	e02c      	b.n	800541a <_scanf_float+0x196>
 80053c0:	2b74      	cmp	r3, #116	@ 0x74
 80053c2:	d073      	beq.n	80054ac <_scanf_float+0x228>
 80053c4:	2b79      	cmp	r3, #121	@ 0x79
 80053c6:	e7f6      	b.n	80053b6 <_scanf_float+0x132>
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	05c8      	lsls	r0, r1, #23
 80053cc:	d51b      	bpl.n	8005406 <_scanf_float+0x182>
 80053ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80053d2:	6021      	str	r1, [r4, #0]
 80053d4:	f109 0901 	add.w	r9, r9, #1
 80053d8:	f1bb 0f00 	cmp.w	fp, #0
 80053dc:	d003      	beq.n	80053e6 <_scanf_float+0x162>
 80053de:	3201      	adds	r2, #1
 80053e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053e4:	60a2      	str	r2, [r4, #8]
 80053e6:	68a3      	ldr	r3, [r4, #8]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	60a3      	str	r3, [r4, #8]
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	3301      	adds	r3, #1
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	f340 8087 	ble.w	800550c <_scanf_float+0x288>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	e764      	b.n	80052d0 <_scanf_float+0x4c>
 8005406:	eb1a 0105 	adds.w	r1, sl, r5
 800540a:	f47f af6e 	bne.w	80052ea <_scanf_float+0x66>
 800540e:	460d      	mov	r5, r1
 8005410:	468a      	mov	sl, r1
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005418:	6022      	str	r2, [r4, #0]
 800541a:	f806 3b01 	strb.w	r3, [r6], #1
 800541e:	e7e2      	b.n	80053e6 <_scanf_float+0x162>
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	0610      	lsls	r0, r2, #24
 8005424:	f57f af61 	bpl.w	80052ea <_scanf_float+0x66>
 8005428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	e7f4      	b.n	800541a <_scanf_float+0x196>
 8005430:	f1ba 0f00 	cmp.w	sl, #0
 8005434:	d10e      	bne.n	8005454 <_scanf_float+0x1d0>
 8005436:	f1b9 0f00 	cmp.w	r9, #0
 800543a:	d10e      	bne.n	800545a <_scanf_float+0x1d6>
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005442:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005446:	d108      	bne.n	800545a <_scanf_float+0x1d6>
 8005448:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800544c:	f04f 0a01 	mov.w	sl, #1
 8005450:	6022      	str	r2, [r4, #0]
 8005452:	e7e2      	b.n	800541a <_scanf_float+0x196>
 8005454:	f1ba 0f02 	cmp.w	sl, #2
 8005458:	d055      	beq.n	8005506 <_scanf_float+0x282>
 800545a:	2d01      	cmp	r5, #1
 800545c:	d002      	beq.n	8005464 <_scanf_float+0x1e0>
 800545e:	2d04      	cmp	r5, #4
 8005460:	f47f af43 	bne.w	80052ea <_scanf_float+0x66>
 8005464:	3501      	adds	r5, #1
 8005466:	b2ed      	uxtb	r5, r5
 8005468:	e7d7      	b.n	800541a <_scanf_float+0x196>
 800546a:	f1ba 0f01 	cmp.w	sl, #1
 800546e:	f47f af3c 	bne.w	80052ea <_scanf_float+0x66>
 8005472:	f04f 0a02 	mov.w	sl, #2
 8005476:	e7d0      	b.n	800541a <_scanf_float+0x196>
 8005478:	b97d      	cbnz	r5, 800549a <_scanf_float+0x216>
 800547a:	f1b9 0f00 	cmp.w	r9, #0
 800547e:	f47f af37 	bne.w	80052f0 <_scanf_float+0x6c>
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005488:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800548c:	f040 8103 	bne.w	8005696 <_scanf_float+0x412>
 8005490:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005494:	2501      	movs	r5, #1
 8005496:	6022      	str	r2, [r4, #0]
 8005498:	e7bf      	b.n	800541a <_scanf_float+0x196>
 800549a:	2d03      	cmp	r5, #3
 800549c:	d0e2      	beq.n	8005464 <_scanf_float+0x1e0>
 800549e:	2d05      	cmp	r5, #5
 80054a0:	e7de      	b.n	8005460 <_scanf_float+0x1dc>
 80054a2:	2d02      	cmp	r5, #2
 80054a4:	f47f af21 	bne.w	80052ea <_scanf_float+0x66>
 80054a8:	2503      	movs	r5, #3
 80054aa:	e7b6      	b.n	800541a <_scanf_float+0x196>
 80054ac:	2d06      	cmp	r5, #6
 80054ae:	f47f af1c 	bne.w	80052ea <_scanf_float+0x66>
 80054b2:	2507      	movs	r5, #7
 80054b4:	e7b1      	b.n	800541a <_scanf_float+0x196>
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	0591      	lsls	r1, r2, #22
 80054ba:	f57f af16 	bpl.w	80052ea <_scanf_float+0x66>
 80054be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80054c2:	6022      	str	r2, [r4, #0]
 80054c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80054c8:	e7a7      	b.n	800541a <_scanf_float+0x196>
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80054d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80054d4:	d006      	beq.n	80054e4 <_scanf_float+0x260>
 80054d6:	0550      	lsls	r0, r2, #21
 80054d8:	f57f af07 	bpl.w	80052ea <_scanf_float+0x66>
 80054dc:	f1b9 0f00 	cmp.w	r9, #0
 80054e0:	f000 80d9 	beq.w	8005696 <_scanf_float+0x412>
 80054e4:	0591      	lsls	r1, r2, #22
 80054e6:	bf58      	it	pl
 80054e8:	9902      	ldrpl	r1, [sp, #8]
 80054ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054ee:	bf58      	it	pl
 80054f0:	eba9 0101 	subpl.w	r1, r9, r1
 80054f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80054f8:	f04f 0900 	mov.w	r9, #0
 80054fc:	bf58      	it	pl
 80054fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	e789      	b.n	800541a <_scanf_float+0x196>
 8005506:	f04f 0a03 	mov.w	sl, #3
 800550a:	e786      	b.n	800541a <_scanf_float+0x196>
 800550c:	4639      	mov	r1, r7
 800550e:	4640      	mov	r0, r8
 8005510:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005514:	4798      	blx	r3
 8005516:	2800      	cmp	r0, #0
 8005518:	f43f aeda 	beq.w	80052d0 <_scanf_float+0x4c>
 800551c:	e6e5      	b.n	80052ea <_scanf_float+0x66>
 800551e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005522:	463a      	mov	r2, r7
 8005524:	4640      	mov	r0, r8
 8005526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800552a:	4798      	blx	r3
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	3b01      	subs	r3, #1
 8005530:	6123      	str	r3, [r4, #16]
 8005532:	e6e7      	b.n	8005304 <_scanf_float+0x80>
 8005534:	1e6b      	subs	r3, r5, #1
 8005536:	2b06      	cmp	r3, #6
 8005538:	d824      	bhi.n	8005584 <_scanf_float+0x300>
 800553a:	2d02      	cmp	r5, #2
 800553c:	d836      	bhi.n	80055ac <_scanf_float+0x328>
 800553e:	9b01      	ldr	r3, [sp, #4]
 8005540:	429e      	cmp	r6, r3
 8005542:	f67f aee3 	bls.w	800530c <_scanf_float+0x88>
 8005546:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800554a:	463a      	mov	r2, r7
 800554c:	4640      	mov	r0, r8
 800554e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005552:	4798      	blx	r3
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	3b01      	subs	r3, #1
 8005558:	6123      	str	r3, [r4, #16]
 800555a:	e7f0      	b.n	800553e <_scanf_float+0x2ba>
 800555c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005560:	463a      	mov	r2, r7
 8005562:	4640      	mov	r0, r8
 8005564:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005568:	4798      	blx	r3
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	3b01      	subs	r3, #1
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005574:	fa5f fa8a 	uxtb.w	sl, sl
 8005578:	f1ba 0f02 	cmp.w	sl, #2
 800557c:	d1ee      	bne.n	800555c <_scanf_float+0x2d8>
 800557e:	3d03      	subs	r5, #3
 8005580:	b2ed      	uxtb	r5, r5
 8005582:	1b76      	subs	r6, r6, r5
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	05da      	lsls	r2, r3, #23
 8005588:	d530      	bpl.n	80055ec <_scanf_float+0x368>
 800558a:	055b      	lsls	r3, r3, #21
 800558c:	d511      	bpl.n	80055b2 <_scanf_float+0x32e>
 800558e:	9b01      	ldr	r3, [sp, #4]
 8005590:	429e      	cmp	r6, r3
 8005592:	f67f aebb 	bls.w	800530c <_scanf_float+0x88>
 8005596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800559a:	463a      	mov	r2, r7
 800559c:	4640      	mov	r0, r8
 800559e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055a2:	4798      	blx	r3
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	e7f0      	b.n	800558e <_scanf_float+0x30a>
 80055ac:	46aa      	mov	sl, r5
 80055ae:	46b3      	mov	fp, r6
 80055b0:	e7de      	b.n	8005570 <_scanf_float+0x2ec>
 80055b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	2965      	cmp	r1, #101	@ 0x65
 80055ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80055be:	f106 35ff 	add.w	r5, r6, #4294967295
 80055c2:	6123      	str	r3, [r4, #16]
 80055c4:	d00c      	beq.n	80055e0 <_scanf_float+0x35c>
 80055c6:	2945      	cmp	r1, #69	@ 0x45
 80055c8:	d00a      	beq.n	80055e0 <_scanf_float+0x35c>
 80055ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055ce:	463a      	mov	r2, r7
 80055d0:	4640      	mov	r0, r8
 80055d2:	4798      	blx	r3
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80055da:	3b01      	subs	r3, #1
 80055dc:	1eb5      	subs	r5, r6, #2
 80055de:	6123      	str	r3, [r4, #16]
 80055e0:	463a      	mov	r2, r7
 80055e2:	4640      	mov	r0, r8
 80055e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055e8:	4798      	blx	r3
 80055ea:	462e      	mov	r6, r5
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	f012 0210 	ands.w	r2, r2, #16
 80055f2:	d001      	beq.n	80055f8 <_scanf_float+0x374>
 80055f4:	2000      	movs	r0, #0
 80055f6:	e68a      	b.n	800530e <_scanf_float+0x8a>
 80055f8:	7032      	strb	r2, [r6, #0]
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005604:	d11c      	bne.n	8005640 <_scanf_float+0x3bc>
 8005606:	9b02      	ldr	r3, [sp, #8]
 8005608:	454b      	cmp	r3, r9
 800560a:	eba3 0209 	sub.w	r2, r3, r9
 800560e:	d123      	bne.n	8005658 <_scanf_float+0x3d4>
 8005610:	2200      	movs	r2, #0
 8005612:	4640      	mov	r0, r8
 8005614:	9901      	ldr	r1, [sp, #4]
 8005616:	f002 fcf3 	bl	8008000 <_strtod_r>
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	6825      	ldr	r5, [r4, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f015 0f02 	tst.w	r5, #2
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	f103 0204 	add.w	r2, r3, #4
 800562c:	d01f      	beq.n	800566e <_scanf_float+0x3ea>
 800562e:	9903      	ldr	r1, [sp, #12]
 8005630:	600a      	str	r2, [r1, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	e9c3 6700 	strd	r6, r7, [r3]
 8005638:	68e3      	ldr	r3, [r4, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60e3      	str	r3, [r4, #12]
 800563e:	e7d9      	b.n	80055f4 <_scanf_float+0x370>
 8005640:	9b04      	ldr	r3, [sp, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0e4      	beq.n	8005610 <_scanf_float+0x38c>
 8005646:	9905      	ldr	r1, [sp, #20]
 8005648:	230a      	movs	r3, #10
 800564a:	4640      	mov	r0, r8
 800564c:	3101      	adds	r1, #1
 800564e:	f002 fd57 	bl	8008100 <_strtol_r>
 8005652:	9b04      	ldr	r3, [sp, #16]
 8005654:	9e05      	ldr	r6, [sp, #20]
 8005656:	1ac2      	subs	r2, r0, r3
 8005658:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800565c:	429e      	cmp	r6, r3
 800565e:	bf28      	it	cs
 8005660:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005664:	4630      	mov	r0, r6
 8005666:	490d      	ldr	r1, [pc, #52]	@ (800569c <_scanf_float+0x418>)
 8005668:	f000 f94e 	bl	8005908 <siprintf>
 800566c:	e7d0      	b.n	8005610 <_scanf_float+0x38c>
 800566e:	076d      	lsls	r5, r5, #29
 8005670:	d4dd      	bmi.n	800562e <_scanf_float+0x3aa>
 8005672:	9d03      	ldr	r5, [sp, #12]
 8005674:	602a      	str	r2, [r5, #0]
 8005676:	681d      	ldr	r5, [r3, #0]
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	f7fb f9c6 	bl	8000a0c <__aeabi_dcmpun>
 8005680:	b120      	cbz	r0, 800568c <_scanf_float+0x408>
 8005682:	4807      	ldr	r0, [pc, #28]	@ (80056a0 <_scanf_float+0x41c>)
 8005684:	f000 fac6 	bl	8005c14 <nanf>
 8005688:	6028      	str	r0, [r5, #0]
 800568a:	e7d5      	b.n	8005638 <_scanf_float+0x3b4>
 800568c:	4630      	mov	r0, r6
 800568e:	4639      	mov	r1, r7
 8005690:	f7fb fa1a 	bl	8000ac8 <__aeabi_d2f>
 8005694:	e7f8      	b.n	8005688 <_scanf_float+0x404>
 8005696:	f04f 0900 	mov.w	r9, #0
 800569a:	e62d      	b.n	80052f8 <_scanf_float+0x74>
 800569c:	0800a78a 	.word	0x0800a78a
 80056a0:	0800ab25 	.word	0x0800ab25

080056a4 <std>:
 80056a4:	2300      	movs	r3, #0
 80056a6:	b510      	push	{r4, lr}
 80056a8:	4604      	mov	r4, r0
 80056aa:	e9c0 3300 	strd	r3, r3, [r0]
 80056ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056b2:	6083      	str	r3, [r0, #8]
 80056b4:	8181      	strh	r1, [r0, #12]
 80056b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80056b8:	81c2      	strh	r2, [r0, #14]
 80056ba:	6183      	str	r3, [r0, #24]
 80056bc:	4619      	mov	r1, r3
 80056be:	2208      	movs	r2, #8
 80056c0:	305c      	adds	r0, #92	@ 0x5c
 80056c2:	f000 fa19 	bl	8005af8 <memset>
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <std+0x58>)
 80056c8:	6224      	str	r4, [r4, #32]
 80056ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80056cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005700 <std+0x5c>)
 80056ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <std+0x60>)
 80056d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <std+0x64>)
 80056d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80056d8:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <std+0x68>)
 80056da:	429c      	cmp	r4, r3
 80056dc:	d006      	beq.n	80056ec <std+0x48>
 80056de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056e2:	4294      	cmp	r4, r2
 80056e4:	d002      	beq.n	80056ec <std+0x48>
 80056e6:	33d0      	adds	r3, #208	@ 0xd0
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d105      	bne.n	80056f8 <std+0x54>
 80056ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f4:	f000 ba7c 	b.w	8005bf0 <__retarget_lock_init_recursive>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	bf00      	nop
 80056fc:	08005949 	.word	0x08005949
 8005700:	0800596b 	.word	0x0800596b
 8005704:	080059a3 	.word	0x080059a3
 8005708:	080059c7 	.word	0x080059c7
 800570c:	20000340 	.word	0x20000340

08005710 <stdio_exit_handler>:
 8005710:	4a02      	ldr	r2, [pc, #8]	@ (800571c <stdio_exit_handler+0xc>)
 8005712:	4903      	ldr	r1, [pc, #12]	@ (8005720 <stdio_exit_handler+0x10>)
 8005714:	4803      	ldr	r0, [pc, #12]	@ (8005724 <stdio_exit_handler+0x14>)
 8005716:	f000 b869 	b.w	80057ec <_fwalk_sglue>
 800571a:	bf00      	nop
 800571c:	2000000c 	.word	0x2000000c
 8005720:	08008735 	.word	0x08008735
 8005724:	2000001c 	.word	0x2000001c

08005728 <cleanup_stdio>:
 8005728:	6841      	ldr	r1, [r0, #4]
 800572a:	4b0c      	ldr	r3, [pc, #48]	@ (800575c <cleanup_stdio+0x34>)
 800572c:	b510      	push	{r4, lr}
 800572e:	4299      	cmp	r1, r3
 8005730:	4604      	mov	r4, r0
 8005732:	d001      	beq.n	8005738 <cleanup_stdio+0x10>
 8005734:	f002 fffe 	bl	8008734 <_fflush_r>
 8005738:	68a1      	ldr	r1, [r4, #8]
 800573a:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <cleanup_stdio+0x38>)
 800573c:	4299      	cmp	r1, r3
 800573e:	d002      	beq.n	8005746 <cleanup_stdio+0x1e>
 8005740:	4620      	mov	r0, r4
 8005742:	f002 fff7 	bl	8008734 <_fflush_r>
 8005746:	68e1      	ldr	r1, [r4, #12]
 8005748:	4b06      	ldr	r3, [pc, #24]	@ (8005764 <cleanup_stdio+0x3c>)
 800574a:	4299      	cmp	r1, r3
 800574c:	d004      	beq.n	8005758 <cleanup_stdio+0x30>
 800574e:	4620      	mov	r0, r4
 8005750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005754:	f002 bfee 	b.w	8008734 <_fflush_r>
 8005758:	bd10      	pop	{r4, pc}
 800575a:	bf00      	nop
 800575c:	20000340 	.word	0x20000340
 8005760:	200003a8 	.word	0x200003a8
 8005764:	20000410 	.word	0x20000410

08005768 <global_stdio_init.part.0>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <global_stdio_init.part.0+0x30>)
 800576c:	4c0b      	ldr	r4, [pc, #44]	@ (800579c <global_stdio_init.part.0+0x34>)
 800576e:	4a0c      	ldr	r2, [pc, #48]	@ (80057a0 <global_stdio_init.part.0+0x38>)
 8005770:	4620      	mov	r0, r4
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	2104      	movs	r1, #4
 8005776:	2200      	movs	r2, #0
 8005778:	f7ff ff94 	bl	80056a4 <std>
 800577c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005780:	2201      	movs	r2, #1
 8005782:	2109      	movs	r1, #9
 8005784:	f7ff ff8e 	bl	80056a4 <std>
 8005788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800578c:	2202      	movs	r2, #2
 800578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005792:	2112      	movs	r1, #18
 8005794:	f7ff bf86 	b.w	80056a4 <std>
 8005798:	20000478 	.word	0x20000478
 800579c:	20000340 	.word	0x20000340
 80057a0:	08005711 	.word	0x08005711

080057a4 <__sfp_lock_acquire>:
 80057a4:	4801      	ldr	r0, [pc, #4]	@ (80057ac <__sfp_lock_acquire+0x8>)
 80057a6:	f000 ba24 	b.w	8005bf2 <__retarget_lock_acquire_recursive>
 80057aa:	bf00      	nop
 80057ac:	20000481 	.word	0x20000481

080057b0 <__sfp_lock_release>:
 80057b0:	4801      	ldr	r0, [pc, #4]	@ (80057b8 <__sfp_lock_release+0x8>)
 80057b2:	f000 ba1f 	b.w	8005bf4 <__retarget_lock_release_recursive>
 80057b6:	bf00      	nop
 80057b8:	20000481 	.word	0x20000481

080057bc <__sinit>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	4604      	mov	r4, r0
 80057c0:	f7ff fff0 	bl	80057a4 <__sfp_lock_acquire>
 80057c4:	6a23      	ldr	r3, [r4, #32]
 80057c6:	b11b      	cbz	r3, 80057d0 <__sinit+0x14>
 80057c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057cc:	f7ff bff0 	b.w	80057b0 <__sfp_lock_release>
 80057d0:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <__sinit+0x28>)
 80057d2:	6223      	str	r3, [r4, #32]
 80057d4:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <__sinit+0x2c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f5      	bne.n	80057c8 <__sinit+0xc>
 80057dc:	f7ff ffc4 	bl	8005768 <global_stdio_init.part.0>
 80057e0:	e7f2      	b.n	80057c8 <__sinit+0xc>
 80057e2:	bf00      	nop
 80057e4:	08005729 	.word	0x08005729
 80057e8:	20000478 	.word	0x20000478

080057ec <_fwalk_sglue>:
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	4607      	mov	r7, r0
 80057f2:	4688      	mov	r8, r1
 80057f4:	4614      	mov	r4, r2
 80057f6:	2600      	movs	r6, #0
 80057f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005800:	d505      	bpl.n	800580e <_fwalk_sglue+0x22>
 8005802:	6824      	ldr	r4, [r4, #0]
 8005804:	2c00      	cmp	r4, #0
 8005806:	d1f7      	bne.n	80057f8 <_fwalk_sglue+0xc>
 8005808:	4630      	mov	r0, r6
 800580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d907      	bls.n	8005824 <_fwalk_sglue+0x38>
 8005814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005818:	3301      	adds	r3, #1
 800581a:	d003      	beq.n	8005824 <_fwalk_sglue+0x38>
 800581c:	4629      	mov	r1, r5
 800581e:	4638      	mov	r0, r7
 8005820:	47c0      	blx	r8
 8005822:	4306      	orrs	r6, r0
 8005824:	3568      	adds	r5, #104	@ 0x68
 8005826:	e7e9      	b.n	80057fc <_fwalk_sglue+0x10>

08005828 <iprintf>:
 8005828:	b40f      	push	{r0, r1, r2, r3}
 800582a:	b507      	push	{r0, r1, r2, lr}
 800582c:	4906      	ldr	r1, [pc, #24]	@ (8005848 <iprintf+0x20>)
 800582e:	ab04      	add	r3, sp, #16
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	f853 2b04 	ldr.w	r2, [r3], #4
 8005836:	6881      	ldr	r1, [r0, #8]
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f002 fde3 	bl	8008404 <_vfiprintf_r>
 800583e:	b003      	add	sp, #12
 8005840:	f85d eb04 	ldr.w	lr, [sp], #4
 8005844:	b004      	add	sp, #16
 8005846:	4770      	bx	lr
 8005848:	20000018 	.word	0x20000018

0800584c <_puts_r>:
 800584c:	6a03      	ldr	r3, [r0, #32]
 800584e:	b570      	push	{r4, r5, r6, lr}
 8005850:	4605      	mov	r5, r0
 8005852:	460e      	mov	r6, r1
 8005854:	6884      	ldr	r4, [r0, #8]
 8005856:	b90b      	cbnz	r3, 800585c <_puts_r+0x10>
 8005858:	f7ff ffb0 	bl	80057bc <__sinit>
 800585c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800585e:	07db      	lsls	r3, r3, #31
 8005860:	d405      	bmi.n	800586e <_puts_r+0x22>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	0598      	lsls	r0, r3, #22
 8005866:	d402      	bmi.n	800586e <_puts_r+0x22>
 8005868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800586a:	f000 f9c2 	bl	8005bf2 <__retarget_lock_acquire_recursive>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	0719      	lsls	r1, r3, #28
 8005872:	d502      	bpl.n	800587a <_puts_r+0x2e>
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d135      	bne.n	80058e6 <_puts_r+0x9a>
 800587a:	4621      	mov	r1, r4
 800587c:	4628      	mov	r0, r5
 800587e:	f000 f8e5 	bl	8005a4c <__swsetup_r>
 8005882:	b380      	cbz	r0, 80058e6 <_puts_r+0x9a>
 8005884:	f04f 35ff 	mov.w	r5, #4294967295
 8005888:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800588a:	07da      	lsls	r2, r3, #31
 800588c:	d405      	bmi.n	800589a <_puts_r+0x4e>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	059b      	lsls	r3, r3, #22
 8005892:	d402      	bmi.n	800589a <_puts_r+0x4e>
 8005894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005896:	f000 f9ad 	bl	8005bf4 <__retarget_lock_release_recursive>
 800589a:	4628      	mov	r0, r5
 800589c:	bd70      	pop	{r4, r5, r6, pc}
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da04      	bge.n	80058ac <_puts_r+0x60>
 80058a2:	69a2      	ldr	r2, [r4, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	dc17      	bgt.n	80058d8 <_puts_r+0x8c>
 80058a8:	290a      	cmp	r1, #10
 80058aa:	d015      	beq.n	80058d8 <_puts_r+0x8c>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	7019      	strb	r1, [r3, #0]
 80058b4:	68a3      	ldr	r3, [r4, #8]
 80058b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058ba:	3b01      	subs	r3, #1
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	2900      	cmp	r1, #0
 80058c0:	d1ed      	bne.n	800589e <_puts_r+0x52>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da11      	bge.n	80058ea <_puts_r+0x9e>
 80058c6:	4622      	mov	r2, r4
 80058c8:	210a      	movs	r1, #10
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 f87f 	bl	80059ce <__swbuf_r>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d0d7      	beq.n	8005884 <_puts_r+0x38>
 80058d4:	250a      	movs	r5, #10
 80058d6:	e7d7      	b.n	8005888 <_puts_r+0x3c>
 80058d8:	4622      	mov	r2, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 f877 	bl	80059ce <__swbuf_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d1e7      	bne.n	80058b4 <_puts_r+0x68>
 80058e4:	e7ce      	b.n	8005884 <_puts_r+0x38>
 80058e6:	3e01      	subs	r6, #1
 80058e8:	e7e4      	b.n	80058b4 <_puts_r+0x68>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	220a      	movs	r2, #10
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e7ee      	b.n	80058d4 <_puts_r+0x88>
	...

080058f8 <puts>:
 80058f8:	4b02      	ldr	r3, [pc, #8]	@ (8005904 <puts+0xc>)
 80058fa:	4601      	mov	r1, r0
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	f7ff bfa5 	b.w	800584c <_puts_r>
 8005902:	bf00      	nop
 8005904:	20000018 	.word	0x20000018

08005908 <siprintf>:
 8005908:	b40e      	push	{r1, r2, r3}
 800590a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800590e:	b500      	push	{lr}
 8005910:	b09c      	sub	sp, #112	@ 0x70
 8005912:	ab1d      	add	r3, sp, #116	@ 0x74
 8005914:	9002      	str	r0, [sp, #8]
 8005916:	9006      	str	r0, [sp, #24]
 8005918:	9107      	str	r1, [sp, #28]
 800591a:	9104      	str	r1, [sp, #16]
 800591c:	4808      	ldr	r0, [pc, #32]	@ (8005940 <siprintf+0x38>)
 800591e:	4909      	ldr	r1, [pc, #36]	@ (8005944 <siprintf+0x3c>)
 8005920:	f853 2b04 	ldr.w	r2, [r3], #4
 8005924:	9105      	str	r1, [sp, #20]
 8005926:	6800      	ldr	r0, [r0, #0]
 8005928:	a902      	add	r1, sp, #8
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	f002 fc46 	bl	80081bc <_svfiprintf_r>
 8005930:	2200      	movs	r2, #0
 8005932:	9b02      	ldr	r3, [sp, #8]
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	b01c      	add	sp, #112	@ 0x70
 8005938:	f85d eb04 	ldr.w	lr, [sp], #4
 800593c:	b003      	add	sp, #12
 800593e:	4770      	bx	lr
 8005940:	20000018 	.word	0x20000018
 8005944:	ffff0208 	.word	0xffff0208

08005948 <__sread>:
 8005948:	b510      	push	{r4, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	f000 f900 	bl	8005b54 <_read_r>
 8005954:	2800      	cmp	r0, #0
 8005956:	bfab      	itete	ge
 8005958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800595a:	89a3      	ldrhlt	r3, [r4, #12]
 800595c:	181b      	addge	r3, r3, r0
 800595e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005962:	bfac      	ite	ge
 8005964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005966:	81a3      	strhlt	r3, [r4, #12]
 8005968:	bd10      	pop	{r4, pc}

0800596a <__swrite>:
 800596a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	461f      	mov	r7, r3
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	4605      	mov	r5, r0
 8005974:	05db      	lsls	r3, r3, #23
 8005976:	460c      	mov	r4, r1
 8005978:	4616      	mov	r6, r2
 800597a:	d505      	bpl.n	8005988 <__swrite+0x1e>
 800597c:	2302      	movs	r3, #2
 800597e:	2200      	movs	r2, #0
 8005980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005984:	f000 f8d4 	bl	8005b30 <_lseek_r>
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	4632      	mov	r2, r6
 800598c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005990:	81a3      	strh	r3, [r4, #12]
 8005992:	4628      	mov	r0, r5
 8005994:	463b      	mov	r3, r7
 8005996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	f000 b8eb 	b.w	8005b78 <_write_r>

080059a2 <__sseek>:
 80059a2:	b510      	push	{r4, lr}
 80059a4:	460c      	mov	r4, r1
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 f8c1 	bl	8005b30 <_lseek_r>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	bf15      	itete	ne
 80059b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059be:	81a3      	strheq	r3, [r4, #12]
 80059c0:	bf18      	it	ne
 80059c2:	81a3      	strhne	r3, [r4, #12]
 80059c4:	bd10      	pop	{r4, pc}

080059c6 <__sclose>:
 80059c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ca:	f000 b8a1 	b.w	8005b10 <_close_r>

080059ce <__swbuf_r>:
 80059ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d0:	460e      	mov	r6, r1
 80059d2:	4614      	mov	r4, r2
 80059d4:	4605      	mov	r5, r0
 80059d6:	b118      	cbz	r0, 80059e0 <__swbuf_r+0x12>
 80059d8:	6a03      	ldr	r3, [r0, #32]
 80059da:	b90b      	cbnz	r3, 80059e0 <__swbuf_r+0x12>
 80059dc:	f7ff feee 	bl	80057bc <__sinit>
 80059e0:	69a3      	ldr	r3, [r4, #24]
 80059e2:	60a3      	str	r3, [r4, #8]
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	071a      	lsls	r2, r3, #28
 80059e8:	d501      	bpl.n	80059ee <__swbuf_r+0x20>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	b943      	cbnz	r3, 8005a00 <__swbuf_r+0x32>
 80059ee:	4621      	mov	r1, r4
 80059f0:	4628      	mov	r0, r5
 80059f2:	f000 f82b 	bl	8005a4c <__swsetup_r>
 80059f6:	b118      	cbz	r0, 8005a00 <__swbuf_r+0x32>
 80059f8:	f04f 37ff 	mov.w	r7, #4294967295
 80059fc:	4638      	mov	r0, r7
 80059fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	6922      	ldr	r2, [r4, #16]
 8005a04:	b2f6      	uxtb	r6, r6
 8005a06:	1a98      	subs	r0, r3, r2
 8005a08:	6963      	ldr	r3, [r4, #20]
 8005a0a:	4637      	mov	r7, r6
 8005a0c:	4283      	cmp	r3, r0
 8005a0e:	dc05      	bgt.n	8005a1c <__swbuf_r+0x4e>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f002 fe8e 	bl	8008734 <_fflush_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d1ed      	bne.n	80059f8 <__swbuf_r+0x2a>
 8005a1c:	68a3      	ldr	r3, [r4, #8]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	60a3      	str	r3, [r4, #8]
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	6022      	str	r2, [r4, #0]
 8005a28:	701e      	strb	r6, [r3, #0]
 8005a2a:	6962      	ldr	r2, [r4, #20]
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d004      	beq.n	8005a3c <__swbuf_r+0x6e>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	07db      	lsls	r3, r3, #31
 8005a36:	d5e1      	bpl.n	80059fc <__swbuf_r+0x2e>
 8005a38:	2e0a      	cmp	r6, #10
 8005a3a:	d1df      	bne.n	80059fc <__swbuf_r+0x2e>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f002 fe78 	bl	8008734 <_fflush_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d0d9      	beq.n	80059fc <__swbuf_r+0x2e>
 8005a48:	e7d6      	b.n	80059f8 <__swbuf_r+0x2a>
	...

08005a4c <__swsetup_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4b29      	ldr	r3, [pc, #164]	@ (8005af4 <__swsetup_r+0xa8>)
 8005a50:	4605      	mov	r5, r0
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	460c      	mov	r4, r1
 8005a56:	b118      	cbz	r0, 8005a60 <__swsetup_r+0x14>
 8005a58:	6a03      	ldr	r3, [r0, #32]
 8005a5a:	b90b      	cbnz	r3, 8005a60 <__swsetup_r+0x14>
 8005a5c:	f7ff feae 	bl	80057bc <__sinit>
 8005a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a64:	0719      	lsls	r1, r3, #28
 8005a66:	d422      	bmi.n	8005aae <__swsetup_r+0x62>
 8005a68:	06da      	lsls	r2, r3, #27
 8005a6a:	d407      	bmi.n	8005a7c <__swsetup_r+0x30>
 8005a6c:	2209      	movs	r2, #9
 8005a6e:	602a      	str	r2, [r5, #0]
 8005a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	e033      	b.n	8005ae4 <__swsetup_r+0x98>
 8005a7c:	0758      	lsls	r0, r3, #29
 8005a7e:	d512      	bpl.n	8005aa6 <__swsetup_r+0x5a>
 8005a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a82:	b141      	cbz	r1, 8005a96 <__swsetup_r+0x4a>
 8005a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a88:	4299      	cmp	r1, r3
 8005a8a:	d002      	beq.n	8005a92 <__swsetup_r+0x46>
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 ff17 	bl	80068c0 <_free_r>
 8005a92:	2300      	movs	r3, #0
 8005a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f043 0308 	orr.w	r3, r3, #8
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	b94b      	cbnz	r3, 8005ac6 <__swsetup_r+0x7a>
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005abc:	d003      	beq.n	8005ac6 <__swsetup_r+0x7a>
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f002 fe84 	bl	80087ce <__smakebuf_r>
 8005ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aca:	f013 0201 	ands.w	r2, r3, #1
 8005ace:	d00a      	beq.n	8005ae6 <__swsetup_r+0x9a>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	60a2      	str	r2, [r4, #8]
 8005ad4:	6962      	ldr	r2, [r4, #20]
 8005ad6:	4252      	negs	r2, r2
 8005ad8:	61a2      	str	r2, [r4, #24]
 8005ada:	6922      	ldr	r2, [r4, #16]
 8005adc:	b942      	cbnz	r2, 8005af0 <__swsetup_r+0xa4>
 8005ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ae2:	d1c5      	bne.n	8005a70 <__swsetup_r+0x24>
 8005ae4:	bd38      	pop	{r3, r4, r5, pc}
 8005ae6:	0799      	lsls	r1, r3, #30
 8005ae8:	bf58      	it	pl
 8005aea:	6962      	ldrpl	r2, [r4, #20]
 8005aec:	60a2      	str	r2, [r4, #8]
 8005aee:	e7f4      	b.n	8005ada <__swsetup_r+0x8e>
 8005af0:	2000      	movs	r0, #0
 8005af2:	e7f7      	b.n	8005ae4 <__swsetup_r+0x98>
 8005af4:	20000018 	.word	0x20000018

08005af8 <memset>:
 8005af8:	4603      	mov	r3, r0
 8005afa:	4402      	add	r2, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <_localeconv_r>:
 8005b08:	4800      	ldr	r0, [pc, #0]	@ (8005b0c <_localeconv_r+0x4>)
 8005b0a:	4770      	bx	lr
 8005b0c:	20000158 	.word	0x20000158

08005b10 <_close_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	2300      	movs	r3, #0
 8005b14:	4d05      	ldr	r5, [pc, #20]	@ (8005b2c <_close_r+0x1c>)
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	f7fc fa43 	bl	8001fa6 <_close>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d102      	bne.n	8005b2a <_close_r+0x1a>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	b103      	cbz	r3, 8005b2a <_close_r+0x1a>
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	2000047c 	.word	0x2000047c

08005b30 <_lseek_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4d05      	ldr	r5, [pc, #20]	@ (8005b50 <_lseek_r+0x20>)
 8005b3c:	602a      	str	r2, [r5, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f7fc fa55 	bl	8001fee <_lseek>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_lseek_r+0x1e>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_lseek_r+0x1e>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	2000047c 	.word	0x2000047c

08005b54 <_read_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4d05      	ldr	r5, [pc, #20]	@ (8005b74 <_read_r+0x20>)
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fc fa02 	bl	8001f6c <_read>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_read_r+0x1e>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_read_r+0x1e>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	2000047c 	.word	0x2000047c

08005b78 <_write_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	2200      	movs	r2, #0
 8005b82:	4d05      	ldr	r5, [pc, #20]	@ (8005b98 <_write_r+0x20>)
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fb faa8 	bl	80010dc <_write>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_write_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_write_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	2000047c 	.word	0x2000047c

08005b9c <__errno>:
 8005b9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ba4 <__errno+0x8>)
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000018 	.word	0x20000018

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	2600      	movs	r6, #0
 8005bac:	4d0c      	ldr	r5, [pc, #48]	@ (8005be0 <__libc_init_array+0x38>)
 8005bae:	4c0d      	ldr	r4, [pc, #52]	@ (8005be4 <__libc_init_array+0x3c>)
 8005bb0:	1b64      	subs	r4, r4, r5
 8005bb2:	10a4      	asrs	r4, r4, #2
 8005bb4:	42a6      	cmp	r6, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	f004 fd36 	bl	800a628 <_init>
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	4d0a      	ldr	r5, [pc, #40]	@ (8005be8 <__libc_init_array+0x40>)
 8005bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8005bec <__libc_init_array+0x44>)
 8005bc2:	1b64      	subs	r4, r4, r5
 8005bc4:	10a4      	asrs	r4, r4, #2
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd0:	4798      	blx	r3
 8005bd2:	3601      	adds	r6, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bda:	4798      	blx	r3
 8005bdc:	3601      	adds	r6, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	0800ada8 	.word	0x0800ada8
 8005be4:	0800ada8 	.word	0x0800ada8
 8005be8:	0800ada8 	.word	0x0800ada8
 8005bec:	0800adac 	.word	0x0800adac

08005bf0 <__retarget_lock_init_recursive>:
 8005bf0:	4770      	bx	lr

08005bf2 <__retarget_lock_acquire_recursive>:
 8005bf2:	4770      	bx	lr

08005bf4 <__retarget_lock_release_recursive>:
 8005bf4:	4770      	bx	lr

08005bf6 <memchr>:
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	b2c9      	uxtb	r1, r1
 8005bfc:	4402      	add	r2, r0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	d101      	bne.n	8005c08 <memchr+0x12>
 8005c04:	2000      	movs	r0, #0
 8005c06:	e003      	b.n	8005c10 <memchr+0x1a>
 8005c08:	7804      	ldrb	r4, [r0, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	428c      	cmp	r4, r1
 8005c0e:	d1f6      	bne.n	8005bfe <memchr+0x8>
 8005c10:	bd10      	pop	{r4, pc}
	...

08005c14 <nanf>:
 8005c14:	4800      	ldr	r0, [pc, #0]	@ (8005c18 <nanf+0x4>)
 8005c16:	4770      	bx	lr
 8005c18:	7fc00000 	.word	0x7fc00000

08005c1c <quorem>:
 8005c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	6903      	ldr	r3, [r0, #16]
 8005c22:	690c      	ldr	r4, [r1, #16]
 8005c24:	4607      	mov	r7, r0
 8005c26:	42a3      	cmp	r3, r4
 8005c28:	db7e      	blt.n	8005d28 <quorem+0x10c>
 8005c2a:	3c01      	subs	r4, #1
 8005c2c:	00a3      	lsls	r3, r4, #2
 8005c2e:	f100 0514 	add.w	r5, r0, #20
 8005c32:	f101 0814 	add.w	r8, r1, #20
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c46:	3301      	adds	r3, #1
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c52:	d32e      	bcc.n	8005cb2 <quorem+0x96>
 8005c54:	f04f 0a00 	mov.w	sl, #0
 8005c58:	46c4      	mov	ip, r8
 8005c5a:	46ae      	mov	lr, r5
 8005c5c:	46d3      	mov	fp, sl
 8005c5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c62:	b298      	uxth	r0, r3
 8005c64:	fb06 a000 	mla	r0, r6, r0, sl
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	0c02      	lsrs	r2, r0, #16
 8005c6c:	fb06 2303 	mla	r3, r6, r3, r2
 8005c70:	f8de 2000 	ldr.w	r2, [lr]
 8005c74:	b280      	uxth	r0, r0
 8005c76:	b292      	uxth	r2, r2
 8005c78:	1a12      	subs	r2, r2, r0
 8005c7a:	445a      	add	r2, fp
 8005c7c:	f8de 0000 	ldr.w	r0, [lr]
 8005c80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c8e:	b292      	uxth	r2, r2
 8005c90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c94:	45e1      	cmp	r9, ip
 8005c96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c9a:	f84e 2b04 	str.w	r2, [lr], #4
 8005c9e:	d2de      	bcs.n	8005c5e <quorem+0x42>
 8005ca0:	9b00      	ldr	r3, [sp, #0]
 8005ca2:	58eb      	ldr	r3, [r5, r3]
 8005ca4:	b92b      	cbnz	r3, 8005cb2 <quorem+0x96>
 8005ca6:	9b01      	ldr	r3, [sp, #4]
 8005ca8:	3b04      	subs	r3, #4
 8005caa:	429d      	cmp	r5, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	d32f      	bcc.n	8005d10 <quorem+0xf4>
 8005cb0:	613c      	str	r4, [r7, #16]
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f001 f9c4 	bl	8007040 <__mcmp>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	db25      	blt.n	8005d08 <quorem+0xec>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cc4:	f8d1 c000 	ldr.w	ip, [r1]
 8005cc8:	fa1f fe82 	uxth.w	lr, r2
 8005ccc:	fa1f f38c 	uxth.w	r3, ip
 8005cd0:	eba3 030e 	sub.w	r3, r3, lr
 8005cd4:	4403      	add	r3, r0
 8005cd6:	0c12      	lsrs	r2, r2, #16
 8005cd8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cdc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ce6:	45c1      	cmp	r9, r8
 8005ce8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cec:	f841 3b04 	str.w	r3, [r1], #4
 8005cf0:	d2e6      	bcs.n	8005cc0 <quorem+0xa4>
 8005cf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cfa:	b922      	cbnz	r2, 8005d06 <quorem+0xea>
 8005cfc:	3b04      	subs	r3, #4
 8005cfe:	429d      	cmp	r5, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	d30b      	bcc.n	8005d1c <quorem+0x100>
 8005d04:	613c      	str	r4, [r7, #16]
 8005d06:	3601      	adds	r6, #1
 8005d08:	4630      	mov	r0, r6
 8005d0a:	b003      	add	sp, #12
 8005d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	3b04      	subs	r3, #4
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	d1cb      	bne.n	8005cb0 <quorem+0x94>
 8005d18:	3c01      	subs	r4, #1
 8005d1a:	e7c6      	b.n	8005caa <quorem+0x8e>
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	3b04      	subs	r3, #4
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d1ef      	bne.n	8005d04 <quorem+0xe8>
 8005d24:	3c01      	subs	r4, #1
 8005d26:	e7ea      	b.n	8005cfe <quorem+0xe2>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e7ee      	b.n	8005d0a <quorem+0xee>
 8005d2c:	0000      	movs	r0, r0
	...

08005d30 <_dtoa_r>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	4614      	mov	r4, r2
 8005d36:	461d      	mov	r5, r3
 8005d38:	69c7      	ldr	r7, [r0, #28]
 8005d3a:	b097      	sub	sp, #92	@ 0x5c
 8005d3c:	4683      	mov	fp, r0
 8005d3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005d44:	b97f      	cbnz	r7, 8005d66 <_dtoa_r+0x36>
 8005d46:	2010      	movs	r0, #16
 8005d48:	f000 fe02 	bl	8006950 <malloc>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d52:	b920      	cbnz	r0, 8005d5e <_dtoa_r+0x2e>
 8005d54:	21ef      	movs	r1, #239	@ 0xef
 8005d56:	4ba8      	ldr	r3, [pc, #672]	@ (8005ff8 <_dtoa_r+0x2c8>)
 8005d58:	48a8      	ldr	r0, [pc, #672]	@ (8005ffc <_dtoa_r+0x2cc>)
 8005d5a:	f002 fde7 	bl	800892c <__assert_func>
 8005d5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d62:	6007      	str	r7, [r0, #0]
 8005d64:	60c7      	str	r7, [r0, #12]
 8005d66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d6a:	6819      	ldr	r1, [r3, #0]
 8005d6c:	b159      	cbz	r1, 8005d86 <_dtoa_r+0x56>
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	2301      	movs	r3, #1
 8005d72:	4093      	lsls	r3, r2
 8005d74:	604a      	str	r2, [r1, #4]
 8005d76:	608b      	str	r3, [r1, #8]
 8005d78:	4658      	mov	r0, fp
 8005d7a:	f000 fedf 	bl	8006b3c <_Bfree>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	1e2b      	subs	r3, r5, #0
 8005d88:	bfaf      	iteee	ge
 8005d8a:	2300      	movge	r3, #0
 8005d8c:	2201      	movlt	r2, #1
 8005d8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d92:	9303      	strlt	r3, [sp, #12]
 8005d94:	bfa8      	it	ge
 8005d96:	6033      	strge	r3, [r6, #0]
 8005d98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d9c:	4b98      	ldr	r3, [pc, #608]	@ (8006000 <_dtoa_r+0x2d0>)
 8005d9e:	bfb8      	it	lt
 8005da0:	6032      	strlt	r2, [r6, #0]
 8005da2:	ea33 0308 	bics.w	r3, r3, r8
 8005da6:	d112      	bne.n	8005dce <_dtoa_r+0x9e>
 8005da8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005dac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005db4:	4323      	orrs	r3, r4
 8005db6:	f000 8550 	beq.w	800685a <_dtoa_r+0xb2a>
 8005dba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dbc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006004 <_dtoa_r+0x2d4>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8552 	beq.w	800686a <_dtoa_r+0xb3a>
 8005dc6:	f10a 0303 	add.w	r3, sl, #3
 8005dca:	f000 bd4c 	b.w	8006866 <_dtoa_r+0xb36>
 8005dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f7fa fde3 	bl	80009a8 <__aeabi_dcmpeq>
 8005de2:	4607      	mov	r7, r0
 8005de4:	b158      	cbz	r0, 8005dfe <_dtoa_r+0xce>
 8005de6:	2301      	movs	r3, #1
 8005de8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dee:	b113      	cbz	r3, 8005df6 <_dtoa_r+0xc6>
 8005df0:	4b85      	ldr	r3, [pc, #532]	@ (8006008 <_dtoa_r+0x2d8>)
 8005df2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800600c <_dtoa_r+0x2dc>
 8005dfa:	f000 bd36 	b.w	800686a <_dtoa_r+0xb3a>
 8005dfe:	ab14      	add	r3, sp, #80	@ 0x50
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	ab15      	add	r3, sp, #84	@ 0x54
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	4658      	mov	r0, fp
 8005e08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e0c:	f001 fa30 	bl	8007270 <__d2b>
 8005e10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e14:	4681      	mov	r9, r0
 8005e16:	2e00      	cmp	r6, #0
 8005e18:	d077      	beq.n	8005f0a <_dtoa_r+0x1da>
 8005e1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e30:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e32:	4619      	mov	r1, r3
 8005e34:	2200      	movs	r2, #0
 8005e36:	4b76      	ldr	r3, [pc, #472]	@ (8006010 <_dtoa_r+0x2e0>)
 8005e38:	f7fa f996 	bl	8000168 <__aeabi_dsub>
 8005e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8005fe0 <_dtoa_r+0x2b0>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa fb49 	bl	80004d8 <__aeabi_dmul>
 8005e46:	a368      	add	r3, pc, #416	@ (adr r3, 8005fe8 <_dtoa_r+0x2b8>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa f98e 	bl	800016c <__adddf3>
 8005e50:	4604      	mov	r4, r0
 8005e52:	4630      	mov	r0, r6
 8005e54:	460d      	mov	r5, r1
 8005e56:	f7fa fad5 	bl	8000404 <__aeabi_i2d>
 8005e5a:	a365      	add	r3, pc, #404	@ (adr r3, 8005ff0 <_dtoa_r+0x2c0>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f7fa fb3a 	bl	80004d8 <__aeabi_dmul>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa f97e 	bl	800016c <__adddf3>
 8005e70:	4604      	mov	r4, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	f7fa fde0 	bl	8000a38 <__aeabi_d2iz>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7fa fd9b 	bl	80009bc <__aeabi_dcmplt>
 8005e86:	b140      	cbz	r0, 8005e9a <_dtoa_r+0x16a>
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7fa fabb 	bl	8000404 <__aeabi_i2d>
 8005e8e:	4622      	mov	r2, r4
 8005e90:	462b      	mov	r3, r5
 8005e92:	f7fa fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8005e96:	b900      	cbnz	r0, 8005e9a <_dtoa_r+0x16a>
 8005e98:	3f01      	subs	r7, #1
 8005e9a:	2f16      	cmp	r7, #22
 8005e9c:	d853      	bhi.n	8005f46 <_dtoa_r+0x216>
 8005e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8006014 <_dtoa_r+0x2e4>)
 8005ea4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa fd86 	bl	80009bc <__aeabi_dcmplt>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d04a      	beq.n	8005f4a <_dtoa_r+0x21a>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	3f01      	subs	r7, #1
 8005eb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005eba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ebc:	1b9b      	subs	r3, r3, r6
 8005ebe:	1e5a      	subs	r2, r3, #1
 8005ec0:	bf46      	itte	mi
 8005ec2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ec6:	2300      	movmi	r3, #0
 8005ec8:	f04f 0800 	movpl.w	r8, #0
 8005ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ece:	bf48      	it	mi
 8005ed0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005ed2:	2f00      	cmp	r7, #0
 8005ed4:	db3b      	blt.n	8005f4e <_dtoa_r+0x21e>
 8005ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ed8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005eda:	443b      	add	r3, r7
 8005edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ede:	2300      	movs	r3, #0
 8005ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ee2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d866      	bhi.n	8005fb6 <_dtoa_r+0x286>
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	bfc4      	itt	gt
 8005eec:	3b04      	subgt	r3, #4
 8005eee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ef0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ef2:	bfc8      	it	gt
 8005ef4:	2400      	movgt	r4, #0
 8005ef6:	f1a3 0302 	sub.w	r3, r3, #2
 8005efa:	bfd8      	it	le
 8005efc:	2401      	movle	r4, #1
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d864      	bhi.n	8005fcc <_dtoa_r+0x29c>
 8005f02:	e8df f003 	tbb	[pc, r3]
 8005f06:	382b      	.short	0x382b
 8005f08:	5636      	.short	0x5636
 8005f0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f0e:	441e      	add	r6, r3
 8005f10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	bfc1      	itttt	gt
 8005f18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f28:	bfd6      	itet	le
 8005f2a:	f1c3 0320 	rsble	r3, r3, #32
 8005f2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f32:	fa04 f003 	lslle.w	r0, r4, r3
 8005f36:	f7fa fa55 	bl	80003e4 <__aeabi_ui2d>
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f40:	3e01      	subs	r6, #1
 8005f42:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f44:	e775      	b.n	8005e32 <_dtoa_r+0x102>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e7b6      	b.n	8005eb8 <_dtoa_r+0x188>
 8005f4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f4c:	e7b5      	b.n	8005eba <_dtoa_r+0x18a>
 8005f4e:	427b      	negs	r3, r7
 8005f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f52:	2300      	movs	r3, #0
 8005f54:	eba8 0807 	sub.w	r8, r8, r7
 8005f58:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f5a:	e7c2      	b.n	8005ee2 <_dtoa_r+0x1b2>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dc35      	bgt.n	8005fd2 <_dtoa_r+0x2a2>
 8005f66:	2301      	movs	r3, #1
 8005f68:	461a      	mov	r2, r3
 8005f6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005f6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005f70:	e00b      	b.n	8005f8a <_dtoa_r+0x25a>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e7f3      	b.n	8005f5e <_dtoa_r+0x22e>
 8005f76:	2300      	movs	r3, #0
 8005f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	9308      	str	r3, [sp, #32]
 8005f80:	3301      	adds	r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	9307      	str	r3, [sp, #28]
 8005f86:	bfb8      	it	lt
 8005f88:	2301      	movlt	r3, #1
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	2204      	movs	r2, #4
 8005f8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005f92:	f102 0514 	add.w	r5, r2, #20
 8005f96:	429d      	cmp	r5, r3
 8005f98:	d91f      	bls.n	8005fda <_dtoa_r+0x2aa>
 8005f9a:	6041      	str	r1, [r0, #4]
 8005f9c:	4658      	mov	r0, fp
 8005f9e:	f000 fd8d 	bl	8006abc <_Balloc>
 8005fa2:	4682      	mov	sl, r0
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d139      	bne.n	800601c <_dtoa_r+0x2ec>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	f240 11af 	movw	r1, #431	@ 0x1af
 8005fae:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <_dtoa_r+0x2e8>)
 8005fb0:	e6d2      	b.n	8005d58 <_dtoa_r+0x28>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e7e0      	b.n	8005f78 <_dtoa_r+0x248>
 8005fb6:	2401      	movs	r4, #1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005fbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8005fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fc8:	2312      	movs	r3, #18
 8005fca:	e7d0      	b.n	8005f6e <_dtoa_r+0x23e>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fd0:	e7f5      	b.n	8005fbe <_dtoa_r+0x28e>
 8005fd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fd8:	e7d7      	b.n	8005f8a <_dtoa_r+0x25a>
 8005fda:	3101      	adds	r1, #1
 8005fdc:	0052      	lsls	r2, r2, #1
 8005fde:	e7d8      	b.n	8005f92 <_dtoa_r+0x262>
 8005fe0:	636f4361 	.word	0x636f4361
 8005fe4:	3fd287a7 	.word	0x3fd287a7
 8005fe8:	8b60c8b3 	.word	0x8b60c8b3
 8005fec:	3fc68a28 	.word	0x3fc68a28
 8005ff0:	509f79fb 	.word	0x509f79fb
 8005ff4:	3fd34413 	.word	0x3fd34413
 8005ff8:	0800a79c 	.word	0x0800a79c
 8005ffc:	0800a7b3 	.word	0x0800a7b3
 8006000:	7ff00000 	.word	0x7ff00000
 8006004:	0800a798 	.word	0x0800a798
 8006008:	0800a767 	.word	0x0800a767
 800600c:	0800a766 	.word	0x0800a766
 8006010:	3ff80000 	.word	0x3ff80000
 8006014:	0800a8b0 	.word	0x0800a8b0
 8006018:	0800a80b 	.word	0x0800a80b
 800601c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006020:	6018      	str	r0, [r3, #0]
 8006022:	9b07      	ldr	r3, [sp, #28]
 8006024:	2b0e      	cmp	r3, #14
 8006026:	f200 80a4 	bhi.w	8006172 <_dtoa_r+0x442>
 800602a:	2c00      	cmp	r4, #0
 800602c:	f000 80a1 	beq.w	8006172 <_dtoa_r+0x442>
 8006030:	2f00      	cmp	r7, #0
 8006032:	dd33      	ble.n	800609c <_dtoa_r+0x36c>
 8006034:	4b86      	ldr	r3, [pc, #536]	@ (8006250 <_dtoa_r+0x520>)
 8006036:	f007 020f 	and.w	r2, r7, #15
 800603a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800603e:	05f8      	lsls	r0, r7, #23
 8006040:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006044:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006048:	ea4f 1427 	mov.w	r4, r7, asr #4
 800604c:	d516      	bpl.n	800607c <_dtoa_r+0x34c>
 800604e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006052:	4b80      	ldr	r3, [pc, #512]	@ (8006254 <_dtoa_r+0x524>)
 8006054:	2603      	movs	r6, #3
 8006056:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800605a:	f7fa fb67 	bl	800072c <__aeabi_ddiv>
 800605e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006062:	f004 040f 	and.w	r4, r4, #15
 8006066:	4d7b      	ldr	r5, [pc, #492]	@ (8006254 <_dtoa_r+0x524>)
 8006068:	b954      	cbnz	r4, 8006080 <_dtoa_r+0x350>
 800606a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800606e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006072:	f7fa fb5b 	bl	800072c <__aeabi_ddiv>
 8006076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800607a:	e028      	b.n	80060ce <_dtoa_r+0x39e>
 800607c:	2602      	movs	r6, #2
 800607e:	e7f2      	b.n	8006066 <_dtoa_r+0x336>
 8006080:	07e1      	lsls	r1, r4, #31
 8006082:	d508      	bpl.n	8006096 <_dtoa_r+0x366>
 8006084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006088:	e9d5 2300 	ldrd	r2, r3, [r5]
 800608c:	f7fa fa24 	bl	80004d8 <__aeabi_dmul>
 8006090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006094:	3601      	adds	r6, #1
 8006096:	1064      	asrs	r4, r4, #1
 8006098:	3508      	adds	r5, #8
 800609a:	e7e5      	b.n	8006068 <_dtoa_r+0x338>
 800609c:	f000 80d2 	beq.w	8006244 <_dtoa_r+0x514>
 80060a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060a4:	427c      	negs	r4, r7
 80060a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006250 <_dtoa_r+0x520>)
 80060a8:	f004 020f 	and.w	r2, r4, #15
 80060ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f7fa fa10 	bl	80004d8 <__aeabi_dmul>
 80060b8:	2602      	movs	r6, #2
 80060ba:	2300      	movs	r3, #0
 80060bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c0:	4d64      	ldr	r5, [pc, #400]	@ (8006254 <_dtoa_r+0x524>)
 80060c2:	1124      	asrs	r4, r4, #4
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	f040 80b2 	bne.w	800622e <_dtoa_r+0x4fe>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1d3      	bne.n	8006076 <_dtoa_r+0x346>
 80060ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80b7 	beq.w	8006248 <_dtoa_r+0x518>
 80060da:	2200      	movs	r2, #0
 80060dc:	4620      	mov	r0, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	4b5d      	ldr	r3, [pc, #372]	@ (8006258 <_dtoa_r+0x528>)
 80060e2:	f7fa fc6b 	bl	80009bc <__aeabi_dcmplt>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f000 80ae 	beq.w	8006248 <_dtoa_r+0x518>
 80060ec:	9b07      	ldr	r3, [sp, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80aa 	beq.w	8006248 <_dtoa_r+0x518>
 80060f4:	9b08      	ldr	r3, [sp, #32]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dd37      	ble.n	800616a <_dtoa_r+0x43a>
 80060fa:	1e7b      	subs	r3, r7, #1
 80060fc:	4620      	mov	r0, r4
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	2200      	movs	r2, #0
 8006102:	4629      	mov	r1, r5
 8006104:	4b55      	ldr	r3, [pc, #340]	@ (800625c <_dtoa_r+0x52c>)
 8006106:	f7fa f9e7 	bl	80004d8 <__aeabi_dmul>
 800610a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800610e:	9c08      	ldr	r4, [sp, #32]
 8006110:	3601      	adds	r6, #1
 8006112:	4630      	mov	r0, r6
 8006114:	f7fa f976 	bl	8000404 <__aeabi_i2d>
 8006118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800611c:	f7fa f9dc 	bl	80004d8 <__aeabi_dmul>
 8006120:	2200      	movs	r2, #0
 8006122:	4b4f      	ldr	r3, [pc, #316]	@ (8006260 <_dtoa_r+0x530>)
 8006124:	f7fa f822 	bl	800016c <__adddf3>
 8006128:	4605      	mov	r5, r0
 800612a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800612e:	2c00      	cmp	r4, #0
 8006130:	f040 809a 	bne.w	8006268 <_dtoa_r+0x538>
 8006134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	4b4a      	ldr	r3, [pc, #296]	@ (8006264 <_dtoa_r+0x534>)
 800613c:	f7fa f814 	bl	8000168 <__aeabi_dsub>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006148:	462a      	mov	r2, r5
 800614a:	4633      	mov	r3, r6
 800614c:	f7fa fc54 	bl	80009f8 <__aeabi_dcmpgt>
 8006150:	2800      	cmp	r0, #0
 8006152:	f040 828e 	bne.w	8006672 <_dtoa_r+0x942>
 8006156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800615a:	462a      	mov	r2, r5
 800615c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006160:	f7fa fc2c 	bl	80009bc <__aeabi_dcmplt>
 8006164:	2800      	cmp	r0, #0
 8006166:	f040 8127 	bne.w	80063b8 <_dtoa_r+0x688>
 800616a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800616e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006172:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006174:	2b00      	cmp	r3, #0
 8006176:	f2c0 8163 	blt.w	8006440 <_dtoa_r+0x710>
 800617a:	2f0e      	cmp	r7, #14
 800617c:	f300 8160 	bgt.w	8006440 <_dtoa_r+0x710>
 8006180:	4b33      	ldr	r3, [pc, #204]	@ (8006250 <_dtoa_r+0x520>)
 8006182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800618a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800618e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006190:	2b00      	cmp	r3, #0
 8006192:	da03      	bge.n	800619c <_dtoa_r+0x46c>
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f340 8100 	ble.w	800639c <_dtoa_r+0x66c>
 800619c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061a0:	4656      	mov	r6, sl
 80061a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7fa fabf 	bl	800072c <__aeabi_ddiv>
 80061ae:	f7fa fc43 	bl	8000a38 <__aeabi_d2iz>
 80061b2:	4680      	mov	r8, r0
 80061b4:	f7fa f926 	bl	8000404 <__aeabi_i2d>
 80061b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061bc:	f7fa f98c 	bl	80004d8 <__aeabi_dmul>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7f9 ffce 	bl	8000168 <__aeabi_dsub>
 80061cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80061d0:	9d07      	ldr	r5, [sp, #28]
 80061d2:	f806 4b01 	strb.w	r4, [r6], #1
 80061d6:	eba6 040a 	sub.w	r4, r6, sl
 80061da:	42a5      	cmp	r5, r4
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	f040 8116 	bne.w	8006410 <_dtoa_r+0x6e0>
 80061e4:	f7f9 ffc2 	bl	800016c <__adddf3>
 80061e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ec:	4604      	mov	r4, r0
 80061ee:	460d      	mov	r5, r1
 80061f0:	f7fa fc02 	bl	80009f8 <__aeabi_dcmpgt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f040 80f8 	bne.w	80063ea <_dtoa_r+0x6ba>
 80061fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7fa fbd1 	bl	80009a8 <__aeabi_dcmpeq>
 8006206:	b118      	cbz	r0, 8006210 <_dtoa_r+0x4e0>
 8006208:	f018 0f01 	tst.w	r8, #1
 800620c:	f040 80ed 	bne.w	80063ea <_dtoa_r+0x6ba>
 8006210:	4649      	mov	r1, r9
 8006212:	4658      	mov	r0, fp
 8006214:	f000 fc92 	bl	8006b3c <_Bfree>
 8006218:	2300      	movs	r3, #0
 800621a:	7033      	strb	r3, [r6, #0]
 800621c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800621e:	3701      	adds	r7, #1
 8006220:	601f      	str	r7, [r3, #0]
 8006222:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8320 	beq.w	800686a <_dtoa_r+0xb3a>
 800622a:	601e      	str	r6, [r3, #0]
 800622c:	e31d      	b.n	800686a <_dtoa_r+0xb3a>
 800622e:	07e2      	lsls	r2, r4, #31
 8006230:	d505      	bpl.n	800623e <_dtoa_r+0x50e>
 8006232:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006236:	f7fa f94f 	bl	80004d8 <__aeabi_dmul>
 800623a:	2301      	movs	r3, #1
 800623c:	3601      	adds	r6, #1
 800623e:	1064      	asrs	r4, r4, #1
 8006240:	3508      	adds	r5, #8
 8006242:	e73f      	b.n	80060c4 <_dtoa_r+0x394>
 8006244:	2602      	movs	r6, #2
 8006246:	e742      	b.n	80060ce <_dtoa_r+0x39e>
 8006248:	9c07      	ldr	r4, [sp, #28]
 800624a:	9704      	str	r7, [sp, #16]
 800624c:	e761      	b.n	8006112 <_dtoa_r+0x3e2>
 800624e:	bf00      	nop
 8006250:	0800a8b0 	.word	0x0800a8b0
 8006254:	0800a888 	.word	0x0800a888
 8006258:	3ff00000 	.word	0x3ff00000
 800625c:	40240000 	.word	0x40240000
 8006260:	401c0000 	.word	0x401c0000
 8006264:	40140000 	.word	0x40140000
 8006268:	4b70      	ldr	r3, [pc, #448]	@ (800642c <_dtoa_r+0x6fc>)
 800626a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800626c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006274:	4454      	add	r4, sl
 8006276:	2900      	cmp	r1, #0
 8006278:	d045      	beq.n	8006306 <_dtoa_r+0x5d6>
 800627a:	2000      	movs	r0, #0
 800627c:	496c      	ldr	r1, [pc, #432]	@ (8006430 <_dtoa_r+0x700>)
 800627e:	f7fa fa55 	bl	800072c <__aeabi_ddiv>
 8006282:	4633      	mov	r3, r6
 8006284:	462a      	mov	r2, r5
 8006286:	f7f9 ff6f 	bl	8000168 <__aeabi_dsub>
 800628a:	4656      	mov	r6, sl
 800628c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006294:	f7fa fbd0 	bl	8000a38 <__aeabi_d2iz>
 8006298:	4605      	mov	r5, r0
 800629a:	f7fa f8b3 	bl	8000404 <__aeabi_i2d>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a6:	f7f9 ff5f 	bl	8000168 <__aeabi_dsub>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	3530      	adds	r5, #48	@ 0x30
 80062b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062b8:	f806 5b01 	strb.w	r5, [r6], #1
 80062bc:	f7fa fb7e 	bl	80009bc <__aeabi_dcmplt>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d163      	bne.n	800638c <_dtoa_r+0x65c>
 80062c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062c8:	2000      	movs	r0, #0
 80062ca:	495a      	ldr	r1, [pc, #360]	@ (8006434 <_dtoa_r+0x704>)
 80062cc:	f7f9 ff4c 	bl	8000168 <__aeabi_dsub>
 80062d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062d4:	f7fa fb72 	bl	80009bc <__aeabi_dcmplt>
 80062d8:	2800      	cmp	r0, #0
 80062da:	f040 8087 	bne.w	80063ec <_dtoa_r+0x6bc>
 80062de:	42a6      	cmp	r6, r4
 80062e0:	f43f af43 	beq.w	800616a <_dtoa_r+0x43a>
 80062e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062e8:	2200      	movs	r2, #0
 80062ea:	4b53      	ldr	r3, [pc, #332]	@ (8006438 <_dtoa_r+0x708>)
 80062ec:	f7fa f8f4 	bl	80004d8 <__aeabi_dmul>
 80062f0:	2200      	movs	r2, #0
 80062f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006438 <_dtoa_r+0x708>)
 80062fc:	f7fa f8ec 	bl	80004d8 <__aeabi_dmul>
 8006300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006304:	e7c4      	b.n	8006290 <_dtoa_r+0x560>
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	f7fa f8e5 	bl	80004d8 <__aeabi_dmul>
 800630e:	4656      	mov	r6, sl
 8006310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006314:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800631a:	f7fa fb8d 	bl	8000a38 <__aeabi_d2iz>
 800631e:	4605      	mov	r5, r0
 8006320:	f7fa f870 	bl	8000404 <__aeabi_i2d>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632c:	f7f9 ff1c 	bl	8000168 <__aeabi_dsub>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	3530      	adds	r5, #48	@ 0x30
 8006336:	f806 5b01 	strb.w	r5, [r6], #1
 800633a:	42a6      	cmp	r6, r4
 800633c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	d124      	bne.n	8006390 <_dtoa_r+0x660>
 8006346:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800634a:	4b39      	ldr	r3, [pc, #228]	@ (8006430 <_dtoa_r+0x700>)
 800634c:	f7f9 ff0e 	bl	800016c <__adddf3>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006358:	f7fa fb4e 	bl	80009f8 <__aeabi_dcmpgt>
 800635c:	2800      	cmp	r0, #0
 800635e:	d145      	bne.n	80063ec <_dtoa_r+0x6bc>
 8006360:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006364:	2000      	movs	r0, #0
 8006366:	4932      	ldr	r1, [pc, #200]	@ (8006430 <_dtoa_r+0x700>)
 8006368:	f7f9 fefe 	bl	8000168 <__aeabi_dsub>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006374:	f7fa fb22 	bl	80009bc <__aeabi_dcmplt>
 8006378:	2800      	cmp	r0, #0
 800637a:	f43f aef6 	beq.w	800616a <_dtoa_r+0x43a>
 800637e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006380:	1e73      	subs	r3, r6, #1
 8006382:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006384:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006388:	2b30      	cmp	r3, #48	@ 0x30
 800638a:	d0f8      	beq.n	800637e <_dtoa_r+0x64e>
 800638c:	9f04      	ldr	r7, [sp, #16]
 800638e:	e73f      	b.n	8006210 <_dtoa_r+0x4e0>
 8006390:	4b29      	ldr	r3, [pc, #164]	@ (8006438 <_dtoa_r+0x708>)
 8006392:	f7fa f8a1 	bl	80004d8 <__aeabi_dmul>
 8006396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800639a:	e7bc      	b.n	8006316 <_dtoa_r+0x5e6>
 800639c:	d10c      	bne.n	80063b8 <_dtoa_r+0x688>
 800639e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063a2:	2200      	movs	r2, #0
 80063a4:	4b25      	ldr	r3, [pc, #148]	@ (800643c <_dtoa_r+0x70c>)
 80063a6:	f7fa f897 	bl	80004d8 <__aeabi_dmul>
 80063aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ae:	f7fa fb19 	bl	80009e4 <__aeabi_dcmpge>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	f000 815b 	beq.w	800666e <_dtoa_r+0x93e>
 80063b8:	2400      	movs	r4, #0
 80063ba:	4625      	mov	r5, r4
 80063bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063be:	4656      	mov	r6, sl
 80063c0:	43db      	mvns	r3, r3
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	2700      	movs	r7, #0
 80063c6:	4621      	mov	r1, r4
 80063c8:	4658      	mov	r0, fp
 80063ca:	f000 fbb7 	bl	8006b3c <_Bfree>
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	d0dc      	beq.n	800638c <_dtoa_r+0x65c>
 80063d2:	b12f      	cbz	r7, 80063e0 <_dtoa_r+0x6b0>
 80063d4:	42af      	cmp	r7, r5
 80063d6:	d003      	beq.n	80063e0 <_dtoa_r+0x6b0>
 80063d8:	4639      	mov	r1, r7
 80063da:	4658      	mov	r0, fp
 80063dc:	f000 fbae 	bl	8006b3c <_Bfree>
 80063e0:	4629      	mov	r1, r5
 80063e2:	4658      	mov	r0, fp
 80063e4:	f000 fbaa 	bl	8006b3c <_Bfree>
 80063e8:	e7d0      	b.n	800638c <_dtoa_r+0x65c>
 80063ea:	9704      	str	r7, [sp, #16]
 80063ec:	4633      	mov	r3, r6
 80063ee:	461e      	mov	r6, r3
 80063f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f4:	2a39      	cmp	r2, #57	@ 0x39
 80063f6:	d107      	bne.n	8006408 <_dtoa_r+0x6d8>
 80063f8:	459a      	cmp	sl, r3
 80063fa:	d1f8      	bne.n	80063ee <_dtoa_r+0x6be>
 80063fc:	9a04      	ldr	r2, [sp, #16]
 80063fe:	3201      	adds	r2, #1
 8006400:	9204      	str	r2, [sp, #16]
 8006402:	2230      	movs	r2, #48	@ 0x30
 8006404:	f88a 2000 	strb.w	r2, [sl]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	3201      	adds	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e7bd      	b.n	800638c <_dtoa_r+0x65c>
 8006410:	2200      	movs	r2, #0
 8006412:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <_dtoa_r+0x708>)
 8006414:	f7fa f860 	bl	80004d8 <__aeabi_dmul>
 8006418:	2200      	movs	r2, #0
 800641a:	2300      	movs	r3, #0
 800641c:	4604      	mov	r4, r0
 800641e:	460d      	mov	r5, r1
 8006420:	f7fa fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8006424:	2800      	cmp	r0, #0
 8006426:	f43f aebc 	beq.w	80061a2 <_dtoa_r+0x472>
 800642a:	e6f1      	b.n	8006210 <_dtoa_r+0x4e0>
 800642c:	0800a8b0 	.word	0x0800a8b0
 8006430:	3fe00000 	.word	0x3fe00000
 8006434:	3ff00000 	.word	0x3ff00000
 8006438:	40240000 	.word	0x40240000
 800643c:	40140000 	.word	0x40140000
 8006440:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006442:	2a00      	cmp	r2, #0
 8006444:	f000 80db 	beq.w	80065fe <_dtoa_r+0x8ce>
 8006448:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800644a:	2a01      	cmp	r2, #1
 800644c:	f300 80bf 	bgt.w	80065ce <_dtoa_r+0x89e>
 8006450:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006452:	2a00      	cmp	r2, #0
 8006454:	f000 80b7 	beq.w	80065c6 <_dtoa_r+0x896>
 8006458:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800645c:	4646      	mov	r6, r8
 800645e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006462:	2101      	movs	r1, #1
 8006464:	441a      	add	r2, r3
 8006466:	4658      	mov	r0, fp
 8006468:	4498      	add	r8, r3
 800646a:	9209      	str	r2, [sp, #36]	@ 0x24
 800646c:	f000 fc64 	bl	8006d38 <__i2b>
 8006470:	4605      	mov	r5, r0
 8006472:	b15e      	cbz	r6, 800648c <_dtoa_r+0x75c>
 8006474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd08      	ble.n	800648c <_dtoa_r+0x75c>
 800647a:	42b3      	cmp	r3, r6
 800647c:	bfa8      	it	ge
 800647e:	4633      	movge	r3, r6
 8006480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006482:	eba8 0803 	sub.w	r8, r8, r3
 8006486:	1af6      	subs	r6, r6, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	9309      	str	r3, [sp, #36]	@ 0x24
 800648c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800648e:	b1f3      	cbz	r3, 80064ce <_dtoa_r+0x79e>
 8006490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80b7 	beq.w	8006606 <_dtoa_r+0x8d6>
 8006498:	b18c      	cbz	r4, 80064be <_dtoa_r+0x78e>
 800649a:	4629      	mov	r1, r5
 800649c:	4622      	mov	r2, r4
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 fd08 	bl	8006eb4 <__pow5mult>
 80064a4:	464a      	mov	r2, r9
 80064a6:	4601      	mov	r1, r0
 80064a8:	4605      	mov	r5, r0
 80064aa:	4658      	mov	r0, fp
 80064ac:	f000 fc5a 	bl	8006d64 <__multiply>
 80064b0:	4649      	mov	r1, r9
 80064b2:	9004      	str	r0, [sp, #16]
 80064b4:	4658      	mov	r0, fp
 80064b6:	f000 fb41 	bl	8006b3c <_Bfree>
 80064ba:	9b04      	ldr	r3, [sp, #16]
 80064bc:	4699      	mov	r9, r3
 80064be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c0:	1b1a      	subs	r2, r3, r4
 80064c2:	d004      	beq.n	80064ce <_dtoa_r+0x79e>
 80064c4:	4649      	mov	r1, r9
 80064c6:	4658      	mov	r0, fp
 80064c8:	f000 fcf4 	bl	8006eb4 <__pow5mult>
 80064cc:	4681      	mov	r9, r0
 80064ce:	2101      	movs	r1, #1
 80064d0:	4658      	mov	r0, fp
 80064d2:	f000 fc31 	bl	8006d38 <__i2b>
 80064d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064d8:	4604      	mov	r4, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 81c9 	beq.w	8006872 <_dtoa_r+0xb42>
 80064e0:	461a      	mov	r2, r3
 80064e2:	4601      	mov	r1, r0
 80064e4:	4658      	mov	r0, fp
 80064e6:	f000 fce5 	bl	8006eb4 <__pow5mult>
 80064ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064ec:	4604      	mov	r4, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	f300 808f 	bgt.w	8006612 <_dtoa_r+0x8e2>
 80064f4:	9b02      	ldr	r3, [sp, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 8087 	bne.w	800660a <_dtoa_r+0x8da>
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8083 	bne.w	800660e <_dtoa_r+0x8de>
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800650e:	0d1b      	lsrs	r3, r3, #20
 8006510:	051b      	lsls	r3, r3, #20
 8006512:	b12b      	cbz	r3, 8006520 <_dtoa_r+0x7f0>
 8006514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	3301      	adds	r3, #1
 800651c:	9309      	str	r3, [sp, #36]	@ 0x24
 800651e:	2301      	movs	r3, #1
 8006520:	930a      	str	r3, [sp, #40]	@ 0x28
 8006522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 81aa 	beq.w	800687e <_dtoa_r+0xb4e>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006530:	6918      	ldr	r0, [r3, #16]
 8006532:	f000 fbb5 	bl	8006ca0 <__hi0bits>
 8006536:	f1c0 0020 	rsb	r0, r0, #32
 800653a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800653c:	4418      	add	r0, r3
 800653e:	f010 001f 	ands.w	r0, r0, #31
 8006542:	d071      	beq.n	8006628 <_dtoa_r+0x8f8>
 8006544:	f1c0 0320 	rsb	r3, r0, #32
 8006548:	2b04      	cmp	r3, #4
 800654a:	dd65      	ble.n	8006618 <_dtoa_r+0x8e8>
 800654c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654e:	f1c0 001c 	rsb	r0, r0, #28
 8006552:	4403      	add	r3, r0
 8006554:	4480      	add	r8, r0
 8006556:	4406      	add	r6, r0
 8006558:	9309      	str	r3, [sp, #36]	@ 0x24
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	dd05      	ble.n	800656c <_dtoa_r+0x83c>
 8006560:	4649      	mov	r1, r9
 8006562:	4642      	mov	r2, r8
 8006564:	4658      	mov	r0, fp
 8006566:	f000 fcff 	bl	8006f68 <__lshift>
 800656a:	4681      	mov	r9, r0
 800656c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	dd05      	ble.n	800657e <_dtoa_r+0x84e>
 8006572:	4621      	mov	r1, r4
 8006574:	461a      	mov	r2, r3
 8006576:	4658      	mov	r0, fp
 8006578:	f000 fcf6 	bl	8006f68 <__lshift>
 800657c:	4604      	mov	r4, r0
 800657e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d053      	beq.n	800662c <_dtoa_r+0x8fc>
 8006584:	4621      	mov	r1, r4
 8006586:	4648      	mov	r0, r9
 8006588:	f000 fd5a 	bl	8007040 <__mcmp>
 800658c:	2800      	cmp	r0, #0
 800658e:	da4d      	bge.n	800662c <_dtoa_r+0x8fc>
 8006590:	1e7b      	subs	r3, r7, #1
 8006592:	4649      	mov	r1, r9
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	220a      	movs	r2, #10
 8006598:	2300      	movs	r3, #0
 800659a:	4658      	mov	r0, fp
 800659c:	f000 faf0 	bl	8006b80 <__multadd>
 80065a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a2:	4681      	mov	r9, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 816c 	beq.w	8006882 <_dtoa_r+0xb52>
 80065aa:	2300      	movs	r3, #0
 80065ac:	4629      	mov	r1, r5
 80065ae:	220a      	movs	r2, #10
 80065b0:	4658      	mov	r0, fp
 80065b2:	f000 fae5 	bl	8006b80 <__multadd>
 80065b6:	9b08      	ldr	r3, [sp, #32]
 80065b8:	4605      	mov	r5, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dc61      	bgt.n	8006682 <_dtoa_r+0x952>
 80065be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	dc3b      	bgt.n	800663c <_dtoa_r+0x90c>
 80065c4:	e05d      	b.n	8006682 <_dtoa_r+0x952>
 80065c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065cc:	e746      	b.n	800645c <_dtoa_r+0x72c>
 80065ce:	9b07      	ldr	r3, [sp, #28]
 80065d0:	1e5c      	subs	r4, r3, #1
 80065d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d4:	42a3      	cmp	r3, r4
 80065d6:	bfbf      	itttt	lt
 80065d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80065da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80065dc:	1ae3      	sublt	r3, r4, r3
 80065de:	18d2      	addlt	r2, r2, r3
 80065e0:	bfa8      	it	ge
 80065e2:	1b1c      	subge	r4, r3, r4
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	bfbe      	ittt	lt
 80065e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80065ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80065ec:	2400      	movlt	r4, #0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bfb5      	itete	lt
 80065f2:	eba8 0603 	sublt.w	r6, r8, r3
 80065f6:	4646      	movge	r6, r8
 80065f8:	2300      	movlt	r3, #0
 80065fa:	9b07      	ldrge	r3, [sp, #28]
 80065fc:	e730      	b.n	8006460 <_dtoa_r+0x730>
 80065fe:	4646      	mov	r6, r8
 8006600:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006602:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006604:	e735      	b.n	8006472 <_dtoa_r+0x742>
 8006606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006608:	e75c      	b.n	80064c4 <_dtoa_r+0x794>
 800660a:	2300      	movs	r3, #0
 800660c:	e788      	b.n	8006520 <_dtoa_r+0x7f0>
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	e786      	b.n	8006520 <_dtoa_r+0x7f0>
 8006612:	2300      	movs	r3, #0
 8006614:	930a      	str	r3, [sp, #40]	@ 0x28
 8006616:	e788      	b.n	800652a <_dtoa_r+0x7fa>
 8006618:	d09f      	beq.n	800655a <_dtoa_r+0x82a>
 800661a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800661c:	331c      	adds	r3, #28
 800661e:	441a      	add	r2, r3
 8006620:	4498      	add	r8, r3
 8006622:	441e      	add	r6, r3
 8006624:	9209      	str	r2, [sp, #36]	@ 0x24
 8006626:	e798      	b.n	800655a <_dtoa_r+0x82a>
 8006628:	4603      	mov	r3, r0
 800662a:	e7f6      	b.n	800661a <_dtoa_r+0x8ea>
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	9704      	str	r7, [sp, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dc20      	bgt.n	8006676 <_dtoa_r+0x946>
 8006634:	9308      	str	r3, [sp, #32]
 8006636:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006638:	2b02      	cmp	r3, #2
 800663a:	dd1e      	ble.n	800667a <_dtoa_r+0x94a>
 800663c:	9b08      	ldr	r3, [sp, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f47f aebc 	bne.w	80063bc <_dtoa_r+0x68c>
 8006644:	4621      	mov	r1, r4
 8006646:	2205      	movs	r2, #5
 8006648:	4658      	mov	r0, fp
 800664a:	f000 fa99 	bl	8006b80 <__multadd>
 800664e:	4601      	mov	r1, r0
 8006650:	4604      	mov	r4, r0
 8006652:	4648      	mov	r0, r9
 8006654:	f000 fcf4 	bl	8007040 <__mcmp>
 8006658:	2800      	cmp	r0, #0
 800665a:	f77f aeaf 	ble.w	80063bc <_dtoa_r+0x68c>
 800665e:	2331      	movs	r3, #49	@ 0x31
 8006660:	4656      	mov	r6, sl
 8006662:	f806 3b01 	strb.w	r3, [r6], #1
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	3301      	adds	r3, #1
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	e6aa      	b.n	80063c4 <_dtoa_r+0x694>
 800666e:	9c07      	ldr	r4, [sp, #28]
 8006670:	9704      	str	r7, [sp, #16]
 8006672:	4625      	mov	r5, r4
 8006674:	e7f3      	b.n	800665e <_dtoa_r+0x92e>
 8006676:	9b07      	ldr	r3, [sp, #28]
 8006678:	9308      	str	r3, [sp, #32]
 800667a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8104 	beq.w	800688a <_dtoa_r+0xb5a>
 8006682:	2e00      	cmp	r6, #0
 8006684:	dd05      	ble.n	8006692 <_dtoa_r+0x962>
 8006686:	4629      	mov	r1, r5
 8006688:	4632      	mov	r2, r6
 800668a:	4658      	mov	r0, fp
 800668c:	f000 fc6c 	bl	8006f68 <__lshift>
 8006690:	4605      	mov	r5, r0
 8006692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05a      	beq.n	800674e <_dtoa_r+0xa1e>
 8006698:	4658      	mov	r0, fp
 800669a:	6869      	ldr	r1, [r5, #4]
 800669c:	f000 fa0e 	bl	8006abc <_Balloc>
 80066a0:	4606      	mov	r6, r0
 80066a2:	b928      	cbnz	r0, 80066b0 <_dtoa_r+0x980>
 80066a4:	4602      	mov	r2, r0
 80066a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066aa:	4b83      	ldr	r3, [pc, #524]	@ (80068b8 <_dtoa_r+0xb88>)
 80066ac:	f7ff bb54 	b.w	8005d58 <_dtoa_r+0x28>
 80066b0:	692a      	ldr	r2, [r5, #16]
 80066b2:	f105 010c 	add.w	r1, r5, #12
 80066b6:	3202      	adds	r2, #2
 80066b8:	0092      	lsls	r2, r2, #2
 80066ba:	300c      	adds	r0, #12
 80066bc:	f002 f922 	bl	8008904 <memcpy>
 80066c0:	2201      	movs	r2, #1
 80066c2:	4631      	mov	r1, r6
 80066c4:	4658      	mov	r0, fp
 80066c6:	f000 fc4f 	bl	8006f68 <__lshift>
 80066ca:	462f      	mov	r7, r5
 80066cc:	4605      	mov	r5, r0
 80066ce:	f10a 0301 	add.w	r3, sl, #1
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	9b08      	ldr	r3, [sp, #32]
 80066d6:	4453      	add	r3, sl
 80066d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066da:	9b02      	ldr	r3, [sp, #8]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	4621      	mov	r1, r4
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4648      	mov	r0, r9
 80066ea:	9302      	str	r3, [sp, #8]
 80066ec:	f7ff fa96 	bl	8005c1c <quorem>
 80066f0:	4639      	mov	r1, r7
 80066f2:	9008      	str	r0, [sp, #32]
 80066f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80066f8:	4648      	mov	r0, r9
 80066fa:	f000 fca1 	bl	8007040 <__mcmp>
 80066fe:	462a      	mov	r2, r5
 8006700:	9009      	str	r0, [sp, #36]	@ 0x24
 8006702:	4621      	mov	r1, r4
 8006704:	4658      	mov	r0, fp
 8006706:	f000 fcb7 	bl	8007078 <__mdiff>
 800670a:	68c2      	ldr	r2, [r0, #12]
 800670c:	4606      	mov	r6, r0
 800670e:	bb02      	cbnz	r2, 8006752 <_dtoa_r+0xa22>
 8006710:	4601      	mov	r1, r0
 8006712:	4648      	mov	r0, r9
 8006714:	f000 fc94 	bl	8007040 <__mcmp>
 8006718:	4602      	mov	r2, r0
 800671a:	4631      	mov	r1, r6
 800671c:	4658      	mov	r0, fp
 800671e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006720:	f000 fa0c 	bl	8006b3c <_Bfree>
 8006724:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006726:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006728:	9e07      	ldr	r6, [sp, #28]
 800672a:	ea43 0102 	orr.w	r1, r3, r2
 800672e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006730:	4319      	orrs	r1, r3
 8006732:	d110      	bne.n	8006756 <_dtoa_r+0xa26>
 8006734:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006738:	d029      	beq.n	800678e <_dtoa_r+0xa5e>
 800673a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	dd02      	ble.n	8006746 <_dtoa_r+0xa16>
 8006740:	9b08      	ldr	r3, [sp, #32]
 8006742:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006746:	9b02      	ldr	r3, [sp, #8]
 8006748:	f883 8000 	strb.w	r8, [r3]
 800674c:	e63b      	b.n	80063c6 <_dtoa_r+0x696>
 800674e:	4628      	mov	r0, r5
 8006750:	e7bb      	b.n	80066ca <_dtoa_r+0x99a>
 8006752:	2201      	movs	r2, #1
 8006754:	e7e1      	b.n	800671a <_dtoa_r+0x9ea>
 8006756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	db04      	blt.n	8006766 <_dtoa_r+0xa36>
 800675c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800675e:	430b      	orrs	r3, r1
 8006760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006762:	430b      	orrs	r3, r1
 8006764:	d120      	bne.n	80067a8 <_dtoa_r+0xa78>
 8006766:	2a00      	cmp	r2, #0
 8006768:	dded      	ble.n	8006746 <_dtoa_r+0xa16>
 800676a:	4649      	mov	r1, r9
 800676c:	2201      	movs	r2, #1
 800676e:	4658      	mov	r0, fp
 8006770:	f000 fbfa 	bl	8006f68 <__lshift>
 8006774:	4621      	mov	r1, r4
 8006776:	4681      	mov	r9, r0
 8006778:	f000 fc62 	bl	8007040 <__mcmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	dc03      	bgt.n	8006788 <_dtoa_r+0xa58>
 8006780:	d1e1      	bne.n	8006746 <_dtoa_r+0xa16>
 8006782:	f018 0f01 	tst.w	r8, #1
 8006786:	d0de      	beq.n	8006746 <_dtoa_r+0xa16>
 8006788:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800678c:	d1d8      	bne.n	8006740 <_dtoa_r+0xa10>
 800678e:	2339      	movs	r3, #57	@ 0x39
 8006790:	9a02      	ldr	r2, [sp, #8]
 8006792:	7013      	strb	r3, [r2, #0]
 8006794:	4633      	mov	r3, r6
 8006796:	461e      	mov	r6, r3
 8006798:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800679c:	3b01      	subs	r3, #1
 800679e:	2a39      	cmp	r2, #57	@ 0x39
 80067a0:	d052      	beq.n	8006848 <_dtoa_r+0xb18>
 80067a2:	3201      	adds	r2, #1
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e60e      	b.n	80063c6 <_dtoa_r+0x696>
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	dd07      	ble.n	80067bc <_dtoa_r+0xa8c>
 80067ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067b0:	d0ed      	beq.n	800678e <_dtoa_r+0xa5e>
 80067b2:	9a02      	ldr	r2, [sp, #8]
 80067b4:	f108 0301 	add.w	r3, r8, #1
 80067b8:	7013      	strb	r3, [r2, #0]
 80067ba:	e604      	b.n	80063c6 <_dtoa_r+0x696>
 80067bc:	9b07      	ldr	r3, [sp, #28]
 80067be:	9a07      	ldr	r2, [sp, #28]
 80067c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80067c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d028      	beq.n	800681c <_dtoa_r+0xaec>
 80067ca:	4649      	mov	r1, r9
 80067cc:	2300      	movs	r3, #0
 80067ce:	220a      	movs	r2, #10
 80067d0:	4658      	mov	r0, fp
 80067d2:	f000 f9d5 	bl	8006b80 <__multadd>
 80067d6:	42af      	cmp	r7, r5
 80067d8:	4681      	mov	r9, r0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	f04f 020a 	mov.w	r2, #10
 80067e2:	4639      	mov	r1, r7
 80067e4:	4658      	mov	r0, fp
 80067e6:	d107      	bne.n	80067f8 <_dtoa_r+0xac8>
 80067e8:	f000 f9ca 	bl	8006b80 <__multadd>
 80067ec:	4607      	mov	r7, r0
 80067ee:	4605      	mov	r5, r0
 80067f0:	9b07      	ldr	r3, [sp, #28]
 80067f2:	3301      	adds	r3, #1
 80067f4:	9307      	str	r3, [sp, #28]
 80067f6:	e774      	b.n	80066e2 <_dtoa_r+0x9b2>
 80067f8:	f000 f9c2 	bl	8006b80 <__multadd>
 80067fc:	4629      	mov	r1, r5
 80067fe:	4607      	mov	r7, r0
 8006800:	2300      	movs	r3, #0
 8006802:	220a      	movs	r2, #10
 8006804:	4658      	mov	r0, fp
 8006806:	f000 f9bb 	bl	8006b80 <__multadd>
 800680a:	4605      	mov	r5, r0
 800680c:	e7f0      	b.n	80067f0 <_dtoa_r+0xac0>
 800680e:	9b08      	ldr	r3, [sp, #32]
 8006810:	2700      	movs	r7, #0
 8006812:	2b00      	cmp	r3, #0
 8006814:	bfcc      	ite	gt
 8006816:	461e      	movgt	r6, r3
 8006818:	2601      	movle	r6, #1
 800681a:	4456      	add	r6, sl
 800681c:	4649      	mov	r1, r9
 800681e:	2201      	movs	r2, #1
 8006820:	4658      	mov	r0, fp
 8006822:	f000 fba1 	bl	8006f68 <__lshift>
 8006826:	4621      	mov	r1, r4
 8006828:	4681      	mov	r9, r0
 800682a:	f000 fc09 	bl	8007040 <__mcmp>
 800682e:	2800      	cmp	r0, #0
 8006830:	dcb0      	bgt.n	8006794 <_dtoa_r+0xa64>
 8006832:	d102      	bne.n	800683a <_dtoa_r+0xb0a>
 8006834:	f018 0f01 	tst.w	r8, #1
 8006838:	d1ac      	bne.n	8006794 <_dtoa_r+0xa64>
 800683a:	4633      	mov	r3, r6
 800683c:	461e      	mov	r6, r3
 800683e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006842:	2a30      	cmp	r2, #48	@ 0x30
 8006844:	d0fa      	beq.n	800683c <_dtoa_r+0xb0c>
 8006846:	e5be      	b.n	80063c6 <_dtoa_r+0x696>
 8006848:	459a      	cmp	sl, r3
 800684a:	d1a4      	bne.n	8006796 <_dtoa_r+0xa66>
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	3301      	adds	r3, #1
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	2331      	movs	r3, #49	@ 0x31
 8006854:	f88a 3000 	strb.w	r3, [sl]
 8006858:	e5b5      	b.n	80063c6 <_dtoa_r+0x696>
 800685a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800685c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80068bc <_dtoa_r+0xb8c>
 8006860:	b11b      	cbz	r3, 800686a <_dtoa_r+0xb3a>
 8006862:	f10a 0308 	add.w	r3, sl, #8
 8006866:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	4650      	mov	r0, sl
 800686c:	b017      	add	sp, #92	@ 0x5c
 800686e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006872:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006874:	2b01      	cmp	r3, #1
 8006876:	f77f ae3d 	ble.w	80064f4 <_dtoa_r+0x7c4>
 800687a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800687c:	930a      	str	r3, [sp, #40]	@ 0x28
 800687e:	2001      	movs	r0, #1
 8006880:	e65b      	b.n	800653a <_dtoa_r+0x80a>
 8006882:	9b08      	ldr	r3, [sp, #32]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f77f aed6 	ble.w	8006636 <_dtoa_r+0x906>
 800688a:	4656      	mov	r6, sl
 800688c:	4621      	mov	r1, r4
 800688e:	4648      	mov	r0, r9
 8006890:	f7ff f9c4 	bl	8005c1c <quorem>
 8006894:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006898:	9b08      	ldr	r3, [sp, #32]
 800689a:	f806 8b01 	strb.w	r8, [r6], #1
 800689e:	eba6 020a 	sub.w	r2, r6, sl
 80068a2:	4293      	cmp	r3, r2
 80068a4:	ddb3      	ble.n	800680e <_dtoa_r+0xade>
 80068a6:	4649      	mov	r1, r9
 80068a8:	2300      	movs	r3, #0
 80068aa:	220a      	movs	r2, #10
 80068ac:	4658      	mov	r0, fp
 80068ae:	f000 f967 	bl	8006b80 <__multadd>
 80068b2:	4681      	mov	r9, r0
 80068b4:	e7ea      	b.n	800688c <_dtoa_r+0xb5c>
 80068b6:	bf00      	nop
 80068b8:	0800a80b 	.word	0x0800a80b
 80068bc:	0800a78f 	.word	0x0800a78f

080068c0 <_free_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4605      	mov	r5, r0
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d040      	beq.n	800694a <_free_r+0x8a>
 80068c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068cc:	1f0c      	subs	r4, r1, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfb8      	it	lt
 80068d2:	18e4      	addlt	r4, r4, r3
 80068d4:	f000 f8e6 	bl	8006aa4 <__malloc_lock>
 80068d8:	4a1c      	ldr	r2, [pc, #112]	@ (800694c <_free_r+0x8c>)
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	b933      	cbnz	r3, 80068ec <_free_r+0x2c>
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	4628      	mov	r0, r5
 80068e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068e8:	f000 b8e2 	b.w	8006ab0 <__malloc_unlock>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d908      	bls.n	8006902 <_free_r+0x42>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	1821      	adds	r1, r4, r0
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf01      	itttt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	1809      	addeq	r1, r1, r0
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	e7ed      	b.n	80068de <_free_r+0x1e>
 8006902:	461a      	mov	r2, r3
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b10b      	cbz	r3, 800690c <_free_r+0x4c>
 8006908:	42a3      	cmp	r3, r4
 800690a:	d9fa      	bls.n	8006902 <_free_r+0x42>
 800690c:	6811      	ldr	r1, [r2, #0]
 800690e:	1850      	adds	r0, r2, r1
 8006910:	42a0      	cmp	r0, r4
 8006912:	d10b      	bne.n	800692c <_free_r+0x6c>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	4401      	add	r1, r0
 8006918:	1850      	adds	r0, r2, r1
 800691a:	4283      	cmp	r3, r0
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	d1e0      	bne.n	80068e2 <_free_r+0x22>
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4408      	add	r0, r1
 8006926:	6010      	str	r0, [r2, #0]
 8006928:	6053      	str	r3, [r2, #4]
 800692a:	e7da      	b.n	80068e2 <_free_r+0x22>
 800692c:	d902      	bls.n	8006934 <_free_r+0x74>
 800692e:	230c      	movs	r3, #12
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	e7d6      	b.n	80068e2 <_free_r+0x22>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	1821      	adds	r1, r4, r0
 8006938:	428b      	cmp	r3, r1
 800693a:	bf01      	itttt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	1809      	addeq	r1, r1, r0
 8006942:	6021      	streq	r1, [r4, #0]
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6054      	str	r4, [r2, #4]
 8006948:	e7cb      	b.n	80068e2 <_free_r+0x22>
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000488 	.word	0x20000488

08006950 <malloc>:
 8006950:	4b02      	ldr	r3, [pc, #8]	@ (800695c <malloc+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f000 b825 	b.w	80069a4 <_malloc_r>
 800695a:	bf00      	nop
 800695c:	20000018 	.word	0x20000018

08006960 <sbrk_aligned>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	4e0f      	ldr	r6, [pc, #60]	@ (80069a0 <sbrk_aligned+0x40>)
 8006964:	460c      	mov	r4, r1
 8006966:	6831      	ldr	r1, [r6, #0]
 8006968:	4605      	mov	r5, r0
 800696a:	b911      	cbnz	r1, 8006972 <sbrk_aligned+0x12>
 800696c:	f001 ffba 	bl	80088e4 <_sbrk_r>
 8006970:	6030      	str	r0, [r6, #0]
 8006972:	4621      	mov	r1, r4
 8006974:	4628      	mov	r0, r5
 8006976:	f001 ffb5 	bl	80088e4 <_sbrk_r>
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	d103      	bne.n	8006986 <sbrk_aligned+0x26>
 800697e:	f04f 34ff 	mov.w	r4, #4294967295
 8006982:	4620      	mov	r0, r4
 8006984:	bd70      	pop	{r4, r5, r6, pc}
 8006986:	1cc4      	adds	r4, r0, #3
 8006988:	f024 0403 	bic.w	r4, r4, #3
 800698c:	42a0      	cmp	r0, r4
 800698e:	d0f8      	beq.n	8006982 <sbrk_aligned+0x22>
 8006990:	1a21      	subs	r1, r4, r0
 8006992:	4628      	mov	r0, r5
 8006994:	f001 ffa6 	bl	80088e4 <_sbrk_r>
 8006998:	3001      	adds	r0, #1
 800699a:	d1f2      	bne.n	8006982 <sbrk_aligned+0x22>
 800699c:	e7ef      	b.n	800697e <sbrk_aligned+0x1e>
 800699e:	bf00      	nop
 80069a0:	20000484 	.word	0x20000484

080069a4 <_malloc_r>:
 80069a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a8:	1ccd      	adds	r5, r1, #3
 80069aa:	f025 0503 	bic.w	r5, r5, #3
 80069ae:	3508      	adds	r5, #8
 80069b0:	2d0c      	cmp	r5, #12
 80069b2:	bf38      	it	cc
 80069b4:	250c      	movcc	r5, #12
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	4606      	mov	r6, r0
 80069ba:	db01      	blt.n	80069c0 <_malloc_r+0x1c>
 80069bc:	42a9      	cmp	r1, r5
 80069be:	d904      	bls.n	80069ca <_malloc_r+0x26>
 80069c0:	230c      	movs	r3, #12
 80069c2:	6033      	str	r3, [r6, #0]
 80069c4:	2000      	movs	r0, #0
 80069c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006aa0 <_malloc_r+0xfc>
 80069ce:	f000 f869 	bl	8006aa4 <__malloc_lock>
 80069d2:	f8d8 3000 	ldr.w	r3, [r8]
 80069d6:	461c      	mov	r4, r3
 80069d8:	bb44      	cbnz	r4, 8006a2c <_malloc_r+0x88>
 80069da:	4629      	mov	r1, r5
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff ffbf 	bl	8006960 <sbrk_aligned>
 80069e2:	1c43      	adds	r3, r0, #1
 80069e4:	4604      	mov	r4, r0
 80069e6:	d158      	bne.n	8006a9a <_malloc_r+0xf6>
 80069e8:	f8d8 4000 	ldr.w	r4, [r8]
 80069ec:	4627      	mov	r7, r4
 80069ee:	2f00      	cmp	r7, #0
 80069f0:	d143      	bne.n	8006a7a <_malloc_r+0xd6>
 80069f2:	2c00      	cmp	r4, #0
 80069f4:	d04b      	beq.n	8006a8e <_malloc_r+0xea>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	4639      	mov	r1, r7
 80069fa:	4630      	mov	r0, r6
 80069fc:	eb04 0903 	add.w	r9, r4, r3
 8006a00:	f001 ff70 	bl	80088e4 <_sbrk_r>
 8006a04:	4581      	cmp	r9, r0
 8006a06:	d142      	bne.n	8006a8e <_malloc_r+0xea>
 8006a08:	6821      	ldr	r1, [r4, #0]
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	1a6d      	subs	r5, r5, r1
 8006a0e:	4629      	mov	r1, r5
 8006a10:	f7ff ffa6 	bl	8006960 <sbrk_aligned>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d03a      	beq.n	8006a8e <_malloc_r+0xea>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	442b      	add	r3, r5
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	bb62      	cbnz	r2, 8006a80 <_malloc_r+0xdc>
 8006a26:	f8c8 7000 	str.w	r7, [r8]
 8006a2a:	e00f      	b.n	8006a4c <_malloc_r+0xa8>
 8006a2c:	6822      	ldr	r2, [r4, #0]
 8006a2e:	1b52      	subs	r2, r2, r5
 8006a30:	d420      	bmi.n	8006a74 <_malloc_r+0xd0>
 8006a32:	2a0b      	cmp	r2, #11
 8006a34:	d917      	bls.n	8006a66 <_malloc_r+0xc2>
 8006a36:	1961      	adds	r1, r4, r5
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	6025      	str	r5, [r4, #0]
 8006a3c:	bf18      	it	ne
 8006a3e:	6059      	strne	r1, [r3, #4]
 8006a40:	6863      	ldr	r3, [r4, #4]
 8006a42:	bf08      	it	eq
 8006a44:	f8c8 1000 	streq.w	r1, [r8]
 8006a48:	5162      	str	r2, [r4, r5]
 8006a4a:	604b      	str	r3, [r1, #4]
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 f82f 	bl	8006ab0 <__malloc_unlock>
 8006a52:	f104 000b 	add.w	r0, r4, #11
 8006a56:	1d23      	adds	r3, r4, #4
 8006a58:	f020 0007 	bic.w	r0, r0, #7
 8006a5c:	1ac2      	subs	r2, r0, r3
 8006a5e:	bf1c      	itt	ne
 8006a60:	1a1b      	subne	r3, r3, r0
 8006a62:	50a3      	strne	r3, [r4, r2]
 8006a64:	e7af      	b.n	80069c6 <_malloc_r+0x22>
 8006a66:	6862      	ldr	r2, [r4, #4]
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	bf0c      	ite	eq
 8006a6c:	f8c8 2000 	streq.w	r2, [r8]
 8006a70:	605a      	strne	r2, [r3, #4]
 8006a72:	e7eb      	b.n	8006a4c <_malloc_r+0xa8>
 8006a74:	4623      	mov	r3, r4
 8006a76:	6864      	ldr	r4, [r4, #4]
 8006a78:	e7ae      	b.n	80069d8 <_malloc_r+0x34>
 8006a7a:	463c      	mov	r4, r7
 8006a7c:	687f      	ldr	r7, [r7, #4]
 8006a7e:	e7b6      	b.n	80069ee <_malloc_r+0x4a>
 8006a80:	461a      	mov	r2, r3
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d1fb      	bne.n	8006a80 <_malloc_r+0xdc>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	6053      	str	r3, [r2, #4]
 8006a8c:	e7de      	b.n	8006a4c <_malloc_r+0xa8>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	4630      	mov	r0, r6
 8006a92:	6033      	str	r3, [r6, #0]
 8006a94:	f000 f80c 	bl	8006ab0 <__malloc_unlock>
 8006a98:	e794      	b.n	80069c4 <_malloc_r+0x20>
 8006a9a:	6005      	str	r5, [r0, #0]
 8006a9c:	e7d6      	b.n	8006a4c <_malloc_r+0xa8>
 8006a9e:	bf00      	nop
 8006aa0:	20000488 	.word	0x20000488

08006aa4 <__malloc_lock>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	@ (8006aac <__malloc_lock+0x8>)
 8006aa6:	f7ff b8a4 	b.w	8005bf2 <__retarget_lock_acquire_recursive>
 8006aaa:	bf00      	nop
 8006aac:	20000480 	.word	0x20000480

08006ab0 <__malloc_unlock>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	@ (8006ab8 <__malloc_unlock+0x8>)
 8006ab2:	f7ff b89f 	b.w	8005bf4 <__retarget_lock_release_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	20000480 	.word	0x20000480

08006abc <_Balloc>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	69c6      	ldr	r6, [r0, #28]
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	b976      	cbnz	r6, 8006ae4 <_Balloc+0x28>
 8006ac6:	2010      	movs	r0, #16
 8006ac8:	f7ff ff42 	bl	8006950 <malloc>
 8006acc:	4602      	mov	r2, r0
 8006ace:	61e0      	str	r0, [r4, #28]
 8006ad0:	b920      	cbnz	r0, 8006adc <_Balloc+0x20>
 8006ad2:	216b      	movs	r1, #107	@ 0x6b
 8006ad4:	4b17      	ldr	r3, [pc, #92]	@ (8006b34 <_Balloc+0x78>)
 8006ad6:	4818      	ldr	r0, [pc, #96]	@ (8006b38 <_Balloc+0x7c>)
 8006ad8:	f001 ff28 	bl	800892c <__assert_func>
 8006adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ae0:	6006      	str	r6, [r0, #0]
 8006ae2:	60c6      	str	r6, [r0, #12]
 8006ae4:	69e6      	ldr	r6, [r4, #28]
 8006ae6:	68f3      	ldr	r3, [r6, #12]
 8006ae8:	b183      	cbz	r3, 8006b0c <_Balloc+0x50>
 8006aea:	69e3      	ldr	r3, [r4, #28]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006af2:	b9b8      	cbnz	r0, 8006b24 <_Balloc+0x68>
 8006af4:	2101      	movs	r1, #1
 8006af6:	fa01 f605 	lsl.w	r6, r1, r5
 8006afa:	1d72      	adds	r2, r6, #5
 8006afc:	4620      	mov	r0, r4
 8006afe:	0092      	lsls	r2, r2, #2
 8006b00:	f001 ff32 	bl	8008968 <_calloc_r>
 8006b04:	b160      	cbz	r0, 8006b20 <_Balloc+0x64>
 8006b06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b0a:	e00e      	b.n	8006b2a <_Balloc+0x6e>
 8006b0c:	2221      	movs	r2, #33	@ 0x21
 8006b0e:	2104      	movs	r1, #4
 8006b10:	4620      	mov	r0, r4
 8006b12:	f001 ff29 	bl	8008968 <_calloc_r>
 8006b16:	69e3      	ldr	r3, [r4, #28]
 8006b18:	60f0      	str	r0, [r6, #12]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e4      	bne.n	8006aea <_Balloc+0x2e>
 8006b20:	2000      	movs	r0, #0
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	6802      	ldr	r2, [r0, #0]
 8006b26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b30:	e7f7      	b.n	8006b22 <_Balloc+0x66>
 8006b32:	bf00      	nop
 8006b34:	0800a79c 	.word	0x0800a79c
 8006b38:	0800a81c 	.word	0x0800a81c

08006b3c <_Bfree>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	69c6      	ldr	r6, [r0, #28]
 8006b40:	4605      	mov	r5, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	b976      	cbnz	r6, 8006b64 <_Bfree+0x28>
 8006b46:	2010      	movs	r0, #16
 8006b48:	f7ff ff02 	bl	8006950 <malloc>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	61e8      	str	r0, [r5, #28]
 8006b50:	b920      	cbnz	r0, 8006b5c <_Bfree+0x20>
 8006b52:	218f      	movs	r1, #143	@ 0x8f
 8006b54:	4b08      	ldr	r3, [pc, #32]	@ (8006b78 <_Bfree+0x3c>)
 8006b56:	4809      	ldr	r0, [pc, #36]	@ (8006b7c <_Bfree+0x40>)
 8006b58:	f001 fee8 	bl	800892c <__assert_func>
 8006b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b60:	6006      	str	r6, [r0, #0]
 8006b62:	60c6      	str	r6, [r0, #12]
 8006b64:	b13c      	cbz	r4, 8006b76 <_Bfree+0x3a>
 8006b66:	69eb      	ldr	r3, [r5, #28]
 8006b68:	6862      	ldr	r2, [r4, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b70:	6021      	str	r1, [r4, #0]
 8006b72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	0800a79c 	.word	0x0800a79c
 8006b7c:	0800a81c 	.word	0x0800a81c

08006b80 <__multadd>:
 8006b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b84:	4607      	mov	r7, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	461e      	mov	r6, r3
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	690d      	ldr	r5, [r1, #16]
 8006b8e:	f101 0c14 	add.w	ip, r1, #20
 8006b92:	f8dc 3000 	ldr.w	r3, [ip]
 8006b96:	3001      	adds	r0, #1
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	fb02 6101 	mla	r1, r2, r1, r6
 8006b9e:	0c1e      	lsrs	r6, r3, #16
 8006ba0:	0c0b      	lsrs	r3, r1, #16
 8006ba2:	fb02 3306 	mla	r3, r2, r6, r3
 8006ba6:	b289      	uxth	r1, r1
 8006ba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bac:	4285      	cmp	r5, r0
 8006bae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bb2:	f84c 1b04 	str.w	r1, [ip], #4
 8006bb6:	dcec      	bgt.n	8006b92 <__multadd+0x12>
 8006bb8:	b30e      	cbz	r6, 8006bfe <__multadd+0x7e>
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	42ab      	cmp	r3, r5
 8006bbe:	dc19      	bgt.n	8006bf4 <__multadd+0x74>
 8006bc0:	6861      	ldr	r1, [r4, #4]
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	3101      	adds	r1, #1
 8006bc6:	f7ff ff79 	bl	8006abc <_Balloc>
 8006bca:	4680      	mov	r8, r0
 8006bcc:	b928      	cbnz	r0, 8006bda <__multadd+0x5a>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	21ba      	movs	r1, #186	@ 0xba
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <__multadd+0x84>)
 8006bd4:	480c      	ldr	r0, [pc, #48]	@ (8006c08 <__multadd+0x88>)
 8006bd6:	f001 fea9 	bl	800892c <__assert_func>
 8006bda:	6922      	ldr	r2, [r4, #16]
 8006bdc:	f104 010c 	add.w	r1, r4, #12
 8006be0:	3202      	adds	r2, #2
 8006be2:	0092      	lsls	r2, r2, #2
 8006be4:	300c      	adds	r0, #12
 8006be6:	f001 fe8d 	bl	8008904 <memcpy>
 8006bea:	4621      	mov	r1, r4
 8006bec:	4638      	mov	r0, r7
 8006bee:	f7ff ffa5 	bl	8006b3c <_Bfree>
 8006bf2:	4644      	mov	r4, r8
 8006bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bf8:	3501      	adds	r5, #1
 8006bfa:	615e      	str	r6, [r3, #20]
 8006bfc:	6125      	str	r5, [r4, #16]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c04:	0800a80b 	.word	0x0800a80b
 8006c08:	0800a81c 	.word	0x0800a81c

08006c0c <__s2b>:
 8006c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c10:	4615      	mov	r5, r2
 8006c12:	2209      	movs	r2, #9
 8006c14:	461f      	mov	r7, r3
 8006c16:	3308      	adds	r3, #8
 8006c18:	460c      	mov	r4, r1
 8006c1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c1e:	4606      	mov	r6, r0
 8006c20:	2201      	movs	r2, #1
 8006c22:	2100      	movs	r1, #0
 8006c24:	429a      	cmp	r2, r3
 8006c26:	db09      	blt.n	8006c3c <__s2b+0x30>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f7ff ff47 	bl	8006abc <_Balloc>
 8006c2e:	b940      	cbnz	r0, 8006c42 <__s2b+0x36>
 8006c30:	4602      	mov	r2, r0
 8006c32:	21d3      	movs	r1, #211	@ 0xd3
 8006c34:	4b18      	ldr	r3, [pc, #96]	@ (8006c98 <__s2b+0x8c>)
 8006c36:	4819      	ldr	r0, [pc, #100]	@ (8006c9c <__s2b+0x90>)
 8006c38:	f001 fe78 	bl	800892c <__assert_func>
 8006c3c:	0052      	lsls	r2, r2, #1
 8006c3e:	3101      	adds	r1, #1
 8006c40:	e7f0      	b.n	8006c24 <__s2b+0x18>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	2d09      	cmp	r5, #9
 8006c46:	6143      	str	r3, [r0, #20]
 8006c48:	f04f 0301 	mov.w	r3, #1
 8006c4c:	6103      	str	r3, [r0, #16]
 8006c4e:	dd16      	ble.n	8006c7e <__s2b+0x72>
 8006c50:	f104 0909 	add.w	r9, r4, #9
 8006c54:	46c8      	mov	r8, r9
 8006c56:	442c      	add	r4, r5
 8006c58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	220a      	movs	r2, #10
 8006c60:	4630      	mov	r0, r6
 8006c62:	3b30      	subs	r3, #48	@ 0x30
 8006c64:	f7ff ff8c 	bl	8006b80 <__multadd>
 8006c68:	45a0      	cmp	r8, r4
 8006c6a:	d1f5      	bne.n	8006c58 <__s2b+0x4c>
 8006c6c:	f1a5 0408 	sub.w	r4, r5, #8
 8006c70:	444c      	add	r4, r9
 8006c72:	1b2d      	subs	r5, r5, r4
 8006c74:	1963      	adds	r3, r4, r5
 8006c76:	42bb      	cmp	r3, r7
 8006c78:	db04      	blt.n	8006c84 <__s2b+0x78>
 8006c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7e:	2509      	movs	r5, #9
 8006c80:	340a      	adds	r4, #10
 8006c82:	e7f6      	b.n	8006c72 <__s2b+0x66>
 8006c84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c88:	4601      	mov	r1, r0
 8006c8a:	220a      	movs	r2, #10
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	3b30      	subs	r3, #48	@ 0x30
 8006c90:	f7ff ff76 	bl	8006b80 <__multadd>
 8006c94:	e7ee      	b.n	8006c74 <__s2b+0x68>
 8006c96:	bf00      	nop
 8006c98:	0800a80b 	.word	0x0800a80b
 8006c9c:	0800a81c 	.word	0x0800a81c

08006ca0 <__hi0bits>:
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ca6:	bf3a      	itte	cc
 8006ca8:	0403      	lslcc	r3, r0, #16
 8006caa:	2010      	movcc	r0, #16
 8006cac:	2000      	movcs	r0, #0
 8006cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cb2:	bf3c      	itt	cc
 8006cb4:	021b      	lslcc	r3, r3, #8
 8006cb6:	3008      	addcc	r0, #8
 8006cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cbc:	bf3c      	itt	cc
 8006cbe:	011b      	lslcc	r3, r3, #4
 8006cc0:	3004      	addcc	r0, #4
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc6:	bf3c      	itt	cc
 8006cc8:	009b      	lslcc	r3, r3, #2
 8006cca:	3002      	addcc	r0, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	db05      	blt.n	8006cdc <__hi0bits+0x3c>
 8006cd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cd4:	f100 0001 	add.w	r0, r0, #1
 8006cd8:	bf08      	it	eq
 8006cda:	2020      	moveq	r0, #32
 8006cdc:	4770      	bx	lr

08006cde <__lo0bits>:
 8006cde:	6803      	ldr	r3, [r0, #0]
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	f013 0007 	ands.w	r0, r3, #7
 8006ce6:	d00b      	beq.n	8006d00 <__lo0bits+0x22>
 8006ce8:	07d9      	lsls	r1, r3, #31
 8006cea:	d421      	bmi.n	8006d30 <__lo0bits+0x52>
 8006cec:	0798      	lsls	r0, r3, #30
 8006cee:	bf49      	itett	mi
 8006cf0:	085b      	lsrmi	r3, r3, #1
 8006cf2:	089b      	lsrpl	r3, r3, #2
 8006cf4:	2001      	movmi	r0, #1
 8006cf6:	6013      	strmi	r3, [r2, #0]
 8006cf8:	bf5c      	itt	pl
 8006cfa:	2002      	movpl	r0, #2
 8006cfc:	6013      	strpl	r3, [r2, #0]
 8006cfe:	4770      	bx	lr
 8006d00:	b299      	uxth	r1, r3
 8006d02:	b909      	cbnz	r1, 8006d08 <__lo0bits+0x2a>
 8006d04:	2010      	movs	r0, #16
 8006d06:	0c1b      	lsrs	r3, r3, #16
 8006d08:	b2d9      	uxtb	r1, r3
 8006d0a:	b909      	cbnz	r1, 8006d10 <__lo0bits+0x32>
 8006d0c:	3008      	adds	r0, #8
 8006d0e:	0a1b      	lsrs	r3, r3, #8
 8006d10:	0719      	lsls	r1, r3, #28
 8006d12:	bf04      	itt	eq
 8006d14:	091b      	lsreq	r3, r3, #4
 8006d16:	3004      	addeq	r0, #4
 8006d18:	0799      	lsls	r1, r3, #30
 8006d1a:	bf04      	itt	eq
 8006d1c:	089b      	lsreq	r3, r3, #2
 8006d1e:	3002      	addeq	r0, #2
 8006d20:	07d9      	lsls	r1, r3, #31
 8006d22:	d403      	bmi.n	8006d2c <__lo0bits+0x4e>
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	f100 0001 	add.w	r0, r0, #1
 8006d2a:	d003      	beq.n	8006d34 <__lo0bits+0x56>
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	4770      	bx	lr
 8006d30:	2000      	movs	r0, #0
 8006d32:	4770      	bx	lr
 8006d34:	2020      	movs	r0, #32
 8006d36:	4770      	bx	lr

08006d38 <__i2b>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	f7ff febd 	bl	8006abc <_Balloc>
 8006d42:	4602      	mov	r2, r0
 8006d44:	b928      	cbnz	r0, 8006d52 <__i2b+0x1a>
 8006d46:	f240 1145 	movw	r1, #325	@ 0x145
 8006d4a:	4b04      	ldr	r3, [pc, #16]	@ (8006d5c <__i2b+0x24>)
 8006d4c:	4804      	ldr	r0, [pc, #16]	@ (8006d60 <__i2b+0x28>)
 8006d4e:	f001 fded 	bl	800892c <__assert_func>
 8006d52:	2301      	movs	r3, #1
 8006d54:	6144      	str	r4, [r0, #20]
 8006d56:	6103      	str	r3, [r0, #16]
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	bf00      	nop
 8006d5c:	0800a80b 	.word	0x0800a80b
 8006d60:	0800a81c 	.word	0x0800a81c

08006d64 <__multiply>:
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	4614      	mov	r4, r2
 8006d6a:	690a      	ldr	r2, [r1, #16]
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	460f      	mov	r7, r1
 8006d70:	429a      	cmp	r2, r3
 8006d72:	bfa2      	ittt	ge
 8006d74:	4623      	movge	r3, r4
 8006d76:	460c      	movge	r4, r1
 8006d78:	461f      	movge	r7, r3
 8006d7a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d7e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	6861      	ldr	r1, [r4, #4]
 8006d86:	eb0a 0609 	add.w	r6, sl, r9
 8006d8a:	42b3      	cmp	r3, r6
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	bfb8      	it	lt
 8006d90:	3101      	addlt	r1, #1
 8006d92:	f7ff fe93 	bl	8006abc <_Balloc>
 8006d96:	b930      	cbnz	r0, 8006da6 <__multiply+0x42>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d9e:	4b43      	ldr	r3, [pc, #268]	@ (8006eac <__multiply+0x148>)
 8006da0:	4843      	ldr	r0, [pc, #268]	@ (8006eb0 <__multiply+0x14c>)
 8006da2:	f001 fdc3 	bl	800892c <__assert_func>
 8006da6:	f100 0514 	add.w	r5, r0, #20
 8006daa:	462b      	mov	r3, r5
 8006dac:	2200      	movs	r2, #0
 8006dae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006db2:	4543      	cmp	r3, r8
 8006db4:	d321      	bcc.n	8006dfa <__multiply+0x96>
 8006db6:	f107 0114 	add.w	r1, r7, #20
 8006dba:	f104 0214 	add.w	r2, r4, #20
 8006dbe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006dc2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	1b13      	subs	r3, r2, r4
 8006dca:	3b15      	subs	r3, #21
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	f104 0715 	add.w	r7, r4, #21
 8006dd6:	42ba      	cmp	r2, r7
 8006dd8:	bf38      	it	cc
 8006dda:	2304      	movcc	r3, #4
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	9103      	str	r1, [sp, #12]
 8006de2:	428b      	cmp	r3, r1
 8006de4:	d80c      	bhi.n	8006e00 <__multiply+0x9c>
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	dd03      	ble.n	8006df2 <__multiply+0x8e>
 8006dea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d05a      	beq.n	8006ea8 <__multiply+0x144>
 8006df2:	6106      	str	r6, [r0, #16]
 8006df4:	b005      	add	sp, #20
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	f843 2b04 	str.w	r2, [r3], #4
 8006dfe:	e7d8      	b.n	8006db2 <__multiply+0x4e>
 8006e00:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e04:	f1ba 0f00 	cmp.w	sl, #0
 8006e08:	d023      	beq.n	8006e52 <__multiply+0xee>
 8006e0a:	46a9      	mov	r9, r5
 8006e0c:	f04f 0c00 	mov.w	ip, #0
 8006e10:	f104 0e14 	add.w	lr, r4, #20
 8006e14:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e18:	f8d9 3000 	ldr.w	r3, [r9]
 8006e1c:	fa1f fb87 	uxth.w	fp, r7
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e26:	4463      	add	r3, ip
 8006e28:	f8d9 c000 	ldr.w	ip, [r9]
 8006e2c:	0c3f      	lsrs	r7, r7, #16
 8006e2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e32:	fb0a c707 	mla	r7, sl, r7, ip
 8006e36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e40:	4572      	cmp	r2, lr
 8006e42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e46:	f849 3b04 	str.w	r3, [r9], #4
 8006e4a:	d8e3      	bhi.n	8006e14 <__multiply+0xb0>
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	f845 c003 	str.w	ip, [r5, r3]
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	3104      	adds	r1, #4
 8006e56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e5a:	f1b9 0f00 	cmp.w	r9, #0
 8006e5e:	d021      	beq.n	8006ea4 <__multiply+0x140>
 8006e60:	46ae      	mov	lr, r5
 8006e62:	f04f 0a00 	mov.w	sl, #0
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	f104 0c14 	add.w	ip, r4, #20
 8006e6c:	f8bc b000 	ldrh.w	fp, [ip]
 8006e70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	fb09 770b 	mla	r7, r9, fp, r7
 8006e7a:	4457      	add	r7, sl
 8006e7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e80:	f84e 3b04 	str.w	r3, [lr], #4
 8006e84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e8c:	f8be 3000 	ldrh.w	r3, [lr]
 8006e90:	4562      	cmp	r2, ip
 8006e92:	fb09 330a 	mla	r3, r9, sl, r3
 8006e96:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006e9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e9e:	d8e5      	bhi.n	8006e6c <__multiply+0x108>
 8006ea0:	9f01      	ldr	r7, [sp, #4]
 8006ea2:	51eb      	str	r3, [r5, r7]
 8006ea4:	3504      	adds	r5, #4
 8006ea6:	e79a      	b.n	8006dde <__multiply+0x7a>
 8006ea8:	3e01      	subs	r6, #1
 8006eaa:	e79c      	b.n	8006de6 <__multiply+0x82>
 8006eac:	0800a80b 	.word	0x0800a80b
 8006eb0:	0800a81c 	.word	0x0800a81c

08006eb4 <__pow5mult>:
 8006eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb8:	4615      	mov	r5, r2
 8006eba:	f012 0203 	ands.w	r2, r2, #3
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	460e      	mov	r6, r1
 8006ec2:	d007      	beq.n	8006ed4 <__pow5mult+0x20>
 8006ec4:	4c25      	ldr	r4, [pc, #148]	@ (8006f5c <__pow5mult+0xa8>)
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ece:	f7ff fe57 	bl	8006b80 <__multadd>
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	10ad      	asrs	r5, r5, #2
 8006ed6:	d03d      	beq.n	8006f54 <__pow5mult+0xa0>
 8006ed8:	69fc      	ldr	r4, [r7, #28]
 8006eda:	b97c      	cbnz	r4, 8006efc <__pow5mult+0x48>
 8006edc:	2010      	movs	r0, #16
 8006ede:	f7ff fd37 	bl	8006950 <malloc>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	61f8      	str	r0, [r7, #28]
 8006ee6:	b928      	cbnz	r0, 8006ef4 <__pow5mult+0x40>
 8006ee8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006eec:	4b1c      	ldr	r3, [pc, #112]	@ (8006f60 <__pow5mult+0xac>)
 8006eee:	481d      	ldr	r0, [pc, #116]	@ (8006f64 <__pow5mult+0xb0>)
 8006ef0:	f001 fd1c 	bl	800892c <__assert_func>
 8006ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef8:	6004      	str	r4, [r0, #0]
 8006efa:	60c4      	str	r4, [r0, #12]
 8006efc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f04:	b94c      	cbnz	r4, 8006f1a <__pow5mult+0x66>
 8006f06:	f240 2171 	movw	r1, #625	@ 0x271
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7ff ff14 	bl	8006d38 <__i2b>
 8006f10:	2300      	movs	r3, #0
 8006f12:	4604      	mov	r4, r0
 8006f14:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f18:	6003      	str	r3, [r0, #0]
 8006f1a:	f04f 0900 	mov.w	r9, #0
 8006f1e:	07eb      	lsls	r3, r5, #31
 8006f20:	d50a      	bpl.n	8006f38 <__pow5mult+0x84>
 8006f22:	4631      	mov	r1, r6
 8006f24:	4622      	mov	r2, r4
 8006f26:	4638      	mov	r0, r7
 8006f28:	f7ff ff1c 	bl	8006d64 <__multiply>
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff fe03 	bl	8006b3c <_Bfree>
 8006f36:	4646      	mov	r6, r8
 8006f38:	106d      	asrs	r5, r5, #1
 8006f3a:	d00b      	beq.n	8006f54 <__pow5mult+0xa0>
 8006f3c:	6820      	ldr	r0, [r4, #0]
 8006f3e:	b938      	cbnz	r0, 8006f50 <__pow5mult+0x9c>
 8006f40:	4622      	mov	r2, r4
 8006f42:	4621      	mov	r1, r4
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ff0d 	bl	8006d64 <__multiply>
 8006f4a:	6020      	str	r0, [r4, #0]
 8006f4c:	f8c0 9000 	str.w	r9, [r0]
 8006f50:	4604      	mov	r4, r0
 8006f52:	e7e4      	b.n	8006f1e <__pow5mult+0x6a>
 8006f54:	4630      	mov	r0, r6
 8006f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5a:	bf00      	nop
 8006f5c:	0800a878 	.word	0x0800a878
 8006f60:	0800a79c 	.word	0x0800a79c
 8006f64:	0800a81c 	.word	0x0800a81c

08006f68 <__lshift>:
 8006f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	4607      	mov	r7, r0
 8006f70:	4691      	mov	r9, r2
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	6849      	ldr	r1, [r1, #4]
 8006f76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f7a:	68a3      	ldr	r3, [r4, #8]
 8006f7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f80:	f108 0601 	add.w	r6, r8, #1
 8006f84:	42b3      	cmp	r3, r6
 8006f86:	db0b      	blt.n	8006fa0 <__lshift+0x38>
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff fd97 	bl	8006abc <_Balloc>
 8006f8e:	4605      	mov	r5, r0
 8006f90:	b948      	cbnz	r0, 8006fa6 <__lshift+0x3e>
 8006f92:	4602      	mov	r2, r0
 8006f94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f98:	4b27      	ldr	r3, [pc, #156]	@ (8007038 <__lshift+0xd0>)
 8006f9a:	4828      	ldr	r0, [pc, #160]	@ (800703c <__lshift+0xd4>)
 8006f9c:	f001 fcc6 	bl	800892c <__assert_func>
 8006fa0:	3101      	adds	r1, #1
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	e7ee      	b.n	8006f84 <__lshift+0x1c>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f100 0114 	add.w	r1, r0, #20
 8006fac:	f100 0210 	add.w	r2, r0, #16
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	4553      	cmp	r3, sl
 8006fb4:	db33      	blt.n	800701e <__lshift+0xb6>
 8006fb6:	6920      	ldr	r0, [r4, #16]
 8006fb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fbc:	f104 0314 	add.w	r3, r4, #20
 8006fc0:	f019 091f 	ands.w	r9, r9, #31
 8006fc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fcc:	d02b      	beq.n	8007026 <__lshift+0xbe>
 8006fce:	468a      	mov	sl, r1
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f1c9 0e20 	rsb	lr, r9, #32
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	fa00 f009 	lsl.w	r0, r0, r9
 8006fdc:	4310      	orrs	r0, r2
 8006fde:	f84a 0b04 	str.w	r0, [sl], #4
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	459c      	cmp	ip, r3
 8006fe8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fec:	d8f3      	bhi.n	8006fd6 <__lshift+0x6e>
 8006fee:	ebac 0304 	sub.w	r3, ip, r4
 8006ff2:	3b15      	subs	r3, #21
 8006ff4:	f023 0303 	bic.w	r3, r3, #3
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	f104 0015 	add.w	r0, r4, #21
 8006ffe:	4584      	cmp	ip, r0
 8007000:	bf38      	it	cc
 8007002:	2304      	movcc	r3, #4
 8007004:	50ca      	str	r2, [r1, r3]
 8007006:	b10a      	cbz	r2, 800700c <__lshift+0xa4>
 8007008:	f108 0602 	add.w	r6, r8, #2
 800700c:	3e01      	subs	r6, #1
 800700e:	4638      	mov	r0, r7
 8007010:	4621      	mov	r1, r4
 8007012:	612e      	str	r6, [r5, #16]
 8007014:	f7ff fd92 	bl	8006b3c <_Bfree>
 8007018:	4628      	mov	r0, r5
 800701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007022:	3301      	adds	r3, #1
 8007024:	e7c5      	b.n	8006fb2 <__lshift+0x4a>
 8007026:	3904      	subs	r1, #4
 8007028:	f853 2b04 	ldr.w	r2, [r3], #4
 800702c:	459c      	cmp	ip, r3
 800702e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007032:	d8f9      	bhi.n	8007028 <__lshift+0xc0>
 8007034:	e7ea      	b.n	800700c <__lshift+0xa4>
 8007036:	bf00      	nop
 8007038:	0800a80b 	.word	0x0800a80b
 800703c:	0800a81c 	.word	0x0800a81c

08007040 <__mcmp>:
 8007040:	4603      	mov	r3, r0
 8007042:	690a      	ldr	r2, [r1, #16]
 8007044:	6900      	ldr	r0, [r0, #16]
 8007046:	b530      	push	{r4, r5, lr}
 8007048:	1a80      	subs	r0, r0, r2
 800704a:	d10e      	bne.n	800706a <__mcmp+0x2a>
 800704c:	3314      	adds	r3, #20
 800704e:	3114      	adds	r1, #20
 8007050:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007054:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007058:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800705c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007060:	4295      	cmp	r5, r2
 8007062:	d003      	beq.n	800706c <__mcmp+0x2c>
 8007064:	d205      	bcs.n	8007072 <__mcmp+0x32>
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	bd30      	pop	{r4, r5, pc}
 800706c:	42a3      	cmp	r3, r4
 800706e:	d3f3      	bcc.n	8007058 <__mcmp+0x18>
 8007070:	e7fb      	b.n	800706a <__mcmp+0x2a>
 8007072:	2001      	movs	r0, #1
 8007074:	e7f9      	b.n	800706a <__mcmp+0x2a>
	...

08007078 <__mdiff>:
 8007078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4689      	mov	r9, r1
 800707e:	4606      	mov	r6, r0
 8007080:	4611      	mov	r1, r2
 8007082:	4648      	mov	r0, r9
 8007084:	4614      	mov	r4, r2
 8007086:	f7ff ffdb 	bl	8007040 <__mcmp>
 800708a:	1e05      	subs	r5, r0, #0
 800708c:	d112      	bne.n	80070b4 <__mdiff+0x3c>
 800708e:	4629      	mov	r1, r5
 8007090:	4630      	mov	r0, r6
 8007092:	f7ff fd13 	bl	8006abc <_Balloc>
 8007096:	4602      	mov	r2, r0
 8007098:	b928      	cbnz	r0, 80070a6 <__mdiff+0x2e>
 800709a:	f240 2137 	movw	r1, #567	@ 0x237
 800709e:	4b3e      	ldr	r3, [pc, #248]	@ (8007198 <__mdiff+0x120>)
 80070a0:	483e      	ldr	r0, [pc, #248]	@ (800719c <__mdiff+0x124>)
 80070a2:	f001 fc43 	bl	800892c <__assert_func>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070ac:	4610      	mov	r0, r2
 80070ae:	b003      	add	sp, #12
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	bfbc      	itt	lt
 80070b6:	464b      	movlt	r3, r9
 80070b8:	46a1      	movlt	r9, r4
 80070ba:	4630      	mov	r0, r6
 80070bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070c0:	bfba      	itte	lt
 80070c2:	461c      	movlt	r4, r3
 80070c4:	2501      	movlt	r5, #1
 80070c6:	2500      	movge	r5, #0
 80070c8:	f7ff fcf8 	bl	8006abc <_Balloc>
 80070cc:	4602      	mov	r2, r0
 80070ce:	b918      	cbnz	r0, 80070d8 <__mdiff+0x60>
 80070d0:	f240 2145 	movw	r1, #581	@ 0x245
 80070d4:	4b30      	ldr	r3, [pc, #192]	@ (8007198 <__mdiff+0x120>)
 80070d6:	e7e3      	b.n	80070a0 <__mdiff+0x28>
 80070d8:	f100 0b14 	add.w	fp, r0, #20
 80070dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070e0:	f109 0310 	add.w	r3, r9, #16
 80070e4:	60c5      	str	r5, [r0, #12]
 80070e6:	f04f 0c00 	mov.w	ip, #0
 80070ea:	f109 0514 	add.w	r5, r9, #20
 80070ee:	46d9      	mov	r9, fp
 80070f0:	6926      	ldr	r6, [r4, #16]
 80070f2:	f104 0e14 	add.w	lr, r4, #20
 80070f6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070fa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007106:	f853 af04 	ldr.w	sl, [r3, #4]!
 800710a:	b281      	uxth	r1, r0
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	fa1f f38a 	uxth.w	r3, sl
 8007112:	1a5b      	subs	r3, r3, r1
 8007114:	0c00      	lsrs	r0, r0, #16
 8007116:	4463      	add	r3, ip
 8007118:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800711c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007126:	4576      	cmp	r6, lr
 8007128:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800712c:	f849 3b04 	str.w	r3, [r9], #4
 8007130:	d8e6      	bhi.n	8007100 <__mdiff+0x88>
 8007132:	1b33      	subs	r3, r6, r4
 8007134:	3b15      	subs	r3, #21
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	3415      	adds	r4, #21
 800713c:	3304      	adds	r3, #4
 800713e:	42a6      	cmp	r6, r4
 8007140:	bf38      	it	cc
 8007142:	2304      	movcc	r3, #4
 8007144:	441d      	add	r5, r3
 8007146:	445b      	add	r3, fp
 8007148:	461e      	mov	r6, r3
 800714a:	462c      	mov	r4, r5
 800714c:	4544      	cmp	r4, r8
 800714e:	d30e      	bcc.n	800716e <__mdiff+0xf6>
 8007150:	f108 0103 	add.w	r1, r8, #3
 8007154:	1b49      	subs	r1, r1, r5
 8007156:	f021 0103 	bic.w	r1, r1, #3
 800715a:	3d03      	subs	r5, #3
 800715c:	45a8      	cmp	r8, r5
 800715e:	bf38      	it	cc
 8007160:	2100      	movcc	r1, #0
 8007162:	440b      	add	r3, r1
 8007164:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007168:	b199      	cbz	r1, 8007192 <__mdiff+0x11a>
 800716a:	6117      	str	r7, [r2, #16]
 800716c:	e79e      	b.n	80070ac <__mdiff+0x34>
 800716e:	46e6      	mov	lr, ip
 8007170:	f854 1b04 	ldr.w	r1, [r4], #4
 8007174:	fa1f fc81 	uxth.w	ip, r1
 8007178:	44f4      	add	ip, lr
 800717a:	0c08      	lsrs	r0, r1, #16
 800717c:	4471      	add	r1, lr
 800717e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007182:	b289      	uxth	r1, r1
 8007184:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007188:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800718c:	f846 1b04 	str.w	r1, [r6], #4
 8007190:	e7dc      	b.n	800714c <__mdiff+0xd4>
 8007192:	3f01      	subs	r7, #1
 8007194:	e7e6      	b.n	8007164 <__mdiff+0xec>
 8007196:	bf00      	nop
 8007198:	0800a80b 	.word	0x0800a80b
 800719c:	0800a81c 	.word	0x0800a81c

080071a0 <__ulp>:
 80071a0:	4b0e      	ldr	r3, [pc, #56]	@ (80071dc <__ulp+0x3c>)
 80071a2:	400b      	ands	r3, r1
 80071a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dc08      	bgt.n	80071be <__ulp+0x1e>
 80071ac:	425b      	negs	r3, r3
 80071ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80071b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071b6:	da04      	bge.n	80071c2 <__ulp+0x22>
 80071b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80071bc:	4113      	asrs	r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	e008      	b.n	80071d4 <__ulp+0x34>
 80071c2:	f1a2 0314 	sub.w	r3, r2, #20
 80071c6:	2b1e      	cmp	r3, #30
 80071c8:	bfd6      	itet	le
 80071ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80071ce:	2201      	movgt	r2, #1
 80071d0:	40da      	lsrle	r2, r3
 80071d2:	2300      	movs	r3, #0
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	7ff00000 	.word	0x7ff00000

080071e0 <__b2d>:
 80071e0:	6902      	ldr	r2, [r0, #16]
 80071e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e4:	f100 0614 	add.w	r6, r0, #20
 80071e8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80071ec:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80071f0:	4f1e      	ldr	r7, [pc, #120]	@ (800726c <__b2d+0x8c>)
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7ff fd54 	bl	8006ca0 <__hi0bits>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f1c0 0020 	rsb	r0, r0, #32
 80071fe:	2b0a      	cmp	r3, #10
 8007200:	f1a2 0504 	sub.w	r5, r2, #4
 8007204:	6008      	str	r0, [r1, #0]
 8007206:	dc12      	bgt.n	800722e <__b2d+0x4e>
 8007208:	42ae      	cmp	r6, r5
 800720a:	bf2c      	ite	cs
 800720c:	2200      	movcs	r2, #0
 800720e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007212:	f1c3 0c0b 	rsb	ip, r3, #11
 8007216:	3315      	adds	r3, #21
 8007218:	fa24 fe0c 	lsr.w	lr, r4, ip
 800721c:	fa04 f303 	lsl.w	r3, r4, r3
 8007220:	fa22 f20c 	lsr.w	r2, r2, ip
 8007224:	ea4e 0107 	orr.w	r1, lr, r7
 8007228:	431a      	orrs	r2, r3
 800722a:	4610      	mov	r0, r2
 800722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800722e:	42ae      	cmp	r6, r5
 8007230:	bf36      	itet	cc
 8007232:	f1a2 0508 	subcc.w	r5, r2, #8
 8007236:	2200      	movcs	r2, #0
 8007238:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800723c:	3b0b      	subs	r3, #11
 800723e:	d012      	beq.n	8007266 <__b2d+0x86>
 8007240:	f1c3 0720 	rsb	r7, r3, #32
 8007244:	fa22 f107 	lsr.w	r1, r2, r7
 8007248:	409c      	lsls	r4, r3
 800724a:	430c      	orrs	r4, r1
 800724c:	42b5      	cmp	r5, r6
 800724e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007252:	bf94      	ite	ls
 8007254:	2400      	movls	r4, #0
 8007256:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800725a:	409a      	lsls	r2, r3
 800725c:	40fc      	lsrs	r4, r7
 800725e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007262:	4322      	orrs	r2, r4
 8007264:	e7e1      	b.n	800722a <__b2d+0x4a>
 8007266:	ea44 0107 	orr.w	r1, r4, r7
 800726a:	e7de      	b.n	800722a <__b2d+0x4a>
 800726c:	3ff00000 	.word	0x3ff00000

08007270 <__d2b>:
 8007270:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007274:	2101      	movs	r1, #1
 8007276:	4690      	mov	r8, r2
 8007278:	4699      	mov	r9, r3
 800727a:	9e08      	ldr	r6, [sp, #32]
 800727c:	f7ff fc1e 	bl	8006abc <_Balloc>
 8007280:	4604      	mov	r4, r0
 8007282:	b930      	cbnz	r0, 8007292 <__d2b+0x22>
 8007284:	4602      	mov	r2, r0
 8007286:	f240 310f 	movw	r1, #783	@ 0x30f
 800728a:	4b23      	ldr	r3, [pc, #140]	@ (8007318 <__d2b+0xa8>)
 800728c:	4823      	ldr	r0, [pc, #140]	@ (800731c <__d2b+0xac>)
 800728e:	f001 fb4d 	bl	800892c <__assert_func>
 8007292:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007296:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800729a:	b10d      	cbz	r5, 80072a0 <__d2b+0x30>
 800729c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	f1b8 0300 	subs.w	r3, r8, #0
 80072a6:	d024      	beq.n	80072f2 <__d2b+0x82>
 80072a8:	4668      	mov	r0, sp
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	f7ff fd17 	bl	8006cde <__lo0bits>
 80072b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072b4:	b1d8      	cbz	r0, 80072ee <__d2b+0x7e>
 80072b6:	f1c0 0320 	rsb	r3, r0, #32
 80072ba:	fa02 f303 	lsl.w	r3, r2, r3
 80072be:	430b      	orrs	r3, r1
 80072c0:	40c2      	lsrs	r2, r0
 80072c2:	6163      	str	r3, [r4, #20]
 80072c4:	9201      	str	r2, [sp, #4]
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bf0c      	ite	eq
 80072cc:	2201      	moveq	r2, #1
 80072ce:	2202      	movne	r2, #2
 80072d0:	61a3      	str	r3, [r4, #24]
 80072d2:	6122      	str	r2, [r4, #16]
 80072d4:	b1ad      	cbz	r5, 8007302 <__d2b+0x92>
 80072d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072da:	4405      	add	r5, r0
 80072dc:	6035      	str	r5, [r6, #0]
 80072de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e4:	6018      	str	r0, [r3, #0]
 80072e6:	4620      	mov	r0, r4
 80072e8:	b002      	add	sp, #8
 80072ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80072ee:	6161      	str	r1, [r4, #20]
 80072f0:	e7e9      	b.n	80072c6 <__d2b+0x56>
 80072f2:	a801      	add	r0, sp, #4
 80072f4:	f7ff fcf3 	bl	8006cde <__lo0bits>
 80072f8:	9b01      	ldr	r3, [sp, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	6163      	str	r3, [r4, #20]
 80072fe:	3020      	adds	r0, #32
 8007300:	e7e7      	b.n	80072d2 <__d2b+0x62>
 8007302:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007306:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800730a:	6030      	str	r0, [r6, #0]
 800730c:	6918      	ldr	r0, [r3, #16]
 800730e:	f7ff fcc7 	bl	8006ca0 <__hi0bits>
 8007312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007316:	e7e4      	b.n	80072e2 <__d2b+0x72>
 8007318:	0800a80b 	.word	0x0800a80b
 800731c:	0800a81c 	.word	0x0800a81c

08007320 <__ratio>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	b085      	sub	sp, #20
 8007326:	e9cd 1000 	strd	r1, r0, [sp]
 800732a:	a902      	add	r1, sp, #8
 800732c:	f7ff ff58 	bl	80071e0 <__b2d>
 8007330:	468b      	mov	fp, r1
 8007332:	4606      	mov	r6, r0
 8007334:	460f      	mov	r7, r1
 8007336:	9800      	ldr	r0, [sp, #0]
 8007338:	a903      	add	r1, sp, #12
 800733a:	f7ff ff51 	bl	80071e0 <__b2d>
 800733e:	460d      	mov	r5, r1
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	4689      	mov	r9, r1
 8007344:	6919      	ldr	r1, [r3, #16]
 8007346:	9b00      	ldr	r3, [sp, #0]
 8007348:	4604      	mov	r4, r0
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	4630      	mov	r0, r6
 800734e:	1ac9      	subs	r1, r1, r3
 8007350:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfcd      	iteet	gt
 800735e:	463a      	movgt	r2, r7
 8007360:	462a      	movle	r2, r5
 8007362:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007366:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800736a:	bfd8      	it	le
 800736c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007370:	464b      	mov	r3, r9
 8007372:	4622      	mov	r2, r4
 8007374:	4659      	mov	r1, fp
 8007376:	f7f9 f9d9 	bl	800072c <__aeabi_ddiv>
 800737a:	b005      	add	sp, #20
 800737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007380 <__copybits>:
 8007380:	3901      	subs	r1, #1
 8007382:	b570      	push	{r4, r5, r6, lr}
 8007384:	1149      	asrs	r1, r1, #5
 8007386:	6914      	ldr	r4, [r2, #16]
 8007388:	3101      	adds	r1, #1
 800738a:	f102 0314 	add.w	r3, r2, #20
 800738e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007392:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007396:	1f05      	subs	r5, r0, #4
 8007398:	42a3      	cmp	r3, r4
 800739a:	d30c      	bcc.n	80073b6 <__copybits+0x36>
 800739c:	1aa3      	subs	r3, r4, r2
 800739e:	3b11      	subs	r3, #17
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	3211      	adds	r2, #17
 80073a6:	42a2      	cmp	r2, r4
 80073a8:	bf88      	it	hi
 80073aa:	2300      	movhi	r3, #0
 80073ac:	4418      	add	r0, r3
 80073ae:	2300      	movs	r3, #0
 80073b0:	4288      	cmp	r0, r1
 80073b2:	d305      	bcc.n	80073c0 <__copybits+0x40>
 80073b4:	bd70      	pop	{r4, r5, r6, pc}
 80073b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80073ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80073be:	e7eb      	b.n	8007398 <__copybits+0x18>
 80073c0:	f840 3b04 	str.w	r3, [r0], #4
 80073c4:	e7f4      	b.n	80073b0 <__copybits+0x30>

080073c6 <__any_on>:
 80073c6:	f100 0214 	add.w	r2, r0, #20
 80073ca:	6900      	ldr	r0, [r0, #16]
 80073cc:	114b      	asrs	r3, r1, #5
 80073ce:	4298      	cmp	r0, r3
 80073d0:	b510      	push	{r4, lr}
 80073d2:	db11      	blt.n	80073f8 <__any_on+0x32>
 80073d4:	dd0a      	ble.n	80073ec <__any_on+0x26>
 80073d6:	f011 011f 	ands.w	r1, r1, #31
 80073da:	d007      	beq.n	80073ec <__any_on+0x26>
 80073dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073e0:	fa24 f001 	lsr.w	r0, r4, r1
 80073e4:	fa00 f101 	lsl.w	r1, r0, r1
 80073e8:	428c      	cmp	r4, r1
 80073ea:	d10b      	bne.n	8007404 <__any_on+0x3e>
 80073ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d803      	bhi.n	80073fc <__any_on+0x36>
 80073f4:	2000      	movs	r0, #0
 80073f6:	bd10      	pop	{r4, pc}
 80073f8:	4603      	mov	r3, r0
 80073fa:	e7f7      	b.n	80073ec <__any_on+0x26>
 80073fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007400:	2900      	cmp	r1, #0
 8007402:	d0f5      	beq.n	80073f0 <__any_on+0x2a>
 8007404:	2001      	movs	r0, #1
 8007406:	e7f6      	b.n	80073f6 <__any_on+0x30>

08007408 <sulp>:
 8007408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740c:	460f      	mov	r7, r1
 800740e:	4690      	mov	r8, r2
 8007410:	f7ff fec6 	bl	80071a0 <__ulp>
 8007414:	4604      	mov	r4, r0
 8007416:	460d      	mov	r5, r1
 8007418:	f1b8 0f00 	cmp.w	r8, #0
 800741c:	d011      	beq.n	8007442 <sulp+0x3a>
 800741e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007422:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd0b      	ble.n	8007442 <sulp+0x3a>
 800742a:	2400      	movs	r4, #0
 800742c:	051b      	lsls	r3, r3, #20
 800742e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007432:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007436:	4622      	mov	r2, r4
 8007438:	462b      	mov	r3, r5
 800743a:	f7f9 f84d 	bl	80004d8 <__aeabi_dmul>
 800743e:	4604      	mov	r4, r0
 8007440:	460d      	mov	r5, r1
 8007442:	4620      	mov	r0, r4
 8007444:	4629      	mov	r1, r5
 8007446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744a:	0000      	movs	r0, r0
 800744c:	0000      	movs	r0, r0
	...

08007450 <_strtod_l>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	b09f      	sub	sp, #124	@ 0x7c
 8007456:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007458:	2200      	movs	r2, #0
 800745a:	460c      	mov	r4, r1
 800745c:	921a      	str	r2, [sp, #104]	@ 0x68
 800745e:	f04f 0a00 	mov.w	sl, #0
 8007462:	f04f 0b00 	mov.w	fp, #0
 8007466:	460a      	mov	r2, r1
 8007468:	9005      	str	r0, [sp, #20]
 800746a:	9219      	str	r2, [sp, #100]	@ 0x64
 800746c:	7811      	ldrb	r1, [r2, #0]
 800746e:	292b      	cmp	r1, #43	@ 0x2b
 8007470:	d048      	beq.n	8007504 <_strtod_l+0xb4>
 8007472:	d836      	bhi.n	80074e2 <_strtod_l+0x92>
 8007474:	290d      	cmp	r1, #13
 8007476:	d830      	bhi.n	80074da <_strtod_l+0x8a>
 8007478:	2908      	cmp	r1, #8
 800747a:	d830      	bhi.n	80074de <_strtod_l+0x8e>
 800747c:	2900      	cmp	r1, #0
 800747e:	d039      	beq.n	80074f4 <_strtod_l+0xa4>
 8007480:	2200      	movs	r2, #0
 8007482:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007486:	782a      	ldrb	r2, [r5, #0]
 8007488:	2a30      	cmp	r2, #48	@ 0x30
 800748a:	f040 80b1 	bne.w	80075f0 <_strtod_l+0x1a0>
 800748e:	786a      	ldrb	r2, [r5, #1]
 8007490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007494:	2a58      	cmp	r2, #88	@ 0x58
 8007496:	d16c      	bne.n	8007572 <_strtod_l+0x122>
 8007498:	9302      	str	r3, [sp, #8]
 800749a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800749c:	4a8e      	ldr	r2, [pc, #568]	@ (80076d8 <_strtod_l+0x288>)
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	ab1a      	add	r3, sp, #104	@ 0x68
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80074a8:	a919      	add	r1, sp, #100	@ 0x64
 80074aa:	f001 fad9 	bl	8008a60 <__gethex>
 80074ae:	f010 060f 	ands.w	r6, r0, #15
 80074b2:	4604      	mov	r4, r0
 80074b4:	d005      	beq.n	80074c2 <_strtod_l+0x72>
 80074b6:	2e06      	cmp	r6, #6
 80074b8:	d126      	bne.n	8007508 <_strtod_l+0xb8>
 80074ba:	2300      	movs	r3, #0
 80074bc:	3501      	adds	r5, #1
 80074be:	9519      	str	r5, [sp, #100]	@ 0x64
 80074c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f040 8584 	bne.w	8007fd2 <_strtod_l+0xb82>
 80074ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074cc:	b1bb      	cbz	r3, 80074fe <_strtod_l+0xae>
 80074ce:	4650      	mov	r0, sl
 80074d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80074d4:	b01f      	add	sp, #124	@ 0x7c
 80074d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074da:	2920      	cmp	r1, #32
 80074dc:	d1d0      	bne.n	8007480 <_strtod_l+0x30>
 80074de:	3201      	adds	r2, #1
 80074e0:	e7c3      	b.n	800746a <_strtod_l+0x1a>
 80074e2:	292d      	cmp	r1, #45	@ 0x2d
 80074e4:	d1cc      	bne.n	8007480 <_strtod_l+0x30>
 80074e6:	2101      	movs	r1, #1
 80074e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80074ea:	1c51      	adds	r1, r2, #1
 80074ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80074ee:	7852      	ldrb	r2, [r2, #1]
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d1c7      	bne.n	8007484 <_strtod_l+0x34>
 80074f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074f6:	9419      	str	r4, [sp, #100]	@ 0x64
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f040 8568 	bne.w	8007fce <_strtod_l+0xb7e>
 80074fe:	4650      	mov	r0, sl
 8007500:	4659      	mov	r1, fp
 8007502:	e7e7      	b.n	80074d4 <_strtod_l+0x84>
 8007504:	2100      	movs	r1, #0
 8007506:	e7ef      	b.n	80074e8 <_strtod_l+0x98>
 8007508:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800750a:	b13a      	cbz	r2, 800751c <_strtod_l+0xcc>
 800750c:	2135      	movs	r1, #53	@ 0x35
 800750e:	a81c      	add	r0, sp, #112	@ 0x70
 8007510:	f7ff ff36 	bl	8007380 <__copybits>
 8007514:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007516:	9805      	ldr	r0, [sp, #20]
 8007518:	f7ff fb10 	bl	8006b3c <_Bfree>
 800751c:	3e01      	subs	r6, #1
 800751e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007520:	2e04      	cmp	r6, #4
 8007522:	d806      	bhi.n	8007532 <_strtod_l+0xe2>
 8007524:	e8df f006 	tbb	[pc, r6]
 8007528:	201d0314 	.word	0x201d0314
 800752c:	14          	.byte	0x14
 800752d:	00          	.byte	0x00
 800752e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007532:	05e1      	lsls	r1, r4, #23
 8007534:	bf48      	it	mi
 8007536:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800753a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800753e:	0d1b      	lsrs	r3, r3, #20
 8007540:	051b      	lsls	r3, r3, #20
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1bd      	bne.n	80074c2 <_strtod_l+0x72>
 8007546:	f7fe fb29 	bl	8005b9c <__errno>
 800754a:	2322      	movs	r3, #34	@ 0x22
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	e7b8      	b.n	80074c2 <_strtod_l+0x72>
 8007550:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007558:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800755c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007560:	e7e7      	b.n	8007532 <_strtod_l+0xe2>
 8007562:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80076dc <_strtod_l+0x28c>
 8007566:	e7e4      	b.n	8007532 <_strtod_l+0xe2>
 8007568:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800756c:	f04f 3aff 	mov.w	sl, #4294967295
 8007570:	e7df      	b.n	8007532 <_strtod_l+0xe2>
 8007572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	9219      	str	r2, [sp, #100]	@ 0x64
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	2b30      	cmp	r3, #48	@ 0x30
 800757c:	d0f9      	beq.n	8007572 <_strtod_l+0x122>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d09f      	beq.n	80074c2 <_strtod_l+0x72>
 8007582:	2301      	movs	r3, #1
 8007584:	9309      	str	r3, [sp, #36]	@ 0x24
 8007586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007588:	220a      	movs	r2, #10
 800758a:	930c      	str	r3, [sp, #48]	@ 0x30
 800758c:	2300      	movs	r3, #0
 800758e:	461f      	mov	r7, r3
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	930a      	str	r3, [sp, #40]	@ 0x28
 8007594:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007596:	7805      	ldrb	r5, [r0, #0]
 8007598:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800759c:	b2d9      	uxtb	r1, r3
 800759e:	2909      	cmp	r1, #9
 80075a0:	d928      	bls.n	80075f4 <_strtod_l+0x1a4>
 80075a2:	2201      	movs	r2, #1
 80075a4:	494e      	ldr	r1, [pc, #312]	@ (80076e0 <_strtod_l+0x290>)
 80075a6:	f001 f968 	bl	800887a <strncmp>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d032      	beq.n	8007614 <_strtod_l+0x1c4>
 80075ae:	2000      	movs	r0, #0
 80075b0:	462a      	mov	r2, r5
 80075b2:	4681      	mov	r9, r0
 80075b4:	463d      	mov	r5, r7
 80075b6:	4603      	mov	r3, r0
 80075b8:	2a65      	cmp	r2, #101	@ 0x65
 80075ba:	d001      	beq.n	80075c0 <_strtod_l+0x170>
 80075bc:	2a45      	cmp	r2, #69	@ 0x45
 80075be:	d114      	bne.n	80075ea <_strtod_l+0x19a>
 80075c0:	b91d      	cbnz	r5, 80075ca <_strtod_l+0x17a>
 80075c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075c4:	4302      	orrs	r2, r0
 80075c6:	d095      	beq.n	80074f4 <_strtod_l+0xa4>
 80075c8:	2500      	movs	r5, #0
 80075ca:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80075cc:	1c62      	adds	r2, r4, #1
 80075ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80075d0:	7862      	ldrb	r2, [r4, #1]
 80075d2:	2a2b      	cmp	r2, #43	@ 0x2b
 80075d4:	d077      	beq.n	80076c6 <_strtod_l+0x276>
 80075d6:	2a2d      	cmp	r2, #45	@ 0x2d
 80075d8:	d07b      	beq.n	80076d2 <_strtod_l+0x282>
 80075da:	f04f 0c00 	mov.w	ip, #0
 80075de:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80075e2:	2909      	cmp	r1, #9
 80075e4:	f240 8082 	bls.w	80076ec <_strtod_l+0x29c>
 80075e8:	9419      	str	r4, [sp, #100]	@ 0x64
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	e0a2      	b.n	8007736 <_strtod_l+0x2e6>
 80075f0:	2300      	movs	r3, #0
 80075f2:	e7c7      	b.n	8007584 <_strtod_l+0x134>
 80075f4:	2f08      	cmp	r7, #8
 80075f6:	bfd5      	itete	le
 80075f8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80075fa:	9908      	ldrgt	r1, [sp, #32]
 80075fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007600:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007604:	f100 0001 	add.w	r0, r0, #1
 8007608:	bfd4      	ite	le
 800760a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800760c:	9308      	strgt	r3, [sp, #32]
 800760e:	3701      	adds	r7, #1
 8007610:	9019      	str	r0, [sp, #100]	@ 0x64
 8007612:	e7bf      	b.n	8007594 <_strtod_l+0x144>
 8007614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	9219      	str	r2, [sp, #100]	@ 0x64
 800761a:	785a      	ldrb	r2, [r3, #1]
 800761c:	b37f      	cbz	r7, 800767e <_strtod_l+0x22e>
 800761e:	4681      	mov	r9, r0
 8007620:	463d      	mov	r5, r7
 8007622:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007626:	2b09      	cmp	r3, #9
 8007628:	d912      	bls.n	8007650 <_strtod_l+0x200>
 800762a:	2301      	movs	r3, #1
 800762c:	e7c4      	b.n	80075b8 <_strtod_l+0x168>
 800762e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007630:	3001      	adds	r0, #1
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	9219      	str	r2, [sp, #100]	@ 0x64
 8007636:	785a      	ldrb	r2, [r3, #1]
 8007638:	2a30      	cmp	r2, #48	@ 0x30
 800763a:	d0f8      	beq.n	800762e <_strtod_l+0x1de>
 800763c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007640:	2b08      	cmp	r3, #8
 8007642:	f200 84cb 	bhi.w	8007fdc <_strtod_l+0xb8c>
 8007646:	4681      	mov	r9, r0
 8007648:	2000      	movs	r0, #0
 800764a:	4605      	mov	r5, r0
 800764c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800764e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007650:	3a30      	subs	r2, #48	@ 0x30
 8007652:	f100 0301 	add.w	r3, r0, #1
 8007656:	d02a      	beq.n	80076ae <_strtod_l+0x25e>
 8007658:	4499      	add	r9, r3
 800765a:	210a      	movs	r1, #10
 800765c:	462b      	mov	r3, r5
 800765e:	eb00 0c05 	add.w	ip, r0, r5
 8007662:	4563      	cmp	r3, ip
 8007664:	d10d      	bne.n	8007682 <_strtod_l+0x232>
 8007666:	1c69      	adds	r1, r5, #1
 8007668:	4401      	add	r1, r0
 800766a:	4428      	add	r0, r5
 800766c:	2808      	cmp	r0, #8
 800766e:	dc16      	bgt.n	800769e <_strtod_l+0x24e>
 8007670:	230a      	movs	r3, #10
 8007672:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007674:	fb03 2300 	mla	r3, r3, r0, r2
 8007678:	930a      	str	r3, [sp, #40]	@ 0x28
 800767a:	2300      	movs	r3, #0
 800767c:	e018      	b.n	80076b0 <_strtod_l+0x260>
 800767e:	4638      	mov	r0, r7
 8007680:	e7da      	b.n	8007638 <_strtod_l+0x1e8>
 8007682:	2b08      	cmp	r3, #8
 8007684:	f103 0301 	add.w	r3, r3, #1
 8007688:	dc03      	bgt.n	8007692 <_strtod_l+0x242>
 800768a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800768c:	434e      	muls	r6, r1
 800768e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007690:	e7e7      	b.n	8007662 <_strtod_l+0x212>
 8007692:	2b10      	cmp	r3, #16
 8007694:	bfde      	ittt	le
 8007696:	9e08      	ldrle	r6, [sp, #32]
 8007698:	434e      	mulle	r6, r1
 800769a:	9608      	strle	r6, [sp, #32]
 800769c:	e7e1      	b.n	8007662 <_strtod_l+0x212>
 800769e:	280f      	cmp	r0, #15
 80076a0:	dceb      	bgt.n	800767a <_strtod_l+0x22a>
 80076a2:	230a      	movs	r3, #10
 80076a4:	9808      	ldr	r0, [sp, #32]
 80076a6:	fb03 2300 	mla	r3, r3, r0, r2
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	e7e5      	b.n	800767a <_strtod_l+0x22a>
 80076ae:	4629      	mov	r1, r5
 80076b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076b2:	460d      	mov	r5, r1
 80076b4:	1c50      	adds	r0, r2, #1
 80076b6:	9019      	str	r0, [sp, #100]	@ 0x64
 80076b8:	7852      	ldrb	r2, [r2, #1]
 80076ba:	4618      	mov	r0, r3
 80076bc:	e7b1      	b.n	8007622 <_strtod_l+0x1d2>
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	2301      	movs	r3, #1
 80076c4:	e77d      	b.n	80075c2 <_strtod_l+0x172>
 80076c6:	f04f 0c00 	mov.w	ip, #0
 80076ca:	1ca2      	adds	r2, r4, #2
 80076cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80076ce:	78a2      	ldrb	r2, [r4, #2]
 80076d0:	e785      	b.n	80075de <_strtod_l+0x18e>
 80076d2:	f04f 0c01 	mov.w	ip, #1
 80076d6:	e7f8      	b.n	80076ca <_strtod_l+0x27a>
 80076d8:	0800a990 	.word	0x0800a990
 80076dc:	7ff00000 	.word	0x7ff00000
 80076e0:	0800a978 	.word	0x0800a978
 80076e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076e6:	1c51      	adds	r1, r2, #1
 80076e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80076ea:	7852      	ldrb	r2, [r2, #1]
 80076ec:	2a30      	cmp	r2, #48	@ 0x30
 80076ee:	d0f9      	beq.n	80076e4 <_strtod_l+0x294>
 80076f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80076f4:	2908      	cmp	r1, #8
 80076f6:	f63f af78 	bhi.w	80075ea <_strtod_l+0x19a>
 80076fa:	f04f 080a 	mov.w	r8, #10
 80076fe:	3a30      	subs	r2, #48	@ 0x30
 8007700:	920e      	str	r2, [sp, #56]	@ 0x38
 8007702:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007704:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007706:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007708:	1c56      	adds	r6, r2, #1
 800770a:	9619      	str	r6, [sp, #100]	@ 0x64
 800770c:	7852      	ldrb	r2, [r2, #1]
 800770e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007712:	f1be 0f09 	cmp.w	lr, #9
 8007716:	d939      	bls.n	800778c <_strtod_l+0x33c>
 8007718:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800771a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800771e:	1a76      	subs	r6, r6, r1
 8007720:	2e08      	cmp	r6, #8
 8007722:	dc03      	bgt.n	800772c <_strtod_l+0x2dc>
 8007724:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007726:	4588      	cmp	r8, r1
 8007728:	bfa8      	it	ge
 800772a:	4688      	movge	r8, r1
 800772c:	f1bc 0f00 	cmp.w	ip, #0
 8007730:	d001      	beq.n	8007736 <_strtod_l+0x2e6>
 8007732:	f1c8 0800 	rsb	r8, r8, #0
 8007736:	2d00      	cmp	r5, #0
 8007738:	d14e      	bne.n	80077d8 <_strtod_l+0x388>
 800773a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800773c:	4308      	orrs	r0, r1
 800773e:	f47f aec0 	bne.w	80074c2 <_strtod_l+0x72>
 8007742:	2b00      	cmp	r3, #0
 8007744:	f47f aed6 	bne.w	80074f4 <_strtod_l+0xa4>
 8007748:	2a69      	cmp	r2, #105	@ 0x69
 800774a:	d028      	beq.n	800779e <_strtod_l+0x34e>
 800774c:	dc25      	bgt.n	800779a <_strtod_l+0x34a>
 800774e:	2a49      	cmp	r2, #73	@ 0x49
 8007750:	d025      	beq.n	800779e <_strtod_l+0x34e>
 8007752:	2a4e      	cmp	r2, #78	@ 0x4e
 8007754:	f47f aece 	bne.w	80074f4 <_strtod_l+0xa4>
 8007758:	499a      	ldr	r1, [pc, #616]	@ (80079c4 <_strtod_l+0x574>)
 800775a:	a819      	add	r0, sp, #100	@ 0x64
 800775c:	f001 fba2 	bl	8008ea4 <__match>
 8007760:	2800      	cmp	r0, #0
 8007762:	f43f aec7 	beq.w	80074f4 <_strtod_l+0xa4>
 8007766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b28      	cmp	r3, #40	@ 0x28
 800776c:	d12e      	bne.n	80077cc <_strtod_l+0x37c>
 800776e:	4996      	ldr	r1, [pc, #600]	@ (80079c8 <_strtod_l+0x578>)
 8007770:	aa1c      	add	r2, sp, #112	@ 0x70
 8007772:	a819      	add	r0, sp, #100	@ 0x64
 8007774:	f001 fbaa 	bl	8008ecc <__hexnan>
 8007778:	2805      	cmp	r0, #5
 800777a:	d127      	bne.n	80077cc <_strtod_l+0x37c>
 800777c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800777e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007782:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007786:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800778a:	e69a      	b.n	80074c2 <_strtod_l+0x72>
 800778c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800778e:	fb08 2101 	mla	r1, r8, r1, r2
 8007792:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007796:	920e      	str	r2, [sp, #56]	@ 0x38
 8007798:	e7b5      	b.n	8007706 <_strtod_l+0x2b6>
 800779a:	2a6e      	cmp	r2, #110	@ 0x6e
 800779c:	e7da      	b.n	8007754 <_strtod_l+0x304>
 800779e:	498b      	ldr	r1, [pc, #556]	@ (80079cc <_strtod_l+0x57c>)
 80077a0:	a819      	add	r0, sp, #100	@ 0x64
 80077a2:	f001 fb7f 	bl	8008ea4 <__match>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f aea4 	beq.w	80074f4 <_strtod_l+0xa4>
 80077ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ae:	4988      	ldr	r1, [pc, #544]	@ (80079d0 <_strtod_l+0x580>)
 80077b0:	3b01      	subs	r3, #1
 80077b2:	a819      	add	r0, sp, #100	@ 0x64
 80077b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80077b6:	f001 fb75 	bl	8008ea4 <__match>
 80077ba:	b910      	cbnz	r0, 80077c2 <_strtod_l+0x372>
 80077bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077be:	3301      	adds	r3, #1
 80077c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80077c2:	f04f 0a00 	mov.w	sl, #0
 80077c6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80079d4 <_strtod_l+0x584>
 80077ca:	e67a      	b.n	80074c2 <_strtod_l+0x72>
 80077cc:	4882      	ldr	r0, [pc, #520]	@ (80079d8 <_strtod_l+0x588>)
 80077ce:	f001 f8a7 	bl	8008920 <nan>
 80077d2:	4682      	mov	sl, r0
 80077d4:	468b      	mov	fp, r1
 80077d6:	e674      	b.n	80074c2 <_strtod_l+0x72>
 80077d8:	eba8 0309 	sub.w	r3, r8, r9
 80077dc:	2f00      	cmp	r7, #0
 80077de:	bf08      	it	eq
 80077e0:	462f      	moveq	r7, r5
 80077e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80077e4:	2d10      	cmp	r5, #16
 80077e6:	462c      	mov	r4, r5
 80077e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ea:	bfa8      	it	ge
 80077ec:	2410      	movge	r4, #16
 80077ee:	f7f8 fdf9 	bl	80003e4 <__aeabi_ui2d>
 80077f2:	2d09      	cmp	r5, #9
 80077f4:	4682      	mov	sl, r0
 80077f6:	468b      	mov	fp, r1
 80077f8:	dc11      	bgt.n	800781e <_strtod_l+0x3ce>
 80077fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f43f ae60 	beq.w	80074c2 <_strtod_l+0x72>
 8007802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007804:	dd76      	ble.n	80078f4 <_strtod_l+0x4a4>
 8007806:	2b16      	cmp	r3, #22
 8007808:	dc5d      	bgt.n	80078c6 <_strtod_l+0x476>
 800780a:	4974      	ldr	r1, [pc, #464]	@ (80079dc <_strtod_l+0x58c>)
 800780c:	4652      	mov	r2, sl
 800780e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007812:	465b      	mov	r3, fp
 8007814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007818:	f7f8 fe5e 	bl	80004d8 <__aeabi_dmul>
 800781c:	e7d9      	b.n	80077d2 <_strtod_l+0x382>
 800781e:	4b6f      	ldr	r3, [pc, #444]	@ (80079dc <_strtod_l+0x58c>)
 8007820:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007824:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007828:	f7f8 fe56 	bl	80004d8 <__aeabi_dmul>
 800782c:	4682      	mov	sl, r0
 800782e:	9808      	ldr	r0, [sp, #32]
 8007830:	468b      	mov	fp, r1
 8007832:	f7f8 fdd7 	bl	80003e4 <__aeabi_ui2d>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	f7f8 fc95 	bl	800016c <__adddf3>
 8007842:	2d0f      	cmp	r5, #15
 8007844:	4682      	mov	sl, r0
 8007846:	468b      	mov	fp, r1
 8007848:	ddd7      	ble.n	80077fa <_strtod_l+0x3aa>
 800784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784c:	1b2c      	subs	r4, r5, r4
 800784e:	441c      	add	r4, r3
 8007850:	2c00      	cmp	r4, #0
 8007852:	f340 8096 	ble.w	8007982 <_strtod_l+0x532>
 8007856:	f014 030f 	ands.w	r3, r4, #15
 800785a:	d00a      	beq.n	8007872 <_strtod_l+0x422>
 800785c:	495f      	ldr	r1, [pc, #380]	@ (80079dc <_strtod_l+0x58c>)
 800785e:	4652      	mov	r2, sl
 8007860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007868:	465b      	mov	r3, fp
 800786a:	f7f8 fe35 	bl	80004d8 <__aeabi_dmul>
 800786e:	4682      	mov	sl, r0
 8007870:	468b      	mov	fp, r1
 8007872:	f034 040f 	bics.w	r4, r4, #15
 8007876:	d073      	beq.n	8007960 <_strtod_l+0x510>
 8007878:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800787c:	dd48      	ble.n	8007910 <_strtod_l+0x4c0>
 800787e:	2400      	movs	r4, #0
 8007880:	46a0      	mov	r8, r4
 8007882:	46a1      	mov	r9, r4
 8007884:	940a      	str	r4, [sp, #40]	@ 0x28
 8007886:	2322      	movs	r3, #34	@ 0x22
 8007888:	f04f 0a00 	mov.w	sl, #0
 800788c:	9a05      	ldr	r2, [sp, #20]
 800788e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80079d4 <_strtod_l+0x584>
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	f43f ae13 	beq.w	80074c2 <_strtod_l+0x72>
 800789c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800789e:	9805      	ldr	r0, [sp, #20]
 80078a0:	f7ff f94c 	bl	8006b3c <_Bfree>
 80078a4:	4649      	mov	r1, r9
 80078a6:	9805      	ldr	r0, [sp, #20]
 80078a8:	f7ff f948 	bl	8006b3c <_Bfree>
 80078ac:	4641      	mov	r1, r8
 80078ae:	9805      	ldr	r0, [sp, #20]
 80078b0:	f7ff f944 	bl	8006b3c <_Bfree>
 80078b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078b6:	9805      	ldr	r0, [sp, #20]
 80078b8:	f7ff f940 	bl	8006b3c <_Bfree>
 80078bc:	4621      	mov	r1, r4
 80078be:	9805      	ldr	r0, [sp, #20]
 80078c0:	f7ff f93c 	bl	8006b3c <_Bfree>
 80078c4:	e5fd      	b.n	80074c2 <_strtod_l+0x72>
 80078c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80078cc:	4293      	cmp	r3, r2
 80078ce:	dbbc      	blt.n	800784a <_strtod_l+0x3fa>
 80078d0:	4c42      	ldr	r4, [pc, #264]	@ (80079dc <_strtod_l+0x58c>)
 80078d2:	f1c5 050f 	rsb	r5, r5, #15
 80078d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078da:	4652      	mov	r2, sl
 80078dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e0:	465b      	mov	r3, fp
 80078e2:	f7f8 fdf9 	bl	80004d8 <__aeabi_dmul>
 80078e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e8:	1b5d      	subs	r5, r3, r5
 80078ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078f2:	e791      	b.n	8007818 <_strtod_l+0x3c8>
 80078f4:	3316      	adds	r3, #22
 80078f6:	dba8      	blt.n	800784a <_strtod_l+0x3fa>
 80078f8:	4b38      	ldr	r3, [pc, #224]	@ (80079dc <_strtod_l+0x58c>)
 80078fa:	eba9 0808 	sub.w	r8, r9, r8
 80078fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007902:	4650      	mov	r0, sl
 8007904:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007908:	4659      	mov	r1, fp
 800790a:	f7f8 ff0f 	bl	800072c <__aeabi_ddiv>
 800790e:	e760      	b.n	80077d2 <_strtod_l+0x382>
 8007910:	4b33      	ldr	r3, [pc, #204]	@ (80079e0 <_strtod_l+0x590>)
 8007912:	4650      	mov	r0, sl
 8007914:	9308      	str	r3, [sp, #32]
 8007916:	2300      	movs	r3, #0
 8007918:	4659      	mov	r1, fp
 800791a:	461e      	mov	r6, r3
 800791c:	1124      	asrs	r4, r4, #4
 800791e:	2c01      	cmp	r4, #1
 8007920:	dc21      	bgt.n	8007966 <_strtod_l+0x516>
 8007922:	b10b      	cbz	r3, 8007928 <_strtod_l+0x4d8>
 8007924:	4682      	mov	sl, r0
 8007926:	468b      	mov	fp, r1
 8007928:	492d      	ldr	r1, [pc, #180]	@ (80079e0 <_strtod_l+0x590>)
 800792a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800792e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007932:	4652      	mov	r2, sl
 8007934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007938:	465b      	mov	r3, fp
 800793a:	f7f8 fdcd 	bl	80004d8 <__aeabi_dmul>
 800793e:	4b25      	ldr	r3, [pc, #148]	@ (80079d4 <_strtod_l+0x584>)
 8007940:	460a      	mov	r2, r1
 8007942:	400b      	ands	r3, r1
 8007944:	4927      	ldr	r1, [pc, #156]	@ (80079e4 <_strtod_l+0x594>)
 8007946:	4682      	mov	sl, r0
 8007948:	428b      	cmp	r3, r1
 800794a:	d898      	bhi.n	800787e <_strtod_l+0x42e>
 800794c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007950:	428b      	cmp	r3, r1
 8007952:	bf86      	itte	hi
 8007954:	f04f 3aff 	movhi.w	sl, #4294967295
 8007958:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80079e8 <_strtod_l+0x598>
 800795c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007960:	2300      	movs	r3, #0
 8007962:	9308      	str	r3, [sp, #32]
 8007964:	e07a      	b.n	8007a5c <_strtod_l+0x60c>
 8007966:	07e2      	lsls	r2, r4, #31
 8007968:	d505      	bpl.n	8007976 <_strtod_l+0x526>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fdb2 	bl	80004d8 <__aeabi_dmul>
 8007974:	2301      	movs	r3, #1
 8007976:	9a08      	ldr	r2, [sp, #32]
 8007978:	3601      	adds	r6, #1
 800797a:	3208      	adds	r2, #8
 800797c:	1064      	asrs	r4, r4, #1
 800797e:	9208      	str	r2, [sp, #32]
 8007980:	e7cd      	b.n	800791e <_strtod_l+0x4ce>
 8007982:	d0ed      	beq.n	8007960 <_strtod_l+0x510>
 8007984:	4264      	negs	r4, r4
 8007986:	f014 020f 	ands.w	r2, r4, #15
 800798a:	d00a      	beq.n	80079a2 <_strtod_l+0x552>
 800798c:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <_strtod_l+0x58c>)
 800798e:	4650      	mov	r0, sl
 8007990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007994:	4659      	mov	r1, fp
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fec7 	bl	800072c <__aeabi_ddiv>
 800799e:	4682      	mov	sl, r0
 80079a0:	468b      	mov	fp, r1
 80079a2:	1124      	asrs	r4, r4, #4
 80079a4:	d0dc      	beq.n	8007960 <_strtod_l+0x510>
 80079a6:	2c1f      	cmp	r4, #31
 80079a8:	dd20      	ble.n	80079ec <_strtod_l+0x59c>
 80079aa:	2400      	movs	r4, #0
 80079ac:	46a0      	mov	r8, r4
 80079ae:	46a1      	mov	r9, r4
 80079b0:	940a      	str	r4, [sp, #40]	@ 0x28
 80079b2:	2322      	movs	r3, #34	@ 0x22
 80079b4:	9a05      	ldr	r2, [sp, #20]
 80079b6:	f04f 0a00 	mov.w	sl, #0
 80079ba:	f04f 0b00 	mov.w	fp, #0
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	e768      	b.n	8007894 <_strtod_l+0x444>
 80079c2:	bf00      	nop
 80079c4:	0800a763 	.word	0x0800a763
 80079c8:	0800a97c 	.word	0x0800a97c
 80079cc:	0800a75b 	.word	0x0800a75b
 80079d0:	0800a792 	.word	0x0800a792
 80079d4:	7ff00000 	.word	0x7ff00000
 80079d8:	0800ab25 	.word	0x0800ab25
 80079dc:	0800a8b0 	.word	0x0800a8b0
 80079e0:	0800a888 	.word	0x0800a888
 80079e4:	7ca00000 	.word	0x7ca00000
 80079e8:	7fefffff 	.word	0x7fefffff
 80079ec:	f014 0310 	ands.w	r3, r4, #16
 80079f0:	bf18      	it	ne
 80079f2:	236a      	movne	r3, #106	@ 0x6a
 80079f4:	4650      	mov	r0, sl
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	4659      	mov	r1, fp
 80079fa:	2300      	movs	r3, #0
 80079fc:	4ea9      	ldr	r6, [pc, #676]	@ (8007ca4 <_strtod_l+0x854>)
 80079fe:	07e2      	lsls	r2, r4, #31
 8007a00:	d504      	bpl.n	8007a0c <_strtod_l+0x5bc>
 8007a02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a06:	f7f8 fd67 	bl	80004d8 <__aeabi_dmul>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	1064      	asrs	r4, r4, #1
 8007a0e:	f106 0608 	add.w	r6, r6, #8
 8007a12:	d1f4      	bne.n	80079fe <_strtod_l+0x5ae>
 8007a14:	b10b      	cbz	r3, 8007a1a <_strtod_l+0x5ca>
 8007a16:	4682      	mov	sl, r0
 8007a18:	468b      	mov	fp, r1
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	b1b3      	cbz	r3, 8007a4c <_strtod_l+0x5fc>
 8007a1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	4659      	mov	r1, fp
 8007a2a:	dd0f      	ble.n	8007a4c <_strtod_l+0x5fc>
 8007a2c:	2b1f      	cmp	r3, #31
 8007a2e:	dd57      	ble.n	8007ae0 <_strtod_l+0x690>
 8007a30:	2b34      	cmp	r3, #52	@ 0x34
 8007a32:	bfd8      	it	le
 8007a34:	f04f 33ff 	movle.w	r3, #4294967295
 8007a38:	f04f 0a00 	mov.w	sl, #0
 8007a3c:	bfcf      	iteee	gt
 8007a3e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a42:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a46:	4093      	lslle	r3, r2
 8007a48:	ea03 0b01 	andle.w	fp, r3, r1
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4650      	mov	r0, sl
 8007a52:	4659      	mov	r1, fp
 8007a54:	f7f8 ffa8 	bl	80009a8 <__aeabi_dcmpeq>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1a6      	bne.n	80079aa <_strtod_l+0x55a>
 8007a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a5e:	463a      	mov	r2, r7
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a64:	462b      	mov	r3, r5
 8007a66:	9805      	ldr	r0, [sp, #20]
 8007a68:	f7ff f8d0 	bl	8006c0c <__s2b>
 8007a6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f43f af05 	beq.w	800787e <_strtod_l+0x42e>
 8007a74:	2400      	movs	r4, #0
 8007a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a78:	eba9 0308 	sub.w	r3, r9, r8
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	bfa8      	it	ge
 8007a80:	2300      	movge	r3, #0
 8007a82:	46a0      	mov	r8, r4
 8007a84:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a8e:	9805      	ldr	r0, [sp, #20]
 8007a90:	6859      	ldr	r1, [r3, #4]
 8007a92:	f7ff f813 	bl	8006abc <_Balloc>
 8007a96:	4681      	mov	r9, r0
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f43f aef4 	beq.w	8007886 <_strtod_l+0x436>
 8007a9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	f103 010c 	add.w	r1, r3, #12
 8007aa8:	3202      	adds	r2, #2
 8007aaa:	0092      	lsls	r2, r2, #2
 8007aac:	f000 ff2a 	bl	8008904 <memcpy>
 8007ab0:	ab1c      	add	r3, sp, #112	@ 0x70
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4652      	mov	r2, sl
 8007aba:	465b      	mov	r3, fp
 8007abc:	9805      	ldr	r0, [sp, #20]
 8007abe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ac2:	f7ff fbd5 	bl	8007270 <__d2b>
 8007ac6:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f43f aedc 	beq.w	8007886 <_strtod_l+0x436>
 8007ace:	2101      	movs	r1, #1
 8007ad0:	9805      	ldr	r0, [sp, #20]
 8007ad2:	f7ff f931 	bl	8006d38 <__i2b>
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	b948      	cbnz	r0, 8007aee <_strtod_l+0x69e>
 8007ada:	f04f 0800 	mov.w	r8, #0
 8007ade:	e6d2      	b.n	8007886 <_strtod_l+0x436>
 8007ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	ea03 0a0a 	and.w	sl, r3, sl
 8007aec:	e7ae      	b.n	8007a4c <_strtod_l+0x5fc>
 8007aee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007af0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007af2:	2d00      	cmp	r5, #0
 8007af4:	bfab      	itete	ge
 8007af6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007af8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007afa:	18ef      	addge	r7, r5, r3
 8007afc:	1b5e      	sublt	r6, r3, r5
 8007afe:	9b08      	ldr	r3, [sp, #32]
 8007b00:	bfa8      	it	ge
 8007b02:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b04:	eba5 0503 	sub.w	r5, r5, r3
 8007b08:	4415      	add	r5, r2
 8007b0a:	4b67      	ldr	r3, [pc, #412]	@ (8007ca8 <_strtod_l+0x858>)
 8007b0c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007b10:	bfb8      	it	lt
 8007b12:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b14:	429d      	cmp	r5, r3
 8007b16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b1a:	da50      	bge.n	8007bbe <_strtod_l+0x76e>
 8007b1c:	1b5b      	subs	r3, r3, r5
 8007b1e:	2b1f      	cmp	r3, #31
 8007b20:	f04f 0101 	mov.w	r1, #1
 8007b24:	eba2 0203 	sub.w	r2, r2, r3
 8007b28:	dc3d      	bgt.n	8007ba6 <_strtod_l+0x756>
 8007b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b30:	2300      	movs	r3, #0
 8007b32:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b34:	18bd      	adds	r5, r7, r2
 8007b36:	9b08      	ldr	r3, [sp, #32]
 8007b38:	42af      	cmp	r7, r5
 8007b3a:	4416      	add	r6, r2
 8007b3c:	441e      	add	r6, r3
 8007b3e:	463b      	mov	r3, r7
 8007b40:	bfa8      	it	ge
 8007b42:	462b      	movge	r3, r5
 8007b44:	42b3      	cmp	r3, r6
 8007b46:	bfa8      	it	ge
 8007b48:	4633      	movge	r3, r6
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bfc2      	ittt	gt
 8007b4e:	1aed      	subgt	r5, r5, r3
 8007b50:	1af6      	subgt	r6, r6, r3
 8007b52:	1aff      	subgt	r7, r7, r3
 8007b54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dd16      	ble.n	8007b88 <_strtod_l+0x738>
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	9805      	ldr	r0, [sp, #20]
 8007b60:	f7ff f9a8 	bl	8006eb4 <__pow5mult>
 8007b64:	4680      	mov	r8, r0
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d0b7      	beq.n	8007ada <_strtod_l+0x68a>
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b6e:	9805      	ldr	r0, [sp, #20]
 8007b70:	f7ff f8f8 	bl	8006d64 <__multiply>
 8007b74:	900e      	str	r0, [sp, #56]	@ 0x38
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f43f ae85 	beq.w	8007886 <_strtod_l+0x436>
 8007b7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b7e:	9805      	ldr	r0, [sp, #20]
 8007b80:	f7fe ffdc 	bl	8006b3c <_Bfree>
 8007b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b86:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	dc1d      	bgt.n	8007bc8 <_strtod_l+0x778>
 8007b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dd23      	ble.n	8007bda <_strtod_l+0x78a>
 8007b92:	4649      	mov	r1, r9
 8007b94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007b96:	9805      	ldr	r0, [sp, #20]
 8007b98:	f7ff f98c 	bl	8006eb4 <__pow5mult>
 8007b9c:	4681      	mov	r9, r0
 8007b9e:	b9e0      	cbnz	r0, 8007bda <_strtod_l+0x78a>
 8007ba0:	f04f 0900 	mov.w	r9, #0
 8007ba4:	e66f      	b.n	8007886 <_strtod_l+0x436>
 8007ba6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007baa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007bae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007bb2:	35e2      	adds	r5, #226	@ 0xe2
 8007bb4:	fa01 f305 	lsl.w	r3, r1, r5
 8007bb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007bbc:	e7ba      	b.n	8007b34 <_strtod_l+0x6e4>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bc6:	e7b5      	b.n	8007b34 <_strtod_l+0x6e4>
 8007bc8:	462a      	mov	r2, r5
 8007bca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bcc:	9805      	ldr	r0, [sp, #20]
 8007bce:	f7ff f9cb 	bl	8006f68 <__lshift>
 8007bd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d1d9      	bne.n	8007b8c <_strtod_l+0x73c>
 8007bd8:	e655      	b.n	8007886 <_strtod_l+0x436>
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	dd07      	ble.n	8007bee <_strtod_l+0x79e>
 8007bde:	4649      	mov	r1, r9
 8007be0:	4632      	mov	r2, r6
 8007be2:	9805      	ldr	r0, [sp, #20]
 8007be4:	f7ff f9c0 	bl	8006f68 <__lshift>
 8007be8:	4681      	mov	r9, r0
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d0d8      	beq.n	8007ba0 <_strtod_l+0x750>
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	dd08      	ble.n	8007c04 <_strtod_l+0x7b4>
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	463a      	mov	r2, r7
 8007bf6:	9805      	ldr	r0, [sp, #20]
 8007bf8:	f7ff f9b6 	bl	8006f68 <__lshift>
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f43f ae41 	beq.w	8007886 <_strtod_l+0x436>
 8007c04:	464a      	mov	r2, r9
 8007c06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c08:	9805      	ldr	r0, [sp, #20]
 8007c0a:	f7ff fa35 	bl	8007078 <__mdiff>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f43f ae38 	beq.w	8007886 <_strtod_l+0x436>
 8007c16:	68c3      	ldr	r3, [r0, #12]
 8007c18:	4641      	mov	r1, r8
 8007c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60c3      	str	r3, [r0, #12]
 8007c20:	f7ff fa0e 	bl	8007040 <__mcmp>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	da45      	bge.n	8007cb4 <_strtod_l+0x864>
 8007c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c2a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c2e:	d16b      	bne.n	8007d08 <_strtod_l+0x8b8>
 8007c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d167      	bne.n	8007d08 <_strtod_l+0x8b8>
 8007c38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c3c:	0d1b      	lsrs	r3, r3, #20
 8007c3e:	051b      	lsls	r3, r3, #20
 8007c40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c44:	d960      	bls.n	8007d08 <_strtod_l+0x8b8>
 8007c46:	6963      	ldr	r3, [r4, #20]
 8007c48:	b913      	cbnz	r3, 8007c50 <_strtod_l+0x800>
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	dd5b      	ble.n	8007d08 <_strtod_l+0x8b8>
 8007c50:	4621      	mov	r1, r4
 8007c52:	2201      	movs	r2, #1
 8007c54:	9805      	ldr	r0, [sp, #20]
 8007c56:	f7ff f987 	bl	8006f68 <__lshift>
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	f7ff f9ef 	bl	8007040 <__mcmp>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	dd50      	ble.n	8007d08 <_strtod_l+0x8b8>
 8007c66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c6a:	9a08      	ldr	r2, [sp, #32]
 8007c6c:	0d1b      	lsrs	r3, r3, #20
 8007c6e:	051b      	lsls	r3, r3, #20
 8007c70:	2a00      	cmp	r2, #0
 8007c72:	d06a      	beq.n	8007d4a <_strtod_l+0x8fa>
 8007c74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c78:	d867      	bhi.n	8007d4a <_strtod_l+0x8fa>
 8007c7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c7e:	f67f ae98 	bls.w	80079b2 <_strtod_l+0x562>
 8007c82:	4650      	mov	r0, sl
 8007c84:	4659      	mov	r1, fp
 8007c86:	4b09      	ldr	r3, [pc, #36]	@ (8007cac <_strtod_l+0x85c>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f7f8 fc25 	bl	80004d8 <__aeabi_dmul>
 8007c8e:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <_strtod_l+0x860>)
 8007c90:	4682      	mov	sl, r0
 8007c92:	400b      	ands	r3, r1
 8007c94:	468b      	mov	fp, r1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f47f ae00 	bne.w	800789c <_strtod_l+0x44c>
 8007c9c:	2322      	movs	r3, #34	@ 0x22
 8007c9e:	9a05      	ldr	r2, [sp, #20]
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	e5fb      	b.n	800789c <_strtod_l+0x44c>
 8007ca4:	0800a9a8 	.word	0x0800a9a8
 8007ca8:	fffffc02 	.word	0xfffffc02
 8007cac:	39500000 	.word	0x39500000
 8007cb0:	7ff00000 	.word	0x7ff00000
 8007cb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007cb8:	d165      	bne.n	8007d86 <_strtod_l+0x936>
 8007cba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007cbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cc0:	b35a      	cbz	r2, 8007d1a <_strtod_l+0x8ca>
 8007cc2:	4a99      	ldr	r2, [pc, #612]	@ (8007f28 <_strtod_l+0xad8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d12b      	bne.n	8007d20 <_strtod_l+0x8d0>
 8007cc8:	9b08      	ldr	r3, [sp, #32]
 8007cca:	4651      	mov	r1, sl
 8007ccc:	b303      	cbz	r3, 8007d10 <_strtod_l+0x8c0>
 8007cce:	465a      	mov	r2, fp
 8007cd0:	4b96      	ldr	r3, [pc, #600]	@ (8007f2c <_strtod_l+0xadc>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	d81b      	bhi.n	8007d16 <_strtod_l+0x8c6>
 8007cde:	0d1b      	lsrs	r3, r3, #20
 8007ce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d119      	bne.n	8007d20 <_strtod_l+0x8d0>
 8007cec:	4b90      	ldr	r3, [pc, #576]	@ (8007f30 <_strtod_l+0xae0>)
 8007cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d102      	bne.n	8007cfa <_strtod_l+0x8aa>
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	f43f adc6 	beq.w	8007886 <_strtod_l+0x436>
 8007cfa:	f04f 0a00 	mov.w	sl, #0
 8007cfe:	4b8b      	ldr	r3, [pc, #556]	@ (8007f2c <_strtod_l+0xadc>)
 8007d00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d02:	401a      	ands	r2, r3
 8007d04:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1b9      	bne.n	8007c82 <_strtod_l+0x832>
 8007d0e:	e5c5      	b.n	800789c <_strtod_l+0x44c>
 8007d10:	f04f 33ff 	mov.w	r3, #4294967295
 8007d14:	e7e8      	b.n	8007ce8 <_strtod_l+0x898>
 8007d16:	4613      	mov	r3, r2
 8007d18:	e7e6      	b.n	8007ce8 <_strtod_l+0x898>
 8007d1a:	ea53 030a 	orrs.w	r3, r3, sl
 8007d1e:	d0a2      	beq.n	8007c66 <_strtod_l+0x816>
 8007d20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d22:	b1db      	cbz	r3, 8007d5c <_strtod_l+0x90c>
 8007d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d26:	4213      	tst	r3, r2
 8007d28:	d0ee      	beq.n	8007d08 <_strtod_l+0x8b8>
 8007d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	4659      	mov	r1, fp
 8007d30:	9a08      	ldr	r2, [sp, #32]
 8007d32:	b1bb      	cbz	r3, 8007d64 <_strtod_l+0x914>
 8007d34:	f7ff fb68 	bl	8007408 <sulp>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d40:	f7f8 fa14 	bl	800016c <__adddf3>
 8007d44:	4682      	mov	sl, r0
 8007d46:	468b      	mov	fp, r1
 8007d48:	e7de      	b.n	8007d08 <_strtod_l+0x8b8>
 8007d4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d52:	f04f 3aff 	mov.w	sl, #4294967295
 8007d56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d5a:	e7d5      	b.n	8007d08 <_strtod_l+0x8b8>
 8007d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d5e:	ea13 0f0a 	tst.w	r3, sl
 8007d62:	e7e1      	b.n	8007d28 <_strtod_l+0x8d8>
 8007d64:	f7ff fb50 	bl	8007408 <sulp>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d70:	f7f8 f9fa 	bl	8000168 <__aeabi_dsub>
 8007d74:	2200      	movs	r2, #0
 8007d76:	2300      	movs	r3, #0
 8007d78:	4682      	mov	sl, r0
 8007d7a:	468b      	mov	fp, r1
 8007d7c:	f7f8 fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d0c1      	beq.n	8007d08 <_strtod_l+0x8b8>
 8007d84:	e615      	b.n	80079b2 <_strtod_l+0x562>
 8007d86:	4641      	mov	r1, r8
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7ff fac9 	bl	8007320 <__ratio>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007d94:	4606      	mov	r6, r0
 8007d96:	460f      	mov	r7, r1
 8007d98:	f7f8 fe1a 	bl	80009d0 <__aeabi_dcmple>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d06d      	beq.n	8007e7c <_strtod_l+0xa2c>
 8007da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d178      	bne.n	8007e98 <_strtod_l+0xa48>
 8007da6:	f1ba 0f00 	cmp.w	sl, #0
 8007daa:	d156      	bne.n	8007e5a <_strtod_l+0xa0a>
 8007dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d158      	bne.n	8007e68 <_strtod_l+0xa18>
 8007db6:	2200      	movs	r2, #0
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	4b5d      	ldr	r3, [pc, #372]	@ (8007f34 <_strtod_l+0xae4>)
 8007dbe:	f7f8 fdfd 	bl	80009bc <__aeabi_dcmplt>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d157      	bne.n	8007e76 <_strtod_l+0xa26>
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8007f38 <_strtod_l+0xae8>)
 8007dce:	f7f8 fb83 	bl	80004d8 <__aeabi_dmul>
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	460f      	mov	r7, r1
 8007dd6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007dda:	9606      	str	r6, [sp, #24]
 8007ddc:	9307      	str	r3, [sp, #28]
 8007dde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007de2:	4d52      	ldr	r5, [pc, #328]	@ (8007f2c <_strtod_l+0xadc>)
 8007de4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dea:	401d      	ands	r5, r3
 8007dec:	4b53      	ldr	r3, [pc, #332]	@ (8007f3c <_strtod_l+0xaec>)
 8007dee:	429d      	cmp	r5, r3
 8007df0:	f040 80aa 	bne.w	8007f48 <_strtod_l+0xaf8>
 8007df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007df6:	4650      	mov	r0, sl
 8007df8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007dfc:	4659      	mov	r1, fp
 8007dfe:	f7ff f9cf 	bl	80071a0 <__ulp>
 8007e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e06:	f7f8 fb67 	bl	80004d8 <__aeabi_dmul>
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	f7f8 f9ad 	bl	800016c <__adddf3>
 8007e12:	460b      	mov	r3, r1
 8007e14:	4945      	ldr	r1, [pc, #276]	@ (8007f2c <_strtod_l+0xadc>)
 8007e16:	4a4a      	ldr	r2, [pc, #296]	@ (8007f40 <_strtod_l+0xaf0>)
 8007e18:	4019      	ands	r1, r3
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	d942      	bls.n	8007ea6 <_strtod_l+0xa56>
 8007e20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e22:	4b43      	ldr	r3, [pc, #268]	@ (8007f30 <_strtod_l+0xae0>)
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d103      	bne.n	8007e30 <_strtod_l+0x9e0>
 8007e28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	f43f ad2b 	beq.w	8007886 <_strtod_l+0x436>
 8007e30:	f04f 3aff 	mov.w	sl, #4294967295
 8007e34:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007f30 <_strtod_l+0xae0>
 8007e38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e3a:	9805      	ldr	r0, [sp, #20]
 8007e3c:	f7fe fe7e 	bl	8006b3c <_Bfree>
 8007e40:	4649      	mov	r1, r9
 8007e42:	9805      	ldr	r0, [sp, #20]
 8007e44:	f7fe fe7a 	bl	8006b3c <_Bfree>
 8007e48:	4641      	mov	r1, r8
 8007e4a:	9805      	ldr	r0, [sp, #20]
 8007e4c:	f7fe fe76 	bl	8006b3c <_Bfree>
 8007e50:	4621      	mov	r1, r4
 8007e52:	9805      	ldr	r0, [sp, #20]
 8007e54:	f7fe fe72 	bl	8006b3c <_Bfree>
 8007e58:	e618      	b.n	8007a8c <_strtod_l+0x63c>
 8007e5a:	f1ba 0f01 	cmp.w	sl, #1
 8007e5e:	d103      	bne.n	8007e68 <_strtod_l+0xa18>
 8007e60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f43f ada5 	beq.w	80079b2 <_strtod_l+0x562>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4b36      	ldr	r3, [pc, #216]	@ (8007f44 <_strtod_l+0xaf4>)
 8007e6c:	2600      	movs	r6, #0
 8007e6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e72:	4f30      	ldr	r7, [pc, #192]	@ (8007f34 <_strtod_l+0xae4>)
 8007e74:	e7b3      	b.n	8007dde <_strtod_l+0x98e>
 8007e76:	2600      	movs	r6, #0
 8007e78:	4f2f      	ldr	r7, [pc, #188]	@ (8007f38 <_strtod_l+0xae8>)
 8007e7a:	e7ac      	b.n	8007dd6 <_strtod_l+0x986>
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4b2d      	ldr	r3, [pc, #180]	@ (8007f38 <_strtod_l+0xae8>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	f7f8 fb28 	bl	80004d8 <__aeabi_dmul>
 8007e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0a1      	beq.n	8007dd6 <_strtod_l+0x986>
 8007e92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007e96:	e7a2      	b.n	8007dde <_strtod_l+0x98e>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4b26      	ldr	r3, [pc, #152]	@ (8007f34 <_strtod_l+0xae4>)
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	461f      	mov	r7, r3
 8007ea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ea4:	e79b      	b.n	8007dde <_strtod_l+0x98e>
 8007ea6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007eaa:	9b08      	ldr	r3, [sp, #32]
 8007eac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1c1      	bne.n	8007e38 <_strtod_l+0x9e8>
 8007eb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	051b      	lsls	r3, r3, #20
 8007ebc:	429d      	cmp	r5, r3
 8007ebe:	d1bb      	bne.n	8007e38 <_strtod_l+0x9e8>
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f9 f8ae 	bl	8001024 <__aeabi_d2lz>
 8007ec8:	f7f8 fad8 	bl	800047c <__aeabi_l2d>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 f948 	bl	8000168 <__aeabi_dsub>
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4602      	mov	r2, r0
 8007edc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007ee0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ee6:	ea46 060a 	orr.w	r6, r6, sl
 8007eea:	431e      	orrs	r6, r3
 8007eec:	d069      	beq.n	8007fc2 <_strtod_l+0xb72>
 8007eee:	a30a      	add	r3, pc, #40	@ (adr r3, 8007f18 <_strtod_l+0xac8>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 fd62 	bl	80009bc <__aeabi_dcmplt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f47f accf 	bne.w	800789c <_strtod_l+0x44c>
 8007efe:	a308      	add	r3, pc, #32	@ (adr r3, 8007f20 <_strtod_l+0xad0>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f08:	f7f8 fd76 	bl	80009f8 <__aeabi_dcmpgt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d093      	beq.n	8007e38 <_strtod_l+0x9e8>
 8007f10:	e4c4      	b.n	800789c <_strtod_l+0x44c>
 8007f12:	bf00      	nop
 8007f14:	f3af 8000 	nop.w
 8007f18:	94a03595 	.word	0x94a03595
 8007f1c:	3fdfffff 	.word	0x3fdfffff
 8007f20:	35afe535 	.word	0x35afe535
 8007f24:	3fe00000 	.word	0x3fe00000
 8007f28:	000fffff 	.word	0x000fffff
 8007f2c:	7ff00000 	.word	0x7ff00000
 8007f30:	7fefffff 	.word	0x7fefffff
 8007f34:	3ff00000 	.word	0x3ff00000
 8007f38:	3fe00000 	.word	0x3fe00000
 8007f3c:	7fe00000 	.word	0x7fe00000
 8007f40:	7c9fffff 	.word	0x7c9fffff
 8007f44:	bff00000 	.word	0xbff00000
 8007f48:	9b08      	ldr	r3, [sp, #32]
 8007f4a:	b323      	cbz	r3, 8007f96 <_strtod_l+0xb46>
 8007f4c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f50:	d821      	bhi.n	8007f96 <_strtod_l+0xb46>
 8007f52:	a327      	add	r3, pc, #156	@ (adr r3, 8007ff0 <_strtod_l+0xba0>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 fd38 	bl	80009d0 <__aeabi_dcmple>
 8007f60:	b1a0      	cbz	r0, 8007f8c <_strtod_l+0xb3c>
 8007f62:	4639      	mov	r1, r7
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7f8 fd8f 	bl	8000a88 <__aeabi_d2uiz>
 8007f6a:	2801      	cmp	r0, #1
 8007f6c:	bf38      	it	cc
 8007f6e:	2001      	movcc	r0, #1
 8007f70:	f7f8 fa38 	bl	80003e4 <__aeabi_ui2d>
 8007f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f76:	4606      	mov	r6, r0
 8007f78:	460f      	mov	r7, r1
 8007f7a:	b9fb      	cbnz	r3, 8007fbc <_strtod_l+0xb6c>
 8007f7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f80:	9014      	str	r0, [sp, #80]	@ 0x50
 8007f82:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007f88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f8e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007f92:	1b5b      	subs	r3, r3, r5
 8007f94:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f9a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007f9e:	f7ff f8ff 	bl	80071a0 <__ulp>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	4659      	mov	r1, fp
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fb2:	f7f8 f8db 	bl	800016c <__adddf3>
 8007fb6:	4682      	mov	sl, r0
 8007fb8:	468b      	mov	fp, r1
 8007fba:	e776      	b.n	8007eaa <_strtod_l+0xa5a>
 8007fbc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007fc0:	e7e0      	b.n	8007f84 <_strtod_l+0xb34>
 8007fc2:	a30d      	add	r3, pc, #52	@ (adr r3, 8007ff8 <_strtod_l+0xba8>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f7f8 fcf8 	bl	80009bc <__aeabi_dcmplt>
 8007fcc:	e79e      	b.n	8007f0c <_strtod_l+0xabc>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fd4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	f7ff ba77 	b.w	80074ca <_strtod_l+0x7a>
 8007fdc:	2a65      	cmp	r2, #101	@ 0x65
 8007fde:	f43f ab6e 	beq.w	80076be <_strtod_l+0x26e>
 8007fe2:	2a45      	cmp	r2, #69	@ 0x45
 8007fe4:	f43f ab6b 	beq.w	80076be <_strtod_l+0x26e>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f7ff bba6 	b.w	800773a <_strtod_l+0x2ea>
 8007fee:	bf00      	nop
 8007ff0:	ffc00000 	.word	0xffc00000
 8007ff4:	41dfffff 	.word	0x41dfffff
 8007ff8:	94a03595 	.word	0x94a03595
 8007ffc:	3fcfffff 	.word	0x3fcfffff

08008000 <_strtod_r>:
 8008000:	4b01      	ldr	r3, [pc, #4]	@ (8008008 <_strtod_r+0x8>)
 8008002:	f7ff ba25 	b.w	8007450 <_strtod_l>
 8008006:	bf00      	nop
 8008008:	20000068 	.word	0x20000068

0800800c <_strtol_l.constprop.0>:
 800800c:	2b24      	cmp	r3, #36	@ 0x24
 800800e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008012:	4686      	mov	lr, r0
 8008014:	4690      	mov	r8, r2
 8008016:	d801      	bhi.n	800801c <_strtol_l.constprop.0+0x10>
 8008018:	2b01      	cmp	r3, #1
 800801a:	d106      	bne.n	800802a <_strtol_l.constprop.0+0x1e>
 800801c:	f7fd fdbe 	bl	8005b9c <__errno>
 8008020:	2316      	movs	r3, #22
 8008022:	6003      	str	r3, [r0, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802a:	460d      	mov	r5, r1
 800802c:	4833      	ldr	r0, [pc, #204]	@ (80080fc <_strtol_l.constprop.0+0xf0>)
 800802e:	462a      	mov	r2, r5
 8008030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008034:	5d06      	ldrb	r6, [r0, r4]
 8008036:	f016 0608 	ands.w	r6, r6, #8
 800803a:	d1f8      	bne.n	800802e <_strtol_l.constprop.0+0x22>
 800803c:	2c2d      	cmp	r4, #45	@ 0x2d
 800803e:	d12d      	bne.n	800809c <_strtol_l.constprop.0+0x90>
 8008040:	2601      	movs	r6, #1
 8008042:	782c      	ldrb	r4, [r5, #0]
 8008044:	1c95      	adds	r5, r2, #2
 8008046:	f033 0210 	bics.w	r2, r3, #16
 800804a:	d109      	bne.n	8008060 <_strtol_l.constprop.0+0x54>
 800804c:	2c30      	cmp	r4, #48	@ 0x30
 800804e:	d12a      	bne.n	80080a6 <_strtol_l.constprop.0+0x9a>
 8008050:	782a      	ldrb	r2, [r5, #0]
 8008052:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008056:	2a58      	cmp	r2, #88	@ 0x58
 8008058:	d125      	bne.n	80080a6 <_strtol_l.constprop.0+0x9a>
 800805a:	2310      	movs	r3, #16
 800805c:	786c      	ldrb	r4, [r5, #1]
 800805e:	3502      	adds	r5, #2
 8008060:	2200      	movs	r2, #0
 8008062:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008066:	f10c 3cff 	add.w	ip, ip, #4294967295
 800806a:	fbbc f9f3 	udiv	r9, ip, r3
 800806e:	4610      	mov	r0, r2
 8008070:	fb03 ca19 	mls	sl, r3, r9, ip
 8008074:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008078:	2f09      	cmp	r7, #9
 800807a:	d81b      	bhi.n	80080b4 <_strtol_l.constprop.0+0xa8>
 800807c:	463c      	mov	r4, r7
 800807e:	42a3      	cmp	r3, r4
 8008080:	dd27      	ble.n	80080d2 <_strtol_l.constprop.0+0xc6>
 8008082:	1c57      	adds	r7, r2, #1
 8008084:	d007      	beq.n	8008096 <_strtol_l.constprop.0+0x8a>
 8008086:	4581      	cmp	r9, r0
 8008088:	d320      	bcc.n	80080cc <_strtol_l.constprop.0+0xc0>
 800808a:	d101      	bne.n	8008090 <_strtol_l.constprop.0+0x84>
 800808c:	45a2      	cmp	sl, r4
 800808e:	db1d      	blt.n	80080cc <_strtol_l.constprop.0+0xc0>
 8008090:	2201      	movs	r2, #1
 8008092:	fb00 4003 	mla	r0, r0, r3, r4
 8008096:	f815 4b01 	ldrb.w	r4, [r5], #1
 800809a:	e7eb      	b.n	8008074 <_strtol_l.constprop.0+0x68>
 800809c:	2c2b      	cmp	r4, #43	@ 0x2b
 800809e:	bf04      	itt	eq
 80080a0:	782c      	ldrbeq	r4, [r5, #0]
 80080a2:	1c95      	addeq	r5, r2, #2
 80080a4:	e7cf      	b.n	8008046 <_strtol_l.constprop.0+0x3a>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1da      	bne.n	8008060 <_strtol_l.constprop.0+0x54>
 80080aa:	2c30      	cmp	r4, #48	@ 0x30
 80080ac:	bf0c      	ite	eq
 80080ae:	2308      	moveq	r3, #8
 80080b0:	230a      	movne	r3, #10
 80080b2:	e7d5      	b.n	8008060 <_strtol_l.constprop.0+0x54>
 80080b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080b8:	2f19      	cmp	r7, #25
 80080ba:	d801      	bhi.n	80080c0 <_strtol_l.constprop.0+0xb4>
 80080bc:	3c37      	subs	r4, #55	@ 0x37
 80080be:	e7de      	b.n	800807e <_strtol_l.constprop.0+0x72>
 80080c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080c4:	2f19      	cmp	r7, #25
 80080c6:	d804      	bhi.n	80080d2 <_strtol_l.constprop.0+0xc6>
 80080c8:	3c57      	subs	r4, #87	@ 0x57
 80080ca:	e7d8      	b.n	800807e <_strtol_l.constprop.0+0x72>
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295
 80080d0:	e7e1      	b.n	8008096 <_strtol_l.constprop.0+0x8a>
 80080d2:	1c53      	adds	r3, r2, #1
 80080d4:	d108      	bne.n	80080e8 <_strtol_l.constprop.0+0xdc>
 80080d6:	2322      	movs	r3, #34	@ 0x22
 80080d8:	4660      	mov	r0, ip
 80080da:	f8ce 3000 	str.w	r3, [lr]
 80080de:	f1b8 0f00 	cmp.w	r8, #0
 80080e2:	d0a0      	beq.n	8008026 <_strtol_l.constprop.0+0x1a>
 80080e4:	1e69      	subs	r1, r5, #1
 80080e6:	e006      	b.n	80080f6 <_strtol_l.constprop.0+0xea>
 80080e8:	b106      	cbz	r6, 80080ec <_strtol_l.constprop.0+0xe0>
 80080ea:	4240      	negs	r0, r0
 80080ec:	f1b8 0f00 	cmp.w	r8, #0
 80080f0:	d099      	beq.n	8008026 <_strtol_l.constprop.0+0x1a>
 80080f2:	2a00      	cmp	r2, #0
 80080f4:	d1f6      	bne.n	80080e4 <_strtol_l.constprop.0+0xd8>
 80080f6:	f8c8 1000 	str.w	r1, [r8]
 80080fa:	e794      	b.n	8008026 <_strtol_l.constprop.0+0x1a>
 80080fc:	0800a9d1 	.word	0x0800a9d1

08008100 <_strtol_r>:
 8008100:	f7ff bf84 	b.w	800800c <_strtol_l.constprop.0>

08008104 <__ssputs_r>:
 8008104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	461f      	mov	r7, r3
 800810a:	688e      	ldr	r6, [r1, #8]
 800810c:	4682      	mov	sl, r0
 800810e:	42be      	cmp	r6, r7
 8008110:	460c      	mov	r4, r1
 8008112:	4690      	mov	r8, r2
 8008114:	680b      	ldr	r3, [r1, #0]
 8008116:	d82d      	bhi.n	8008174 <__ssputs_r+0x70>
 8008118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800811c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008120:	d026      	beq.n	8008170 <__ssputs_r+0x6c>
 8008122:	6965      	ldr	r5, [r4, #20]
 8008124:	6909      	ldr	r1, [r1, #16]
 8008126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800812a:	eba3 0901 	sub.w	r9, r3, r1
 800812e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008132:	1c7b      	adds	r3, r7, #1
 8008134:	444b      	add	r3, r9
 8008136:	106d      	asrs	r5, r5, #1
 8008138:	429d      	cmp	r5, r3
 800813a:	bf38      	it	cc
 800813c:	461d      	movcc	r5, r3
 800813e:	0553      	lsls	r3, r2, #21
 8008140:	d527      	bpl.n	8008192 <__ssputs_r+0x8e>
 8008142:	4629      	mov	r1, r5
 8008144:	f7fe fc2e 	bl	80069a4 <_malloc_r>
 8008148:	4606      	mov	r6, r0
 800814a:	b360      	cbz	r0, 80081a6 <__ssputs_r+0xa2>
 800814c:	464a      	mov	r2, r9
 800814e:	6921      	ldr	r1, [r4, #16]
 8008150:	f000 fbd8 	bl	8008904 <memcpy>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800815a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	6126      	str	r6, [r4, #16]
 8008162:	444e      	add	r6, r9
 8008164:	6026      	str	r6, [r4, #0]
 8008166:	463e      	mov	r6, r7
 8008168:	6165      	str	r5, [r4, #20]
 800816a:	eba5 0509 	sub.w	r5, r5, r9
 800816e:	60a5      	str	r5, [r4, #8]
 8008170:	42be      	cmp	r6, r7
 8008172:	d900      	bls.n	8008176 <__ssputs_r+0x72>
 8008174:	463e      	mov	r6, r7
 8008176:	4632      	mov	r2, r6
 8008178:	4641      	mov	r1, r8
 800817a:	6820      	ldr	r0, [r4, #0]
 800817c:	f000 fb63 	bl	8008846 <memmove>
 8008180:	2000      	movs	r0, #0
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	1b9b      	subs	r3, r3, r6
 8008186:	60a3      	str	r3, [r4, #8]
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	4433      	add	r3, r6
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008192:	462a      	mov	r2, r5
 8008194:	f000 ff47 	bl	8009026 <_realloc_r>
 8008198:	4606      	mov	r6, r0
 800819a:	2800      	cmp	r0, #0
 800819c:	d1e0      	bne.n	8008160 <__ssputs_r+0x5c>
 800819e:	4650      	mov	r0, sl
 80081a0:	6921      	ldr	r1, [r4, #16]
 80081a2:	f7fe fb8d 	bl	80068c0 <_free_r>
 80081a6:	230c      	movs	r3, #12
 80081a8:	f8ca 3000 	str.w	r3, [sl]
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b6:	81a3      	strh	r3, [r4, #12]
 80081b8:	e7e9      	b.n	800818e <__ssputs_r+0x8a>
	...

080081bc <_svfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	4698      	mov	r8, r3
 80081c2:	898b      	ldrh	r3, [r1, #12]
 80081c4:	4607      	mov	r7, r0
 80081c6:	061b      	lsls	r3, r3, #24
 80081c8:	460d      	mov	r5, r1
 80081ca:	4614      	mov	r4, r2
 80081cc:	b09d      	sub	sp, #116	@ 0x74
 80081ce:	d510      	bpl.n	80081f2 <_svfiprintf_r+0x36>
 80081d0:	690b      	ldr	r3, [r1, #16]
 80081d2:	b973      	cbnz	r3, 80081f2 <_svfiprintf_r+0x36>
 80081d4:	2140      	movs	r1, #64	@ 0x40
 80081d6:	f7fe fbe5 	bl	80069a4 <_malloc_r>
 80081da:	6028      	str	r0, [r5, #0]
 80081dc:	6128      	str	r0, [r5, #16]
 80081de:	b930      	cbnz	r0, 80081ee <_svfiprintf_r+0x32>
 80081e0:	230c      	movs	r3, #12
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	b01d      	add	sp, #116	@ 0x74
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	2340      	movs	r3, #64	@ 0x40
 80081f0:	616b      	str	r3, [r5, #20]
 80081f2:	2300      	movs	r3, #0
 80081f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f6:	2320      	movs	r3, #32
 80081f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081fc:	2330      	movs	r3, #48	@ 0x30
 80081fe:	f04f 0901 	mov.w	r9, #1
 8008202:	f8cd 800c 	str.w	r8, [sp, #12]
 8008206:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80083a0 <_svfiprintf_r+0x1e4>
 800820a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800820e:	4623      	mov	r3, r4
 8008210:	469a      	mov	sl, r3
 8008212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008216:	b10a      	cbz	r2, 800821c <_svfiprintf_r+0x60>
 8008218:	2a25      	cmp	r2, #37	@ 0x25
 800821a:	d1f9      	bne.n	8008210 <_svfiprintf_r+0x54>
 800821c:	ebba 0b04 	subs.w	fp, sl, r4
 8008220:	d00b      	beq.n	800823a <_svfiprintf_r+0x7e>
 8008222:	465b      	mov	r3, fp
 8008224:	4622      	mov	r2, r4
 8008226:	4629      	mov	r1, r5
 8008228:	4638      	mov	r0, r7
 800822a:	f7ff ff6b 	bl	8008104 <__ssputs_r>
 800822e:	3001      	adds	r0, #1
 8008230:	f000 80a7 	beq.w	8008382 <_svfiprintf_r+0x1c6>
 8008234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008236:	445a      	add	r2, fp
 8008238:	9209      	str	r2, [sp, #36]	@ 0x24
 800823a:	f89a 3000 	ldrb.w	r3, [sl]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 809f 	beq.w	8008382 <_svfiprintf_r+0x1c6>
 8008244:	2300      	movs	r3, #0
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824e:	f10a 0a01 	add.w	sl, sl, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	9307      	str	r3, [sp, #28]
 8008256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800825a:	931a      	str	r3, [sp, #104]	@ 0x68
 800825c:	4654      	mov	r4, sl
 800825e:	2205      	movs	r2, #5
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	484e      	ldr	r0, [pc, #312]	@ (80083a0 <_svfiprintf_r+0x1e4>)
 8008266:	f7fd fcc6 	bl	8005bf6 <memchr>
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	b9d8      	cbnz	r0, 80082a6 <_svfiprintf_r+0xea>
 800826e:	06d0      	lsls	r0, r2, #27
 8008270:	bf44      	itt	mi
 8008272:	2320      	movmi	r3, #32
 8008274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008278:	0711      	lsls	r1, r2, #28
 800827a:	bf44      	itt	mi
 800827c:	232b      	movmi	r3, #43	@ 0x2b
 800827e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008282:	f89a 3000 	ldrb.w	r3, [sl]
 8008286:	2b2a      	cmp	r3, #42	@ 0x2a
 8008288:	d015      	beq.n	80082b6 <_svfiprintf_r+0xfa>
 800828a:	4654      	mov	r4, sl
 800828c:	2000      	movs	r0, #0
 800828e:	f04f 0c0a 	mov.w	ip, #10
 8008292:	9a07      	ldr	r2, [sp, #28]
 8008294:	4621      	mov	r1, r4
 8008296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829a:	3b30      	subs	r3, #48	@ 0x30
 800829c:	2b09      	cmp	r3, #9
 800829e:	d94b      	bls.n	8008338 <_svfiprintf_r+0x17c>
 80082a0:	b1b0      	cbz	r0, 80082d0 <_svfiprintf_r+0x114>
 80082a2:	9207      	str	r2, [sp, #28]
 80082a4:	e014      	b.n	80082d0 <_svfiprintf_r+0x114>
 80082a6:	eba0 0308 	sub.w	r3, r0, r8
 80082aa:	fa09 f303 	lsl.w	r3, r9, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	46a2      	mov	sl, r4
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	e7d2      	b.n	800825c <_svfiprintf_r+0xa0>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	1d19      	adds	r1, r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	9103      	str	r1, [sp, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfbb      	ittet	lt
 80082c2:	425b      	neglt	r3, r3
 80082c4:	f042 0202 	orrlt.w	r2, r2, #2
 80082c8:	9307      	strge	r3, [sp, #28]
 80082ca:	9307      	strlt	r3, [sp, #28]
 80082cc:	bfb8      	it	lt
 80082ce:	9204      	strlt	r2, [sp, #16]
 80082d0:	7823      	ldrb	r3, [r4, #0]
 80082d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80082d4:	d10a      	bne.n	80082ec <_svfiprintf_r+0x130>
 80082d6:	7863      	ldrb	r3, [r4, #1]
 80082d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082da:	d132      	bne.n	8008342 <_svfiprintf_r+0x186>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	3402      	adds	r4, #2
 80082e0:	1d1a      	adds	r2, r3, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	9203      	str	r2, [sp, #12]
 80082e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80083a4 <_svfiprintf_r+0x1e8>
 80082f0:	2203      	movs	r2, #3
 80082f2:	4650      	mov	r0, sl
 80082f4:	7821      	ldrb	r1, [r4, #0]
 80082f6:	f7fd fc7e 	bl	8005bf6 <memchr>
 80082fa:	b138      	cbz	r0, 800830c <_svfiprintf_r+0x150>
 80082fc:	2240      	movs	r2, #64	@ 0x40
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	eba0 000a 	sub.w	r0, r0, sl
 8008304:	4082      	lsls	r2, r0
 8008306:	4313      	orrs	r3, r2
 8008308:	3401      	adds	r4, #1
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008310:	2206      	movs	r2, #6
 8008312:	4825      	ldr	r0, [pc, #148]	@ (80083a8 <_svfiprintf_r+0x1ec>)
 8008314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008318:	f7fd fc6d 	bl	8005bf6 <memchr>
 800831c:	2800      	cmp	r0, #0
 800831e:	d036      	beq.n	800838e <_svfiprintf_r+0x1d2>
 8008320:	4b22      	ldr	r3, [pc, #136]	@ (80083ac <_svfiprintf_r+0x1f0>)
 8008322:	bb1b      	cbnz	r3, 800836c <_svfiprintf_r+0x1b0>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	3307      	adds	r3, #7
 8008328:	f023 0307 	bic.w	r3, r3, #7
 800832c:	3308      	adds	r3, #8
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008332:	4433      	add	r3, r6
 8008334:	9309      	str	r3, [sp, #36]	@ 0x24
 8008336:	e76a      	b.n	800820e <_svfiprintf_r+0x52>
 8008338:	460c      	mov	r4, r1
 800833a:	2001      	movs	r0, #1
 800833c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008340:	e7a8      	b.n	8008294 <_svfiprintf_r+0xd8>
 8008342:	2300      	movs	r3, #0
 8008344:	f04f 0c0a 	mov.w	ip, #10
 8008348:	4619      	mov	r1, r3
 800834a:	3401      	adds	r4, #1
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	4620      	mov	r0, r4
 8008350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008354:	3a30      	subs	r2, #48	@ 0x30
 8008356:	2a09      	cmp	r2, #9
 8008358:	d903      	bls.n	8008362 <_svfiprintf_r+0x1a6>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c6      	beq.n	80082ec <_svfiprintf_r+0x130>
 800835e:	9105      	str	r1, [sp, #20]
 8008360:	e7c4      	b.n	80082ec <_svfiprintf_r+0x130>
 8008362:	4604      	mov	r4, r0
 8008364:	2301      	movs	r3, #1
 8008366:	fb0c 2101 	mla	r1, ip, r1, r2
 800836a:	e7f0      	b.n	800834e <_svfiprintf_r+0x192>
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4638      	mov	r0, r7
 8008374:	4b0e      	ldr	r3, [pc, #56]	@ (80083b0 <_svfiprintf_r+0x1f4>)
 8008376:	a904      	add	r1, sp, #16
 8008378:	f7fc fbc6 	bl	8004b08 <_printf_float>
 800837c:	1c42      	adds	r2, r0, #1
 800837e:	4606      	mov	r6, r0
 8008380:	d1d6      	bne.n	8008330 <_svfiprintf_r+0x174>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	065b      	lsls	r3, r3, #25
 8008386:	f53f af2d 	bmi.w	80081e4 <_svfiprintf_r+0x28>
 800838a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800838c:	e72c      	b.n	80081e8 <_svfiprintf_r+0x2c>
 800838e:	ab03      	add	r3, sp, #12
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	462a      	mov	r2, r5
 8008394:	4638      	mov	r0, r7
 8008396:	4b06      	ldr	r3, [pc, #24]	@ (80083b0 <_svfiprintf_r+0x1f4>)
 8008398:	a904      	add	r1, sp, #16
 800839a:	f7fc fe53 	bl	8005044 <_printf_i>
 800839e:	e7ed      	b.n	800837c <_svfiprintf_r+0x1c0>
 80083a0:	0800aad1 	.word	0x0800aad1
 80083a4:	0800aad7 	.word	0x0800aad7
 80083a8:	0800aadb 	.word	0x0800aadb
 80083ac:	08004b09 	.word	0x08004b09
 80083b0:	08008105 	.word	0x08008105

080083b4 <__sfputc_r>:
 80083b4:	6893      	ldr	r3, [r2, #8]
 80083b6:	b410      	push	{r4}
 80083b8:	3b01      	subs	r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	6093      	str	r3, [r2, #8]
 80083be:	da07      	bge.n	80083d0 <__sfputc_r+0x1c>
 80083c0:	6994      	ldr	r4, [r2, #24]
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	db01      	blt.n	80083ca <__sfputc_r+0x16>
 80083c6:	290a      	cmp	r1, #10
 80083c8:	d102      	bne.n	80083d0 <__sfputc_r+0x1c>
 80083ca:	bc10      	pop	{r4}
 80083cc:	f7fd baff 	b.w	80059ce <__swbuf_r>
 80083d0:	6813      	ldr	r3, [r2, #0]
 80083d2:	1c58      	adds	r0, r3, #1
 80083d4:	6010      	str	r0, [r2, #0]
 80083d6:	7019      	strb	r1, [r3, #0]
 80083d8:	4608      	mov	r0, r1
 80083da:	bc10      	pop	{r4}
 80083dc:	4770      	bx	lr

080083de <__sfputs_r>:
 80083de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	4614      	mov	r4, r2
 80083e6:	18d5      	adds	r5, r2, r3
 80083e8:	42ac      	cmp	r4, r5
 80083ea:	d101      	bne.n	80083f0 <__sfputs_r+0x12>
 80083ec:	2000      	movs	r0, #0
 80083ee:	e007      	b.n	8008400 <__sfputs_r+0x22>
 80083f0:	463a      	mov	r2, r7
 80083f2:	4630      	mov	r0, r6
 80083f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f8:	f7ff ffdc 	bl	80083b4 <__sfputc_r>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d1f3      	bne.n	80083e8 <__sfputs_r+0xa>
 8008400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008404 <_vfiprintf_r>:
 8008404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	460d      	mov	r5, r1
 800840a:	4614      	mov	r4, r2
 800840c:	4698      	mov	r8, r3
 800840e:	4606      	mov	r6, r0
 8008410:	b09d      	sub	sp, #116	@ 0x74
 8008412:	b118      	cbz	r0, 800841c <_vfiprintf_r+0x18>
 8008414:	6a03      	ldr	r3, [r0, #32]
 8008416:	b90b      	cbnz	r3, 800841c <_vfiprintf_r+0x18>
 8008418:	f7fd f9d0 	bl	80057bc <__sinit>
 800841c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800841e:	07d9      	lsls	r1, r3, #31
 8008420:	d405      	bmi.n	800842e <_vfiprintf_r+0x2a>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	059a      	lsls	r2, r3, #22
 8008426:	d402      	bmi.n	800842e <_vfiprintf_r+0x2a>
 8008428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800842a:	f7fd fbe2 	bl	8005bf2 <__retarget_lock_acquire_recursive>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	071b      	lsls	r3, r3, #28
 8008432:	d501      	bpl.n	8008438 <_vfiprintf_r+0x34>
 8008434:	692b      	ldr	r3, [r5, #16]
 8008436:	b99b      	cbnz	r3, 8008460 <_vfiprintf_r+0x5c>
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f7fd fb06 	bl	8005a4c <__swsetup_r>
 8008440:	b170      	cbz	r0, 8008460 <_vfiprintf_r+0x5c>
 8008442:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008444:	07dc      	lsls	r4, r3, #31
 8008446:	d504      	bpl.n	8008452 <_vfiprintf_r+0x4e>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b01d      	add	sp, #116	@ 0x74
 800844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	0598      	lsls	r0, r3, #22
 8008456:	d4f7      	bmi.n	8008448 <_vfiprintf_r+0x44>
 8008458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800845a:	f7fd fbcb 	bl	8005bf4 <__retarget_lock_release_recursive>
 800845e:	e7f3      	b.n	8008448 <_vfiprintf_r+0x44>
 8008460:	2300      	movs	r3, #0
 8008462:	9309      	str	r3, [sp, #36]	@ 0x24
 8008464:	2320      	movs	r3, #32
 8008466:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800846a:	2330      	movs	r3, #48	@ 0x30
 800846c:	f04f 0901 	mov.w	r9, #1
 8008470:	f8cd 800c 	str.w	r8, [sp, #12]
 8008474:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008620 <_vfiprintf_r+0x21c>
 8008478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800847c:	4623      	mov	r3, r4
 800847e:	469a      	mov	sl, r3
 8008480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008484:	b10a      	cbz	r2, 800848a <_vfiprintf_r+0x86>
 8008486:	2a25      	cmp	r2, #37	@ 0x25
 8008488:	d1f9      	bne.n	800847e <_vfiprintf_r+0x7a>
 800848a:	ebba 0b04 	subs.w	fp, sl, r4
 800848e:	d00b      	beq.n	80084a8 <_vfiprintf_r+0xa4>
 8008490:	465b      	mov	r3, fp
 8008492:	4622      	mov	r2, r4
 8008494:	4629      	mov	r1, r5
 8008496:	4630      	mov	r0, r6
 8008498:	f7ff ffa1 	bl	80083de <__sfputs_r>
 800849c:	3001      	adds	r0, #1
 800849e:	f000 80a7 	beq.w	80085f0 <_vfiprintf_r+0x1ec>
 80084a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a4:	445a      	add	r2, fp
 80084a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80084a8:	f89a 3000 	ldrb.w	r3, [sl]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 809f 	beq.w	80085f0 <_vfiprintf_r+0x1ec>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f04f 32ff 	mov.w	r2, #4294967295
 80084b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084bc:	f10a 0a01 	add.w	sl, sl, #1
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	9307      	str	r3, [sp, #28]
 80084c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80084ca:	4654      	mov	r4, sl
 80084cc:	2205      	movs	r2, #5
 80084ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d2:	4853      	ldr	r0, [pc, #332]	@ (8008620 <_vfiprintf_r+0x21c>)
 80084d4:	f7fd fb8f 	bl	8005bf6 <memchr>
 80084d8:	9a04      	ldr	r2, [sp, #16]
 80084da:	b9d8      	cbnz	r0, 8008514 <_vfiprintf_r+0x110>
 80084dc:	06d1      	lsls	r1, r2, #27
 80084de:	bf44      	itt	mi
 80084e0:	2320      	movmi	r3, #32
 80084e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084e6:	0713      	lsls	r3, r2, #28
 80084e8:	bf44      	itt	mi
 80084ea:	232b      	movmi	r3, #43	@ 0x2b
 80084ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f0:	f89a 3000 	ldrb.w	r3, [sl]
 80084f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80084f6:	d015      	beq.n	8008524 <_vfiprintf_r+0x120>
 80084f8:	4654      	mov	r4, sl
 80084fa:	2000      	movs	r0, #0
 80084fc:	f04f 0c0a 	mov.w	ip, #10
 8008500:	9a07      	ldr	r2, [sp, #28]
 8008502:	4621      	mov	r1, r4
 8008504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008508:	3b30      	subs	r3, #48	@ 0x30
 800850a:	2b09      	cmp	r3, #9
 800850c:	d94b      	bls.n	80085a6 <_vfiprintf_r+0x1a2>
 800850e:	b1b0      	cbz	r0, 800853e <_vfiprintf_r+0x13a>
 8008510:	9207      	str	r2, [sp, #28]
 8008512:	e014      	b.n	800853e <_vfiprintf_r+0x13a>
 8008514:	eba0 0308 	sub.w	r3, r0, r8
 8008518:	fa09 f303 	lsl.w	r3, r9, r3
 800851c:	4313      	orrs	r3, r2
 800851e:	46a2      	mov	sl, r4
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	e7d2      	b.n	80084ca <_vfiprintf_r+0xc6>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	1d19      	adds	r1, r3, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	9103      	str	r1, [sp, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfbb      	ittet	lt
 8008530:	425b      	neglt	r3, r3
 8008532:	f042 0202 	orrlt.w	r2, r2, #2
 8008536:	9307      	strge	r3, [sp, #28]
 8008538:	9307      	strlt	r3, [sp, #28]
 800853a:	bfb8      	it	lt
 800853c:	9204      	strlt	r2, [sp, #16]
 800853e:	7823      	ldrb	r3, [r4, #0]
 8008540:	2b2e      	cmp	r3, #46	@ 0x2e
 8008542:	d10a      	bne.n	800855a <_vfiprintf_r+0x156>
 8008544:	7863      	ldrb	r3, [r4, #1]
 8008546:	2b2a      	cmp	r3, #42	@ 0x2a
 8008548:	d132      	bne.n	80085b0 <_vfiprintf_r+0x1ac>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	3402      	adds	r4, #2
 800854e:	1d1a      	adds	r2, r3, #4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	9203      	str	r2, [sp, #12]
 8008554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008558:	9305      	str	r3, [sp, #20]
 800855a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008624 <_vfiprintf_r+0x220>
 800855e:	2203      	movs	r2, #3
 8008560:	4650      	mov	r0, sl
 8008562:	7821      	ldrb	r1, [r4, #0]
 8008564:	f7fd fb47 	bl	8005bf6 <memchr>
 8008568:	b138      	cbz	r0, 800857a <_vfiprintf_r+0x176>
 800856a:	2240      	movs	r2, #64	@ 0x40
 800856c:	9b04      	ldr	r3, [sp, #16]
 800856e:	eba0 000a 	sub.w	r0, r0, sl
 8008572:	4082      	lsls	r2, r0
 8008574:	4313      	orrs	r3, r2
 8008576:	3401      	adds	r4, #1
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857e:	2206      	movs	r2, #6
 8008580:	4829      	ldr	r0, [pc, #164]	@ (8008628 <_vfiprintf_r+0x224>)
 8008582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008586:	f7fd fb36 	bl	8005bf6 <memchr>
 800858a:	2800      	cmp	r0, #0
 800858c:	d03f      	beq.n	800860e <_vfiprintf_r+0x20a>
 800858e:	4b27      	ldr	r3, [pc, #156]	@ (800862c <_vfiprintf_r+0x228>)
 8008590:	bb1b      	cbnz	r3, 80085da <_vfiprintf_r+0x1d6>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	3307      	adds	r3, #7
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	3308      	adds	r3, #8
 800859c:	9303      	str	r3, [sp, #12]
 800859e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a0:	443b      	add	r3, r7
 80085a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a4:	e76a      	b.n	800847c <_vfiprintf_r+0x78>
 80085a6:	460c      	mov	r4, r1
 80085a8:	2001      	movs	r0, #1
 80085aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ae:	e7a8      	b.n	8008502 <_vfiprintf_r+0xfe>
 80085b0:	2300      	movs	r3, #0
 80085b2:	f04f 0c0a 	mov.w	ip, #10
 80085b6:	4619      	mov	r1, r3
 80085b8:	3401      	adds	r4, #1
 80085ba:	9305      	str	r3, [sp, #20]
 80085bc:	4620      	mov	r0, r4
 80085be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c2:	3a30      	subs	r2, #48	@ 0x30
 80085c4:	2a09      	cmp	r2, #9
 80085c6:	d903      	bls.n	80085d0 <_vfiprintf_r+0x1cc>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0c6      	beq.n	800855a <_vfiprintf_r+0x156>
 80085cc:	9105      	str	r1, [sp, #20]
 80085ce:	e7c4      	b.n	800855a <_vfiprintf_r+0x156>
 80085d0:	4604      	mov	r4, r0
 80085d2:	2301      	movs	r3, #1
 80085d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d8:	e7f0      	b.n	80085bc <_vfiprintf_r+0x1b8>
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	462a      	mov	r2, r5
 80085e0:	4630      	mov	r0, r6
 80085e2:	4b13      	ldr	r3, [pc, #76]	@ (8008630 <_vfiprintf_r+0x22c>)
 80085e4:	a904      	add	r1, sp, #16
 80085e6:	f7fc fa8f 	bl	8004b08 <_printf_float>
 80085ea:	4607      	mov	r7, r0
 80085ec:	1c78      	adds	r0, r7, #1
 80085ee:	d1d6      	bne.n	800859e <_vfiprintf_r+0x19a>
 80085f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f2:	07d9      	lsls	r1, r3, #31
 80085f4:	d405      	bmi.n	8008602 <_vfiprintf_r+0x1fe>
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	059a      	lsls	r2, r3, #22
 80085fa:	d402      	bmi.n	8008602 <_vfiprintf_r+0x1fe>
 80085fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085fe:	f7fd faf9 	bl	8005bf4 <__retarget_lock_release_recursive>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	065b      	lsls	r3, r3, #25
 8008606:	f53f af1f 	bmi.w	8008448 <_vfiprintf_r+0x44>
 800860a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800860c:	e71e      	b.n	800844c <_vfiprintf_r+0x48>
 800860e:	ab03      	add	r3, sp, #12
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	462a      	mov	r2, r5
 8008614:	4630      	mov	r0, r6
 8008616:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <_vfiprintf_r+0x22c>)
 8008618:	a904      	add	r1, sp, #16
 800861a:	f7fc fd13 	bl	8005044 <_printf_i>
 800861e:	e7e4      	b.n	80085ea <_vfiprintf_r+0x1e6>
 8008620:	0800aad1 	.word	0x0800aad1
 8008624:	0800aad7 	.word	0x0800aad7
 8008628:	0800aadb 	.word	0x0800aadb
 800862c:	08004b09 	.word	0x08004b09
 8008630:	080083df 	.word	0x080083df

08008634 <__sflush_r>:
 8008634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	0716      	lsls	r6, r2, #28
 800863c:	4605      	mov	r5, r0
 800863e:	460c      	mov	r4, r1
 8008640:	d454      	bmi.n	80086ec <__sflush_r+0xb8>
 8008642:	684b      	ldr	r3, [r1, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dc02      	bgt.n	800864e <__sflush_r+0x1a>
 8008648:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	dd48      	ble.n	80086e0 <__sflush_r+0xac>
 800864e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008650:	2e00      	cmp	r6, #0
 8008652:	d045      	beq.n	80086e0 <__sflush_r+0xac>
 8008654:	2300      	movs	r3, #0
 8008656:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800865a:	682f      	ldr	r7, [r5, #0]
 800865c:	6a21      	ldr	r1, [r4, #32]
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	d030      	beq.n	80086c4 <__sflush_r+0x90>
 8008662:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	0759      	lsls	r1, r3, #29
 8008668:	d505      	bpl.n	8008676 <__sflush_r+0x42>
 800866a:	6863      	ldr	r3, [r4, #4]
 800866c:	1ad2      	subs	r2, r2, r3
 800866e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008670:	b10b      	cbz	r3, 8008676 <__sflush_r+0x42>
 8008672:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008674:	1ad2      	subs	r2, r2, r3
 8008676:	2300      	movs	r3, #0
 8008678:	4628      	mov	r0, r5
 800867a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800867c:	6a21      	ldr	r1, [r4, #32]
 800867e:	47b0      	blx	r6
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	d106      	bne.n	8008694 <__sflush_r+0x60>
 8008686:	6829      	ldr	r1, [r5, #0]
 8008688:	291d      	cmp	r1, #29
 800868a:	d82b      	bhi.n	80086e4 <__sflush_r+0xb0>
 800868c:	4a28      	ldr	r2, [pc, #160]	@ (8008730 <__sflush_r+0xfc>)
 800868e:	410a      	asrs	r2, r1
 8008690:	07d6      	lsls	r6, r2, #31
 8008692:	d427      	bmi.n	80086e4 <__sflush_r+0xb0>
 8008694:	2200      	movs	r2, #0
 8008696:	6062      	str	r2, [r4, #4]
 8008698:	6922      	ldr	r2, [r4, #16]
 800869a:	04d9      	lsls	r1, r3, #19
 800869c:	6022      	str	r2, [r4, #0]
 800869e:	d504      	bpl.n	80086aa <__sflush_r+0x76>
 80086a0:	1c42      	adds	r2, r0, #1
 80086a2:	d101      	bne.n	80086a8 <__sflush_r+0x74>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b903      	cbnz	r3, 80086aa <__sflush_r+0x76>
 80086a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80086aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ac:	602f      	str	r7, [r5, #0]
 80086ae:	b1b9      	cbz	r1, 80086e0 <__sflush_r+0xac>
 80086b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086b4:	4299      	cmp	r1, r3
 80086b6:	d002      	beq.n	80086be <__sflush_r+0x8a>
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7fe f901 	bl	80068c0 <_free_r>
 80086be:	2300      	movs	r3, #0
 80086c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80086c2:	e00d      	b.n	80086e0 <__sflush_r+0xac>
 80086c4:	2301      	movs	r3, #1
 80086c6:	4628      	mov	r0, r5
 80086c8:	47b0      	blx	r6
 80086ca:	4602      	mov	r2, r0
 80086cc:	1c50      	adds	r0, r2, #1
 80086ce:	d1c9      	bne.n	8008664 <__sflush_r+0x30>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0c6      	beq.n	8008664 <__sflush_r+0x30>
 80086d6:	2b1d      	cmp	r3, #29
 80086d8:	d001      	beq.n	80086de <__sflush_r+0xaa>
 80086da:	2b16      	cmp	r3, #22
 80086dc:	d11d      	bne.n	800871a <__sflush_r+0xe6>
 80086de:	602f      	str	r7, [r5, #0]
 80086e0:	2000      	movs	r0, #0
 80086e2:	e021      	b.n	8008728 <__sflush_r+0xf4>
 80086e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e8:	b21b      	sxth	r3, r3
 80086ea:	e01a      	b.n	8008722 <__sflush_r+0xee>
 80086ec:	690f      	ldr	r7, [r1, #16]
 80086ee:	2f00      	cmp	r7, #0
 80086f0:	d0f6      	beq.n	80086e0 <__sflush_r+0xac>
 80086f2:	0793      	lsls	r3, r2, #30
 80086f4:	bf18      	it	ne
 80086f6:	2300      	movne	r3, #0
 80086f8:	680e      	ldr	r6, [r1, #0]
 80086fa:	bf08      	it	eq
 80086fc:	694b      	ldreq	r3, [r1, #20]
 80086fe:	1bf6      	subs	r6, r6, r7
 8008700:	600f      	str	r7, [r1, #0]
 8008702:	608b      	str	r3, [r1, #8]
 8008704:	2e00      	cmp	r6, #0
 8008706:	ddeb      	ble.n	80086e0 <__sflush_r+0xac>
 8008708:	4633      	mov	r3, r6
 800870a:	463a      	mov	r2, r7
 800870c:	4628      	mov	r0, r5
 800870e:	6a21      	ldr	r1, [r4, #32]
 8008710:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008714:	47e0      	blx	ip
 8008716:	2800      	cmp	r0, #0
 8008718:	dc07      	bgt.n	800872a <__sflush_r+0xf6>
 800871a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872a:	4407      	add	r7, r0
 800872c:	1a36      	subs	r6, r6, r0
 800872e:	e7e9      	b.n	8008704 <__sflush_r+0xd0>
 8008730:	dfbffffe 	.word	0xdfbffffe

08008734 <_fflush_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	690b      	ldr	r3, [r1, #16]
 8008738:	4605      	mov	r5, r0
 800873a:	460c      	mov	r4, r1
 800873c:	b913      	cbnz	r3, 8008744 <_fflush_r+0x10>
 800873e:	2500      	movs	r5, #0
 8008740:	4628      	mov	r0, r5
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	b118      	cbz	r0, 800874e <_fflush_r+0x1a>
 8008746:	6a03      	ldr	r3, [r0, #32]
 8008748:	b90b      	cbnz	r3, 800874e <_fflush_r+0x1a>
 800874a:	f7fd f837 	bl	80057bc <__sinit>
 800874e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0f3      	beq.n	800873e <_fflush_r+0xa>
 8008756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008758:	07d0      	lsls	r0, r2, #31
 800875a:	d404      	bmi.n	8008766 <_fflush_r+0x32>
 800875c:	0599      	lsls	r1, r3, #22
 800875e:	d402      	bmi.n	8008766 <_fflush_r+0x32>
 8008760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008762:	f7fd fa46 	bl	8005bf2 <__retarget_lock_acquire_recursive>
 8008766:	4628      	mov	r0, r5
 8008768:	4621      	mov	r1, r4
 800876a:	f7ff ff63 	bl	8008634 <__sflush_r>
 800876e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008770:	4605      	mov	r5, r0
 8008772:	07da      	lsls	r2, r3, #31
 8008774:	d4e4      	bmi.n	8008740 <_fflush_r+0xc>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	059b      	lsls	r3, r3, #22
 800877a:	d4e1      	bmi.n	8008740 <_fflush_r+0xc>
 800877c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800877e:	f7fd fa39 	bl	8005bf4 <__retarget_lock_release_recursive>
 8008782:	e7dd      	b.n	8008740 <_fflush_r+0xc>

08008784 <__swhatbuf_r>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	460c      	mov	r4, r1
 8008788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878c:	4615      	mov	r5, r2
 800878e:	2900      	cmp	r1, #0
 8008790:	461e      	mov	r6, r3
 8008792:	b096      	sub	sp, #88	@ 0x58
 8008794:	da0c      	bge.n	80087b0 <__swhatbuf_r+0x2c>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	2100      	movs	r1, #0
 800879a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800879e:	bf14      	ite	ne
 80087a0:	2340      	movne	r3, #64	@ 0x40
 80087a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087a6:	2000      	movs	r0, #0
 80087a8:	6031      	str	r1, [r6, #0]
 80087aa:	602b      	str	r3, [r5, #0]
 80087ac:	b016      	add	sp, #88	@ 0x58
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	466a      	mov	r2, sp
 80087b2:	f000 f875 	bl	80088a0 <_fstat_r>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	dbed      	blt.n	8008796 <__swhatbuf_r+0x12>
 80087ba:	9901      	ldr	r1, [sp, #4]
 80087bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087c4:	4259      	negs	r1, r3
 80087c6:	4159      	adcs	r1, r3
 80087c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087cc:	e7eb      	b.n	80087a6 <__swhatbuf_r+0x22>

080087ce <__smakebuf_r>:
 80087ce:	898b      	ldrh	r3, [r1, #12]
 80087d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087d2:	079d      	lsls	r5, r3, #30
 80087d4:	4606      	mov	r6, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	d507      	bpl.n	80087ea <__smakebuf_r+0x1c>
 80087da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	6123      	str	r3, [r4, #16]
 80087e2:	2301      	movs	r3, #1
 80087e4:	6163      	str	r3, [r4, #20]
 80087e6:	b003      	add	sp, #12
 80087e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ea:	466a      	mov	r2, sp
 80087ec:	ab01      	add	r3, sp, #4
 80087ee:	f7ff ffc9 	bl	8008784 <__swhatbuf_r>
 80087f2:	9f00      	ldr	r7, [sp, #0]
 80087f4:	4605      	mov	r5, r0
 80087f6:	4639      	mov	r1, r7
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7fe f8d3 	bl	80069a4 <_malloc_r>
 80087fe:	b948      	cbnz	r0, 8008814 <__smakebuf_r+0x46>
 8008800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008804:	059a      	lsls	r2, r3, #22
 8008806:	d4ee      	bmi.n	80087e6 <__smakebuf_r+0x18>
 8008808:	f023 0303 	bic.w	r3, r3, #3
 800880c:	f043 0302 	orr.w	r3, r3, #2
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	e7e2      	b.n	80087da <__smakebuf_r+0xc>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800881a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	6020      	str	r0, [r4, #0]
 8008824:	b15b      	cbz	r3, 800883e <__smakebuf_r+0x70>
 8008826:	4630      	mov	r0, r6
 8008828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800882c:	f000 f84a 	bl	80088c4 <_isatty_r>
 8008830:	b128      	cbz	r0, 800883e <__smakebuf_r+0x70>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f023 0303 	bic.w	r3, r3, #3
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	431d      	orrs	r5, r3
 8008842:	81a5      	strh	r5, [r4, #12]
 8008844:	e7cf      	b.n	80087e6 <__smakebuf_r+0x18>

08008846 <memmove>:
 8008846:	4288      	cmp	r0, r1
 8008848:	b510      	push	{r4, lr}
 800884a:	eb01 0402 	add.w	r4, r1, r2
 800884e:	d902      	bls.n	8008856 <memmove+0x10>
 8008850:	4284      	cmp	r4, r0
 8008852:	4623      	mov	r3, r4
 8008854:	d807      	bhi.n	8008866 <memmove+0x20>
 8008856:	1e43      	subs	r3, r0, #1
 8008858:	42a1      	cmp	r1, r4
 800885a:	d008      	beq.n	800886e <memmove+0x28>
 800885c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008860:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008864:	e7f8      	b.n	8008858 <memmove+0x12>
 8008866:	4601      	mov	r1, r0
 8008868:	4402      	add	r2, r0
 800886a:	428a      	cmp	r2, r1
 800886c:	d100      	bne.n	8008870 <memmove+0x2a>
 800886e:	bd10      	pop	{r4, pc}
 8008870:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008874:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008878:	e7f7      	b.n	800886a <memmove+0x24>

0800887a <strncmp>:
 800887a:	b510      	push	{r4, lr}
 800887c:	b16a      	cbz	r2, 800889a <strncmp+0x20>
 800887e:	3901      	subs	r1, #1
 8008880:	1884      	adds	r4, r0, r2
 8008882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008886:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800888a:	429a      	cmp	r2, r3
 800888c:	d103      	bne.n	8008896 <strncmp+0x1c>
 800888e:	42a0      	cmp	r0, r4
 8008890:	d001      	beq.n	8008896 <strncmp+0x1c>
 8008892:	2a00      	cmp	r2, #0
 8008894:	d1f5      	bne.n	8008882 <strncmp+0x8>
 8008896:	1ad0      	subs	r0, r2, r3
 8008898:	bd10      	pop	{r4, pc}
 800889a:	4610      	mov	r0, r2
 800889c:	e7fc      	b.n	8008898 <strncmp+0x1e>
	...

080088a0 <_fstat_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	2300      	movs	r3, #0
 80088a4:	4d06      	ldr	r5, [pc, #24]	@ (80088c0 <_fstat_r+0x20>)
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	f7f9 fb85 	bl	8001fbc <_fstat>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d102      	bne.n	80088bc <_fstat_r+0x1c>
 80088b6:	682b      	ldr	r3, [r5, #0]
 80088b8:	b103      	cbz	r3, 80088bc <_fstat_r+0x1c>
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	2000047c 	.word	0x2000047c

080088c4 <_isatty_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	2300      	movs	r3, #0
 80088c8:	4d05      	ldr	r5, [pc, #20]	@ (80088e0 <_isatty_r+0x1c>)
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	f7f9 fb83 	bl	8001fda <_isatty>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_isatty_r+0x1a>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_isatty_r+0x1a>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	2000047c 	.word	0x2000047c

080088e4 <_sbrk_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	2300      	movs	r3, #0
 80088e8:	4d05      	ldr	r5, [pc, #20]	@ (8008900 <_sbrk_r+0x1c>)
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	602b      	str	r3, [r5, #0]
 80088f0:	f7f9 fb8a 	bl	8002008 <_sbrk>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_sbrk_r+0x1a>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_sbrk_r+0x1a>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	2000047c 	.word	0x2000047c

08008904 <memcpy>:
 8008904:	440a      	add	r2, r1
 8008906:	4291      	cmp	r1, r2
 8008908:	f100 33ff 	add.w	r3, r0, #4294967295
 800890c:	d100      	bne.n	8008910 <memcpy+0xc>
 800890e:	4770      	bx	lr
 8008910:	b510      	push	{r4, lr}
 8008912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008916:	4291      	cmp	r1, r2
 8008918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800891c:	d1f9      	bne.n	8008912 <memcpy+0xe>
 800891e:	bd10      	pop	{r4, pc}

08008920 <nan>:
 8008920:	2000      	movs	r0, #0
 8008922:	4901      	ldr	r1, [pc, #4]	@ (8008928 <nan+0x8>)
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	7ff80000 	.word	0x7ff80000

0800892c <__assert_func>:
 800892c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800892e:	4614      	mov	r4, r2
 8008930:	461a      	mov	r2, r3
 8008932:	4b09      	ldr	r3, [pc, #36]	@ (8008958 <__assert_func+0x2c>)
 8008934:	4605      	mov	r5, r0
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68d8      	ldr	r0, [r3, #12]
 800893a:	b954      	cbnz	r4, 8008952 <__assert_func+0x26>
 800893c:	4b07      	ldr	r3, [pc, #28]	@ (800895c <__assert_func+0x30>)
 800893e:	461c      	mov	r4, r3
 8008940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008944:	9100      	str	r1, [sp, #0]
 8008946:	462b      	mov	r3, r5
 8008948:	4905      	ldr	r1, [pc, #20]	@ (8008960 <__assert_func+0x34>)
 800894a:	f000 fba7 	bl	800909c <fiprintf>
 800894e:	f000 fbb7 	bl	80090c0 <abort>
 8008952:	4b04      	ldr	r3, [pc, #16]	@ (8008964 <__assert_func+0x38>)
 8008954:	e7f4      	b.n	8008940 <__assert_func+0x14>
 8008956:	bf00      	nop
 8008958:	20000018 	.word	0x20000018
 800895c:	0800ab25 	.word	0x0800ab25
 8008960:	0800aaf7 	.word	0x0800aaf7
 8008964:	0800aaea 	.word	0x0800aaea

08008968 <_calloc_r>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	fba1 5402 	umull	r5, r4, r1, r2
 800896e:	b93c      	cbnz	r4, 8008980 <_calloc_r+0x18>
 8008970:	4629      	mov	r1, r5
 8008972:	f7fe f817 	bl	80069a4 <_malloc_r>
 8008976:	4606      	mov	r6, r0
 8008978:	b928      	cbnz	r0, 8008986 <_calloc_r+0x1e>
 800897a:	2600      	movs	r6, #0
 800897c:	4630      	mov	r0, r6
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	220c      	movs	r2, #12
 8008982:	6002      	str	r2, [r0, #0]
 8008984:	e7f9      	b.n	800897a <_calloc_r+0x12>
 8008986:	462a      	mov	r2, r5
 8008988:	4621      	mov	r1, r4
 800898a:	f7fd f8b5 	bl	8005af8 <memset>
 800898e:	e7f5      	b.n	800897c <_calloc_r+0x14>

08008990 <rshift>:
 8008990:	6903      	ldr	r3, [r0, #16]
 8008992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008996:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800899a:	f100 0414 	add.w	r4, r0, #20
 800899e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089a2:	dd46      	ble.n	8008a32 <rshift+0xa2>
 80089a4:	f011 011f 	ands.w	r1, r1, #31
 80089a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089b0:	d10c      	bne.n	80089cc <rshift+0x3c>
 80089b2:	4629      	mov	r1, r5
 80089b4:	f100 0710 	add.w	r7, r0, #16
 80089b8:	42b1      	cmp	r1, r6
 80089ba:	d335      	bcc.n	8008a28 <rshift+0x98>
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	1eea      	subs	r2, r5, #3
 80089c2:	4296      	cmp	r6, r2
 80089c4:	bf38      	it	cc
 80089c6:	2300      	movcc	r3, #0
 80089c8:	4423      	add	r3, r4
 80089ca:	e015      	b.n	80089f8 <rshift+0x68>
 80089cc:	46a1      	mov	r9, r4
 80089ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089d2:	f1c1 0820 	rsb	r8, r1, #32
 80089d6:	40cf      	lsrs	r7, r1
 80089d8:	f105 0e04 	add.w	lr, r5, #4
 80089dc:	4576      	cmp	r6, lr
 80089de:	46f4      	mov	ip, lr
 80089e0:	d816      	bhi.n	8008a10 <rshift+0x80>
 80089e2:	1a9a      	subs	r2, r3, r2
 80089e4:	0092      	lsls	r2, r2, #2
 80089e6:	3a04      	subs	r2, #4
 80089e8:	3501      	adds	r5, #1
 80089ea:	42ae      	cmp	r6, r5
 80089ec:	bf38      	it	cc
 80089ee:	2200      	movcc	r2, #0
 80089f0:	18a3      	adds	r3, r4, r2
 80089f2:	50a7      	str	r7, [r4, r2]
 80089f4:	b107      	cbz	r7, 80089f8 <rshift+0x68>
 80089f6:	3304      	adds	r3, #4
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	eba3 0204 	sub.w	r2, r3, r4
 80089fe:	bf08      	it	eq
 8008a00:	2300      	moveq	r3, #0
 8008a02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a06:	6102      	str	r2, [r0, #16]
 8008a08:	bf08      	it	eq
 8008a0a:	6143      	streq	r3, [r0, #20]
 8008a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a10:	f8dc c000 	ldr.w	ip, [ip]
 8008a14:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a18:	ea4c 0707 	orr.w	r7, ip, r7
 8008a1c:	f849 7b04 	str.w	r7, [r9], #4
 8008a20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a24:	40cf      	lsrs	r7, r1
 8008a26:	e7d9      	b.n	80089dc <rshift+0x4c>
 8008a28:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a30:	e7c2      	b.n	80089b8 <rshift+0x28>
 8008a32:	4623      	mov	r3, r4
 8008a34:	e7e0      	b.n	80089f8 <rshift+0x68>

08008a36 <__hexdig_fun>:
 8008a36:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008a3a:	2b09      	cmp	r3, #9
 8008a3c:	d802      	bhi.n	8008a44 <__hexdig_fun+0xe>
 8008a3e:	3820      	subs	r0, #32
 8008a40:	b2c0      	uxtb	r0, r0
 8008a42:	4770      	bx	lr
 8008a44:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008a48:	2b05      	cmp	r3, #5
 8008a4a:	d801      	bhi.n	8008a50 <__hexdig_fun+0x1a>
 8008a4c:	3847      	subs	r0, #71	@ 0x47
 8008a4e:	e7f7      	b.n	8008a40 <__hexdig_fun+0xa>
 8008a50:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008a54:	2b05      	cmp	r3, #5
 8008a56:	d801      	bhi.n	8008a5c <__hexdig_fun+0x26>
 8008a58:	3827      	subs	r0, #39	@ 0x27
 8008a5a:	e7f1      	b.n	8008a40 <__hexdig_fun+0xa>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	4770      	bx	lr

08008a60 <__gethex>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	468a      	mov	sl, r1
 8008a66:	4690      	mov	r8, r2
 8008a68:	b085      	sub	sp, #20
 8008a6a:	9302      	str	r3, [sp, #8]
 8008a6c:	680b      	ldr	r3, [r1, #0]
 8008a6e:	9001      	str	r0, [sp, #4]
 8008a70:	1c9c      	adds	r4, r3, #2
 8008a72:	46a1      	mov	r9, r4
 8008a74:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008a78:	2830      	cmp	r0, #48	@ 0x30
 8008a7a:	d0fa      	beq.n	8008a72 <__gethex+0x12>
 8008a7c:	eba9 0303 	sub.w	r3, r9, r3
 8008a80:	f1a3 0b02 	sub.w	fp, r3, #2
 8008a84:	f7ff ffd7 	bl	8008a36 <__hexdig_fun>
 8008a88:	4605      	mov	r5, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d168      	bne.n	8008b60 <__gethex+0x100>
 8008a8e:	2201      	movs	r2, #1
 8008a90:	4648      	mov	r0, r9
 8008a92:	499f      	ldr	r1, [pc, #636]	@ (8008d10 <__gethex+0x2b0>)
 8008a94:	f7ff fef1 	bl	800887a <strncmp>
 8008a98:	4607      	mov	r7, r0
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d167      	bne.n	8008b6e <__gethex+0x10e>
 8008a9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008aa2:	4626      	mov	r6, r4
 8008aa4:	f7ff ffc7 	bl	8008a36 <__hexdig_fun>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d062      	beq.n	8008b72 <__gethex+0x112>
 8008aac:	4623      	mov	r3, r4
 8008aae:	7818      	ldrb	r0, [r3, #0]
 8008ab0:	4699      	mov	r9, r3
 8008ab2:	2830      	cmp	r0, #48	@ 0x30
 8008ab4:	f103 0301 	add.w	r3, r3, #1
 8008ab8:	d0f9      	beq.n	8008aae <__gethex+0x4e>
 8008aba:	f7ff ffbc 	bl	8008a36 <__hexdig_fun>
 8008abe:	fab0 f580 	clz	r5, r0
 8008ac2:	f04f 0b01 	mov.w	fp, #1
 8008ac6:	096d      	lsrs	r5, r5, #5
 8008ac8:	464a      	mov	r2, r9
 8008aca:	4616      	mov	r6, r2
 8008acc:	7830      	ldrb	r0, [r6, #0]
 8008ace:	3201      	adds	r2, #1
 8008ad0:	f7ff ffb1 	bl	8008a36 <__hexdig_fun>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1f8      	bne.n	8008aca <__gethex+0x6a>
 8008ad8:	2201      	movs	r2, #1
 8008ada:	4630      	mov	r0, r6
 8008adc:	498c      	ldr	r1, [pc, #560]	@ (8008d10 <__gethex+0x2b0>)
 8008ade:	f7ff fecc 	bl	800887a <strncmp>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d13f      	bne.n	8008b66 <__gethex+0x106>
 8008ae6:	b944      	cbnz	r4, 8008afa <__gethex+0x9a>
 8008ae8:	1c74      	adds	r4, r6, #1
 8008aea:	4622      	mov	r2, r4
 8008aec:	4616      	mov	r6, r2
 8008aee:	7830      	ldrb	r0, [r6, #0]
 8008af0:	3201      	adds	r2, #1
 8008af2:	f7ff ffa0 	bl	8008a36 <__hexdig_fun>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d1f8      	bne.n	8008aec <__gethex+0x8c>
 8008afa:	1ba4      	subs	r4, r4, r6
 8008afc:	00a7      	lsls	r7, r4, #2
 8008afe:	7833      	ldrb	r3, [r6, #0]
 8008b00:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b04:	2b50      	cmp	r3, #80	@ 0x50
 8008b06:	d13e      	bne.n	8008b86 <__gethex+0x126>
 8008b08:	7873      	ldrb	r3, [r6, #1]
 8008b0a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b0c:	d033      	beq.n	8008b76 <__gethex+0x116>
 8008b0e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b10:	d034      	beq.n	8008b7c <__gethex+0x11c>
 8008b12:	2400      	movs	r4, #0
 8008b14:	1c71      	adds	r1, r6, #1
 8008b16:	7808      	ldrb	r0, [r1, #0]
 8008b18:	f7ff ff8d 	bl	8008a36 <__hexdig_fun>
 8008b1c:	1e43      	subs	r3, r0, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b18      	cmp	r3, #24
 8008b22:	d830      	bhi.n	8008b86 <__gethex+0x126>
 8008b24:	f1a0 0210 	sub.w	r2, r0, #16
 8008b28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b2c:	f7ff ff83 	bl	8008a36 <__hexdig_fun>
 8008b30:	f100 3cff 	add.w	ip, r0, #4294967295
 8008b34:	fa5f fc8c 	uxtb.w	ip, ip
 8008b38:	f1bc 0f18 	cmp.w	ip, #24
 8008b3c:	f04f 030a 	mov.w	r3, #10
 8008b40:	d91e      	bls.n	8008b80 <__gethex+0x120>
 8008b42:	b104      	cbz	r4, 8008b46 <__gethex+0xe6>
 8008b44:	4252      	negs	r2, r2
 8008b46:	4417      	add	r7, r2
 8008b48:	f8ca 1000 	str.w	r1, [sl]
 8008b4c:	b1ed      	cbz	r5, 8008b8a <__gethex+0x12a>
 8008b4e:	f1bb 0f00 	cmp.w	fp, #0
 8008b52:	bf0c      	ite	eq
 8008b54:	2506      	moveq	r5, #6
 8008b56:	2500      	movne	r5, #0
 8008b58:	4628      	mov	r0, r5
 8008b5a:	b005      	add	sp, #20
 8008b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b60:	2500      	movs	r5, #0
 8008b62:	462c      	mov	r4, r5
 8008b64:	e7b0      	b.n	8008ac8 <__gethex+0x68>
 8008b66:	2c00      	cmp	r4, #0
 8008b68:	d1c7      	bne.n	8008afa <__gethex+0x9a>
 8008b6a:	4627      	mov	r7, r4
 8008b6c:	e7c7      	b.n	8008afe <__gethex+0x9e>
 8008b6e:	464e      	mov	r6, r9
 8008b70:	462f      	mov	r7, r5
 8008b72:	2501      	movs	r5, #1
 8008b74:	e7c3      	b.n	8008afe <__gethex+0x9e>
 8008b76:	2400      	movs	r4, #0
 8008b78:	1cb1      	adds	r1, r6, #2
 8008b7a:	e7cc      	b.n	8008b16 <__gethex+0xb6>
 8008b7c:	2401      	movs	r4, #1
 8008b7e:	e7fb      	b.n	8008b78 <__gethex+0x118>
 8008b80:	fb03 0002 	mla	r0, r3, r2, r0
 8008b84:	e7ce      	b.n	8008b24 <__gethex+0xc4>
 8008b86:	4631      	mov	r1, r6
 8008b88:	e7de      	b.n	8008b48 <__gethex+0xe8>
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	eba6 0309 	sub.w	r3, r6, r9
 8008b90:	3b01      	subs	r3, #1
 8008b92:	2b07      	cmp	r3, #7
 8008b94:	dc0a      	bgt.n	8008bac <__gethex+0x14c>
 8008b96:	9801      	ldr	r0, [sp, #4]
 8008b98:	f7fd ff90 	bl	8006abc <_Balloc>
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	b940      	cbnz	r0, 8008bb2 <__gethex+0x152>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	21e4      	movs	r1, #228	@ 0xe4
 8008ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8008d14 <__gethex+0x2b4>)
 8008ba6:	485c      	ldr	r0, [pc, #368]	@ (8008d18 <__gethex+0x2b8>)
 8008ba8:	f7ff fec0 	bl	800892c <__assert_func>
 8008bac:	3101      	adds	r1, #1
 8008bae:	105b      	asrs	r3, r3, #1
 8008bb0:	e7ef      	b.n	8008b92 <__gethex+0x132>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f100 0a14 	add.w	sl, r0, #20
 8008bb8:	4655      	mov	r5, sl
 8008bba:	469b      	mov	fp, r3
 8008bbc:	45b1      	cmp	r9, r6
 8008bbe:	d337      	bcc.n	8008c30 <__gethex+0x1d0>
 8008bc0:	f845 bb04 	str.w	fp, [r5], #4
 8008bc4:	eba5 050a 	sub.w	r5, r5, sl
 8008bc8:	10ad      	asrs	r5, r5, #2
 8008bca:	6125      	str	r5, [r4, #16]
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f7fe f867 	bl	8006ca0 <__hi0bits>
 8008bd2:	016d      	lsls	r5, r5, #5
 8008bd4:	f8d8 6000 	ldr.w	r6, [r8]
 8008bd8:	1a2d      	subs	r5, r5, r0
 8008bda:	42b5      	cmp	r5, r6
 8008bdc:	dd54      	ble.n	8008c88 <__gethex+0x228>
 8008bde:	1bad      	subs	r5, r5, r6
 8008be0:	4629      	mov	r1, r5
 8008be2:	4620      	mov	r0, r4
 8008be4:	f7fe fbef 	bl	80073c6 <__any_on>
 8008be8:	4681      	mov	r9, r0
 8008bea:	b178      	cbz	r0, 8008c0c <__gethex+0x1ac>
 8008bec:	f04f 0901 	mov.w	r9, #1
 8008bf0:	1e6b      	subs	r3, r5, #1
 8008bf2:	1159      	asrs	r1, r3, #5
 8008bf4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008bf8:	f003 021f 	and.w	r2, r3, #31
 8008bfc:	fa09 f202 	lsl.w	r2, r9, r2
 8008c00:	420a      	tst	r2, r1
 8008c02:	d003      	beq.n	8008c0c <__gethex+0x1ac>
 8008c04:	454b      	cmp	r3, r9
 8008c06:	dc36      	bgt.n	8008c76 <__gethex+0x216>
 8008c08:	f04f 0902 	mov.w	r9, #2
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7ff febe 	bl	8008990 <rshift>
 8008c14:	442f      	add	r7, r5
 8008c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c1a:	42bb      	cmp	r3, r7
 8008c1c:	da42      	bge.n	8008ca4 <__gethex+0x244>
 8008c1e:	4621      	mov	r1, r4
 8008c20:	9801      	ldr	r0, [sp, #4]
 8008c22:	f7fd ff8b 	bl	8006b3c <_Bfree>
 8008c26:	2300      	movs	r3, #0
 8008c28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c2a:	25a3      	movs	r5, #163	@ 0xa3
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e793      	b.n	8008b58 <__gethex+0xf8>
 8008c30:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008c34:	2a2e      	cmp	r2, #46	@ 0x2e
 8008c36:	d012      	beq.n	8008c5e <__gethex+0x1fe>
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d104      	bne.n	8008c46 <__gethex+0x1e6>
 8008c3c:	f845 bb04 	str.w	fp, [r5], #4
 8008c40:	f04f 0b00 	mov.w	fp, #0
 8008c44:	465b      	mov	r3, fp
 8008c46:	7830      	ldrb	r0, [r6, #0]
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	f7ff fef4 	bl	8008a36 <__hexdig_fun>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	f000 000f 	and.w	r0, r0, #15
 8008c54:	4098      	lsls	r0, r3
 8008c56:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	e7ae      	b.n	8008bbc <__gethex+0x15c>
 8008c5e:	45b1      	cmp	r9, r6
 8008c60:	d8ea      	bhi.n	8008c38 <__gethex+0x1d8>
 8008c62:	2201      	movs	r2, #1
 8008c64:	4630      	mov	r0, r6
 8008c66:	492a      	ldr	r1, [pc, #168]	@ (8008d10 <__gethex+0x2b0>)
 8008c68:	9303      	str	r3, [sp, #12]
 8008c6a:	f7ff fe06 	bl	800887a <strncmp>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1e1      	bne.n	8008c38 <__gethex+0x1d8>
 8008c74:	e7a2      	b.n	8008bbc <__gethex+0x15c>
 8008c76:	4620      	mov	r0, r4
 8008c78:	1ea9      	subs	r1, r5, #2
 8008c7a:	f7fe fba4 	bl	80073c6 <__any_on>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d0c2      	beq.n	8008c08 <__gethex+0x1a8>
 8008c82:	f04f 0903 	mov.w	r9, #3
 8008c86:	e7c1      	b.n	8008c0c <__gethex+0x1ac>
 8008c88:	da09      	bge.n	8008c9e <__gethex+0x23e>
 8008c8a:	1b75      	subs	r5, r6, r5
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	462a      	mov	r2, r5
 8008c90:	9801      	ldr	r0, [sp, #4]
 8008c92:	f7fe f969 	bl	8006f68 <__lshift>
 8008c96:	4604      	mov	r4, r0
 8008c98:	1b7f      	subs	r7, r7, r5
 8008c9a:	f100 0a14 	add.w	sl, r0, #20
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	e7b8      	b.n	8008c16 <__gethex+0x1b6>
 8008ca4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ca8:	42bd      	cmp	r5, r7
 8008caa:	dd6f      	ble.n	8008d8c <__gethex+0x32c>
 8008cac:	1bed      	subs	r5, r5, r7
 8008cae:	42ae      	cmp	r6, r5
 8008cb0:	dc34      	bgt.n	8008d1c <__gethex+0x2bc>
 8008cb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d022      	beq.n	8008d00 <__gethex+0x2a0>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d024      	beq.n	8008d08 <__gethex+0x2a8>
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d115      	bne.n	8008cee <__gethex+0x28e>
 8008cc2:	42ae      	cmp	r6, r5
 8008cc4:	d113      	bne.n	8008cee <__gethex+0x28e>
 8008cc6:	2e01      	cmp	r6, #1
 8008cc8:	d10b      	bne.n	8008ce2 <__gethex+0x282>
 8008cca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cce:	9a02      	ldr	r2, [sp, #8]
 8008cd0:	2562      	movs	r5, #98	@ 0x62
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	f8ca 3000 	str.w	r3, [sl]
 8008cdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cde:	601c      	str	r4, [r3, #0]
 8008ce0:	e73a      	b.n	8008b58 <__gethex+0xf8>
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	1e71      	subs	r1, r6, #1
 8008ce6:	f7fe fb6e 	bl	80073c6 <__any_on>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d1ed      	bne.n	8008cca <__gethex+0x26a>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	9801      	ldr	r0, [sp, #4]
 8008cf2:	f7fd ff23 	bl	8006b3c <_Bfree>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cfa:	2550      	movs	r5, #80	@ 0x50
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	e72b      	b.n	8008b58 <__gethex+0xf8>
 8008d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f3      	bne.n	8008cee <__gethex+0x28e>
 8008d06:	e7e0      	b.n	8008cca <__gethex+0x26a>
 8008d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1dd      	bne.n	8008cca <__gethex+0x26a>
 8008d0e:	e7ee      	b.n	8008cee <__gethex+0x28e>
 8008d10:	0800a978 	.word	0x0800a978
 8008d14:	0800a80b 	.word	0x0800a80b
 8008d18:	0800ab26 	.word	0x0800ab26
 8008d1c:	1e6f      	subs	r7, r5, #1
 8008d1e:	f1b9 0f00 	cmp.w	r9, #0
 8008d22:	d130      	bne.n	8008d86 <__gethex+0x326>
 8008d24:	b127      	cbz	r7, 8008d30 <__gethex+0x2d0>
 8008d26:	4639      	mov	r1, r7
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f7fe fb4c 	bl	80073c6 <__any_on>
 8008d2e:	4681      	mov	r9, r0
 8008d30:	2301      	movs	r3, #1
 8008d32:	4629      	mov	r1, r5
 8008d34:	1b76      	subs	r6, r6, r5
 8008d36:	2502      	movs	r5, #2
 8008d38:	117a      	asrs	r2, r7, #5
 8008d3a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d3e:	f007 071f 	and.w	r7, r7, #31
 8008d42:	40bb      	lsls	r3, r7
 8008d44:	4213      	tst	r3, r2
 8008d46:	4620      	mov	r0, r4
 8008d48:	bf18      	it	ne
 8008d4a:	f049 0902 	orrne.w	r9, r9, #2
 8008d4e:	f7ff fe1f 	bl	8008990 <rshift>
 8008d52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008d56:	f1b9 0f00 	cmp.w	r9, #0
 8008d5a:	d047      	beq.n	8008dec <__gethex+0x38c>
 8008d5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d015      	beq.n	8008d90 <__gethex+0x330>
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d017      	beq.n	8008d98 <__gethex+0x338>
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d109      	bne.n	8008d80 <__gethex+0x320>
 8008d6c:	f019 0f02 	tst.w	r9, #2
 8008d70:	d006      	beq.n	8008d80 <__gethex+0x320>
 8008d72:	f8da 3000 	ldr.w	r3, [sl]
 8008d76:	ea49 0903 	orr.w	r9, r9, r3
 8008d7a:	f019 0f01 	tst.w	r9, #1
 8008d7e:	d10e      	bne.n	8008d9e <__gethex+0x33e>
 8008d80:	f045 0510 	orr.w	r5, r5, #16
 8008d84:	e032      	b.n	8008dec <__gethex+0x38c>
 8008d86:	f04f 0901 	mov.w	r9, #1
 8008d8a:	e7d1      	b.n	8008d30 <__gethex+0x2d0>
 8008d8c:	2501      	movs	r5, #1
 8008d8e:	e7e2      	b.n	8008d56 <__gethex+0x2f6>
 8008d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d92:	f1c3 0301 	rsb	r3, r3, #1
 8008d96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0f0      	beq.n	8008d80 <__gethex+0x320>
 8008d9e:	f04f 0c00 	mov.w	ip, #0
 8008da2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008da6:	f104 0314 	add.w	r3, r4, #20
 8008daa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008dbc:	d01b      	beq.n	8008df6 <__gethex+0x396>
 8008dbe:	3201      	adds	r2, #1
 8008dc0:	6002      	str	r2, [r0, #0]
 8008dc2:	2d02      	cmp	r5, #2
 8008dc4:	f104 0314 	add.w	r3, r4, #20
 8008dc8:	d13c      	bne.n	8008e44 <__gethex+0x3e4>
 8008dca:	f8d8 2000 	ldr.w	r2, [r8]
 8008dce:	3a01      	subs	r2, #1
 8008dd0:	42b2      	cmp	r2, r6
 8008dd2:	d109      	bne.n	8008de8 <__gethex+0x388>
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	1171      	asrs	r1, r6, #5
 8008dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ddc:	f006 061f 	and.w	r6, r6, #31
 8008de0:	fa02 f606 	lsl.w	r6, r2, r6
 8008de4:	421e      	tst	r6, r3
 8008de6:	d13a      	bne.n	8008e5e <__gethex+0x3fe>
 8008de8:	f045 0520 	orr.w	r5, r5, #32
 8008dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dee:	601c      	str	r4, [r3, #0]
 8008df0:	9b02      	ldr	r3, [sp, #8]
 8008df2:	601f      	str	r7, [r3, #0]
 8008df4:	e6b0      	b.n	8008b58 <__gethex+0xf8>
 8008df6:	4299      	cmp	r1, r3
 8008df8:	f843 cc04 	str.w	ip, [r3, #-4]
 8008dfc:	d8d9      	bhi.n	8008db2 <__gethex+0x352>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	459b      	cmp	fp, r3
 8008e02:	db17      	blt.n	8008e34 <__gethex+0x3d4>
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	9801      	ldr	r0, [sp, #4]
 8008e08:	3101      	adds	r1, #1
 8008e0a:	f7fd fe57 	bl	8006abc <_Balloc>
 8008e0e:	4681      	mov	r9, r0
 8008e10:	b918      	cbnz	r0, 8008e1a <__gethex+0x3ba>
 8008e12:	4602      	mov	r2, r0
 8008e14:	2184      	movs	r1, #132	@ 0x84
 8008e16:	4b19      	ldr	r3, [pc, #100]	@ (8008e7c <__gethex+0x41c>)
 8008e18:	e6c5      	b.n	8008ba6 <__gethex+0x146>
 8008e1a:	6922      	ldr	r2, [r4, #16]
 8008e1c:	f104 010c 	add.w	r1, r4, #12
 8008e20:	3202      	adds	r2, #2
 8008e22:	0092      	lsls	r2, r2, #2
 8008e24:	300c      	adds	r0, #12
 8008e26:	f7ff fd6d 	bl	8008904 <memcpy>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	9801      	ldr	r0, [sp, #4]
 8008e2e:	f7fd fe85 	bl	8006b3c <_Bfree>
 8008e32:	464c      	mov	r4, r9
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6122      	str	r2, [r4, #16]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e40:	615a      	str	r2, [r3, #20]
 8008e42:	e7be      	b.n	8008dc2 <__gethex+0x362>
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	455a      	cmp	r2, fp
 8008e48:	dd0b      	ble.n	8008e62 <__gethex+0x402>
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7ff fd9f 	bl	8008990 <rshift>
 8008e52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e56:	3701      	adds	r7, #1
 8008e58:	42bb      	cmp	r3, r7
 8008e5a:	f6ff aee0 	blt.w	8008c1e <__gethex+0x1be>
 8008e5e:	2501      	movs	r5, #1
 8008e60:	e7c2      	b.n	8008de8 <__gethex+0x388>
 8008e62:	f016 061f 	ands.w	r6, r6, #31
 8008e66:	d0fa      	beq.n	8008e5e <__gethex+0x3fe>
 8008e68:	4453      	add	r3, sl
 8008e6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e6e:	f7fd ff17 	bl	8006ca0 <__hi0bits>
 8008e72:	f1c6 0620 	rsb	r6, r6, #32
 8008e76:	42b0      	cmp	r0, r6
 8008e78:	dbe7      	blt.n	8008e4a <__gethex+0x3ea>
 8008e7a:	e7f0      	b.n	8008e5e <__gethex+0x3fe>
 8008e7c:	0800a80b 	.word	0x0800a80b

08008e80 <L_shift>:
 8008e80:	f1c2 0208 	rsb	r2, r2, #8
 8008e84:	0092      	lsls	r2, r2, #2
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	f1c2 0620 	rsb	r6, r2, #32
 8008e8c:	6843      	ldr	r3, [r0, #4]
 8008e8e:	6804      	ldr	r4, [r0, #0]
 8008e90:	fa03 f506 	lsl.w	r5, r3, r6
 8008e94:	432c      	orrs	r4, r5
 8008e96:	40d3      	lsrs	r3, r2
 8008e98:	6004      	str	r4, [r0, #0]
 8008e9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e9e:	4288      	cmp	r0, r1
 8008ea0:	d3f4      	bcc.n	8008e8c <L_shift+0xc>
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}

08008ea4 <__match>:
 8008ea4:	b530      	push	{r4, r5, lr}
 8008ea6:	6803      	ldr	r3, [r0, #0]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eae:	b914      	cbnz	r4, 8008eb6 <__match+0x12>
 8008eb0:	6003      	str	r3, [r0, #0]
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	bd30      	pop	{r4, r5, pc}
 8008eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ebe:	2d19      	cmp	r5, #25
 8008ec0:	bf98      	it	ls
 8008ec2:	3220      	addls	r2, #32
 8008ec4:	42a2      	cmp	r2, r4
 8008ec6:	d0f0      	beq.n	8008eaa <__match+0x6>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e7f3      	b.n	8008eb4 <__match+0x10>

08008ecc <__hexnan>:
 8008ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed0:	2500      	movs	r5, #0
 8008ed2:	680b      	ldr	r3, [r1, #0]
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	115e      	asrs	r6, r3, #5
 8008ed8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008edc:	f013 031f 	ands.w	r3, r3, #31
 8008ee0:	bf18      	it	ne
 8008ee2:	3604      	addne	r6, #4
 8008ee4:	1f37      	subs	r7, r6, #4
 8008ee6:	4690      	mov	r8, r2
 8008ee8:	46b9      	mov	r9, r7
 8008eea:	463c      	mov	r4, r7
 8008eec:	46ab      	mov	fp, r5
 8008eee:	b087      	sub	sp, #28
 8008ef0:	6801      	ldr	r1, [r0, #0]
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ef8:	9502      	str	r5, [sp, #8]
 8008efa:	784a      	ldrb	r2, [r1, #1]
 8008efc:	1c4b      	adds	r3, r1, #1
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	b342      	cbz	r2, 8008f54 <__hexnan+0x88>
 8008f02:	4610      	mov	r0, r2
 8008f04:	9105      	str	r1, [sp, #20]
 8008f06:	9204      	str	r2, [sp, #16]
 8008f08:	f7ff fd95 	bl	8008a36 <__hexdig_fun>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d151      	bne.n	8008fb4 <__hexnan+0xe8>
 8008f10:	9a04      	ldr	r2, [sp, #16]
 8008f12:	9905      	ldr	r1, [sp, #20]
 8008f14:	2a20      	cmp	r2, #32
 8008f16:	d818      	bhi.n	8008f4a <__hexnan+0x7e>
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	459b      	cmp	fp, r3
 8008f1c:	dd13      	ble.n	8008f46 <__hexnan+0x7a>
 8008f1e:	454c      	cmp	r4, r9
 8008f20:	d206      	bcs.n	8008f30 <__hexnan+0x64>
 8008f22:	2d07      	cmp	r5, #7
 8008f24:	dc04      	bgt.n	8008f30 <__hexnan+0x64>
 8008f26:	462a      	mov	r2, r5
 8008f28:	4649      	mov	r1, r9
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7ff ffa8 	bl	8008e80 <L_shift>
 8008f30:	4544      	cmp	r4, r8
 8008f32:	d952      	bls.n	8008fda <__hexnan+0x10e>
 8008f34:	2300      	movs	r3, #0
 8008f36:	f1a4 0904 	sub.w	r9, r4, #4
 8008f3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f3e:	461d      	mov	r5, r3
 8008f40:	464c      	mov	r4, r9
 8008f42:	f8cd b008 	str.w	fp, [sp, #8]
 8008f46:	9903      	ldr	r1, [sp, #12]
 8008f48:	e7d7      	b.n	8008efa <__hexnan+0x2e>
 8008f4a:	2a29      	cmp	r2, #41	@ 0x29
 8008f4c:	d157      	bne.n	8008ffe <__hexnan+0x132>
 8008f4e:	3102      	adds	r1, #2
 8008f50:	f8ca 1000 	str.w	r1, [sl]
 8008f54:	f1bb 0f00 	cmp.w	fp, #0
 8008f58:	d051      	beq.n	8008ffe <__hexnan+0x132>
 8008f5a:	454c      	cmp	r4, r9
 8008f5c:	d206      	bcs.n	8008f6c <__hexnan+0xa0>
 8008f5e:	2d07      	cmp	r5, #7
 8008f60:	dc04      	bgt.n	8008f6c <__hexnan+0xa0>
 8008f62:	462a      	mov	r2, r5
 8008f64:	4649      	mov	r1, r9
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff ff8a 	bl	8008e80 <L_shift>
 8008f6c:	4544      	cmp	r4, r8
 8008f6e:	d936      	bls.n	8008fde <__hexnan+0x112>
 8008f70:	4623      	mov	r3, r4
 8008f72:	f1a8 0204 	sub.w	r2, r8, #4
 8008f76:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f7a:	429f      	cmp	r7, r3
 8008f7c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f80:	d2f9      	bcs.n	8008f76 <__hexnan+0xaa>
 8008f82:	1b3b      	subs	r3, r7, r4
 8008f84:	f023 0303 	bic.w	r3, r3, #3
 8008f88:	3304      	adds	r3, #4
 8008f8a:	3401      	adds	r4, #1
 8008f8c:	3e03      	subs	r6, #3
 8008f8e:	42b4      	cmp	r4, r6
 8008f90:	bf88      	it	hi
 8008f92:	2304      	movhi	r3, #4
 8008f94:	2200      	movs	r2, #0
 8008f96:	4443      	add	r3, r8
 8008f98:	f843 2b04 	str.w	r2, [r3], #4
 8008f9c:	429f      	cmp	r7, r3
 8008f9e:	d2fb      	bcs.n	8008f98 <__hexnan+0xcc>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	b91b      	cbnz	r3, 8008fac <__hexnan+0xe0>
 8008fa4:	4547      	cmp	r7, r8
 8008fa6:	d128      	bne.n	8008ffa <__hexnan+0x12e>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	2005      	movs	r0, #5
 8008fae:	b007      	add	sp, #28
 8008fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb4:	3501      	adds	r5, #1
 8008fb6:	2d08      	cmp	r5, #8
 8008fb8:	f10b 0b01 	add.w	fp, fp, #1
 8008fbc:	dd06      	ble.n	8008fcc <__hexnan+0x100>
 8008fbe:	4544      	cmp	r4, r8
 8008fc0:	d9c1      	bls.n	8008f46 <__hexnan+0x7a>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2501      	movs	r5, #1
 8008fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fca:	3c04      	subs	r4, #4
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	f000 000f 	and.w	r0, r0, #15
 8008fd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008fd6:	6020      	str	r0, [r4, #0]
 8008fd8:	e7b5      	b.n	8008f46 <__hexnan+0x7a>
 8008fda:	2508      	movs	r5, #8
 8008fdc:	e7b3      	b.n	8008f46 <__hexnan+0x7a>
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0dd      	beq.n	8008fa0 <__hexnan+0xd4>
 8008fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe8:	f1c3 0320 	rsb	r3, r3, #32
 8008fec:	40da      	lsrs	r2, r3
 8008fee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ff8:	e7d2      	b.n	8008fa0 <__hexnan+0xd4>
 8008ffa:	3f04      	subs	r7, #4
 8008ffc:	e7d0      	b.n	8008fa0 <__hexnan+0xd4>
 8008ffe:	2004      	movs	r0, #4
 8009000:	e7d5      	b.n	8008fae <__hexnan+0xe2>

08009002 <__ascii_mbtowc>:
 8009002:	b082      	sub	sp, #8
 8009004:	b901      	cbnz	r1, 8009008 <__ascii_mbtowc+0x6>
 8009006:	a901      	add	r1, sp, #4
 8009008:	b142      	cbz	r2, 800901c <__ascii_mbtowc+0x1a>
 800900a:	b14b      	cbz	r3, 8009020 <__ascii_mbtowc+0x1e>
 800900c:	7813      	ldrb	r3, [r2, #0]
 800900e:	600b      	str	r3, [r1, #0]
 8009010:	7812      	ldrb	r2, [r2, #0]
 8009012:	1e10      	subs	r0, r2, #0
 8009014:	bf18      	it	ne
 8009016:	2001      	movne	r0, #1
 8009018:	b002      	add	sp, #8
 800901a:	4770      	bx	lr
 800901c:	4610      	mov	r0, r2
 800901e:	e7fb      	b.n	8009018 <__ascii_mbtowc+0x16>
 8009020:	f06f 0001 	mvn.w	r0, #1
 8009024:	e7f8      	b.n	8009018 <__ascii_mbtowc+0x16>

08009026 <_realloc_r>:
 8009026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902a:	4680      	mov	r8, r0
 800902c:	4615      	mov	r5, r2
 800902e:	460c      	mov	r4, r1
 8009030:	b921      	cbnz	r1, 800903c <_realloc_r+0x16>
 8009032:	4611      	mov	r1, r2
 8009034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	f7fd bcb4 	b.w	80069a4 <_malloc_r>
 800903c:	b92a      	cbnz	r2, 800904a <_realloc_r+0x24>
 800903e:	f7fd fc3f 	bl	80068c0 <_free_r>
 8009042:	2400      	movs	r4, #0
 8009044:	4620      	mov	r0, r4
 8009046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904a:	f000 f840 	bl	80090ce <_malloc_usable_size_r>
 800904e:	4285      	cmp	r5, r0
 8009050:	4606      	mov	r6, r0
 8009052:	d802      	bhi.n	800905a <_realloc_r+0x34>
 8009054:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009058:	d8f4      	bhi.n	8009044 <_realloc_r+0x1e>
 800905a:	4629      	mov	r1, r5
 800905c:	4640      	mov	r0, r8
 800905e:	f7fd fca1 	bl	80069a4 <_malloc_r>
 8009062:	4607      	mov	r7, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	d0ec      	beq.n	8009042 <_realloc_r+0x1c>
 8009068:	42b5      	cmp	r5, r6
 800906a:	462a      	mov	r2, r5
 800906c:	4621      	mov	r1, r4
 800906e:	bf28      	it	cs
 8009070:	4632      	movcs	r2, r6
 8009072:	f7ff fc47 	bl	8008904 <memcpy>
 8009076:	4621      	mov	r1, r4
 8009078:	4640      	mov	r0, r8
 800907a:	f7fd fc21 	bl	80068c0 <_free_r>
 800907e:	463c      	mov	r4, r7
 8009080:	e7e0      	b.n	8009044 <_realloc_r+0x1e>

08009082 <__ascii_wctomb>:
 8009082:	4603      	mov	r3, r0
 8009084:	4608      	mov	r0, r1
 8009086:	b141      	cbz	r1, 800909a <__ascii_wctomb+0x18>
 8009088:	2aff      	cmp	r2, #255	@ 0xff
 800908a:	d904      	bls.n	8009096 <__ascii_wctomb+0x14>
 800908c:	228a      	movs	r2, #138	@ 0x8a
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	4770      	bx	lr
 8009096:	2001      	movs	r0, #1
 8009098:	700a      	strb	r2, [r1, #0]
 800909a:	4770      	bx	lr

0800909c <fiprintf>:
 800909c:	b40e      	push	{r1, r2, r3}
 800909e:	b503      	push	{r0, r1, lr}
 80090a0:	4601      	mov	r1, r0
 80090a2:	ab03      	add	r3, sp, #12
 80090a4:	4805      	ldr	r0, [pc, #20]	@ (80090bc <fiprintf+0x20>)
 80090a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090aa:	6800      	ldr	r0, [r0, #0]
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	f7ff f9a9 	bl	8008404 <_vfiprintf_r>
 80090b2:	b002      	add	sp, #8
 80090b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b8:	b003      	add	sp, #12
 80090ba:	4770      	bx	lr
 80090bc:	20000018 	.word	0x20000018

080090c0 <abort>:
 80090c0:	2006      	movs	r0, #6
 80090c2:	b508      	push	{r3, lr}
 80090c4:	f000 f834 	bl	8009130 <raise>
 80090c8:	2001      	movs	r0, #1
 80090ca:	f7f8 ff44 	bl	8001f56 <_exit>

080090ce <_malloc_usable_size_r>:
 80090ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d2:	1f18      	subs	r0, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	bfbc      	itt	lt
 80090d8:	580b      	ldrlt	r3, [r1, r0]
 80090da:	18c0      	addlt	r0, r0, r3
 80090dc:	4770      	bx	lr

080090de <_raise_r>:
 80090de:	291f      	cmp	r1, #31
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4605      	mov	r5, r0
 80090e4:	460c      	mov	r4, r1
 80090e6:	d904      	bls.n	80090f2 <_raise_r+0x14>
 80090e8:	2316      	movs	r3, #22
 80090ea:	6003      	str	r3, [r0, #0]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090f4:	b112      	cbz	r2, 80090fc <_raise_r+0x1e>
 80090f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090fa:	b94b      	cbnz	r3, 8009110 <_raise_r+0x32>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 f831 	bl	8009164 <_getpid_r>
 8009102:	4622      	mov	r2, r4
 8009104:	4601      	mov	r1, r0
 8009106:	4628      	mov	r0, r5
 8009108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800910c:	f000 b818 	b.w	8009140 <_kill_r>
 8009110:	2b01      	cmp	r3, #1
 8009112:	d00a      	beq.n	800912a <_raise_r+0x4c>
 8009114:	1c59      	adds	r1, r3, #1
 8009116:	d103      	bne.n	8009120 <_raise_r+0x42>
 8009118:	2316      	movs	r3, #22
 800911a:	6003      	str	r3, [r0, #0]
 800911c:	2001      	movs	r0, #1
 800911e:	e7e7      	b.n	80090f0 <_raise_r+0x12>
 8009120:	2100      	movs	r1, #0
 8009122:	4620      	mov	r0, r4
 8009124:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009128:	4798      	blx	r3
 800912a:	2000      	movs	r0, #0
 800912c:	e7e0      	b.n	80090f0 <_raise_r+0x12>
	...

08009130 <raise>:
 8009130:	4b02      	ldr	r3, [pc, #8]	@ (800913c <raise+0xc>)
 8009132:	4601      	mov	r1, r0
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f7ff bfd2 	b.w	80090de <_raise_r>
 800913a:	bf00      	nop
 800913c:	20000018 	.word	0x20000018

08009140 <_kill_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	2300      	movs	r3, #0
 8009144:	4d06      	ldr	r5, [pc, #24]	@ (8009160 <_kill_r+0x20>)
 8009146:	4604      	mov	r4, r0
 8009148:	4608      	mov	r0, r1
 800914a:	4611      	mov	r1, r2
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	f7f8 fef2 	bl	8001f36 <_kill>
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	d102      	bne.n	800915c <_kill_r+0x1c>
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	b103      	cbz	r3, 800915c <_kill_r+0x1c>
 800915a:	6023      	str	r3, [r4, #0]
 800915c:	bd38      	pop	{r3, r4, r5, pc}
 800915e:	bf00      	nop
 8009160:	2000047c 	.word	0x2000047c

08009164 <_getpid_r>:
 8009164:	f7f8 bee0 	b.w	8001f28 <_getpid>

08009168 <sqrt>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	f000 f9f9 	bl	8009564 <__ieee754_sqrt>
 8009172:	4632      	mov	r2, r6
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	463b      	mov	r3, r7
 800917a:	4630      	mov	r0, r6
 800917c:	4639      	mov	r1, r7
 800917e:	f7f7 fc45 	bl	8000a0c <__aeabi_dcmpun>
 8009182:	b990      	cbnz	r0, 80091aa <sqrt+0x42>
 8009184:	2200      	movs	r2, #0
 8009186:	2300      	movs	r3, #0
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 fc16 	bl	80009bc <__aeabi_dcmplt>
 8009190:	b158      	cbz	r0, 80091aa <sqrt+0x42>
 8009192:	f7fc fd03 	bl	8005b9c <__errno>
 8009196:	2321      	movs	r3, #33	@ 0x21
 8009198:	2200      	movs	r2, #0
 800919a:	6003      	str	r3, [r0, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	4610      	mov	r0, r2
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7f7 fac3 	bl	800072c <__aeabi_ddiv>
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	4620      	mov	r0, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091b0 <atan>:
 80091b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	4bbc      	ldr	r3, [pc, #752]	@ (80094a8 <atan+0x2f8>)
 80091b6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80091ba:	429e      	cmp	r6, r3
 80091bc:	4604      	mov	r4, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	468b      	mov	fp, r1
 80091c2:	d918      	bls.n	80091f6 <atan+0x46>
 80091c4:	4bb9      	ldr	r3, [pc, #740]	@ (80094ac <atan+0x2fc>)
 80091c6:	429e      	cmp	r6, r3
 80091c8:	d801      	bhi.n	80091ce <atan+0x1e>
 80091ca:	d109      	bne.n	80091e0 <atan+0x30>
 80091cc:	b140      	cbz	r0, 80091e0 <atan+0x30>
 80091ce:	4622      	mov	r2, r4
 80091d0:	462b      	mov	r3, r5
 80091d2:	4620      	mov	r0, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7f6 ffc9 	bl	800016c <__adddf3>
 80091da:	4604      	mov	r4, r0
 80091dc:	460d      	mov	r5, r1
 80091de:	e006      	b.n	80091ee <atan+0x3e>
 80091e0:	f1bb 0f00 	cmp.w	fp, #0
 80091e4:	f340 8123 	ble.w	800942e <atan+0x27e>
 80091e8:	a593      	add	r5, pc, #588	@ (adr r5, 8009438 <atan+0x288>)
 80091ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	4bae      	ldr	r3, [pc, #696]	@ (80094b0 <atan+0x300>)
 80091f8:	429e      	cmp	r6, r3
 80091fa:	d811      	bhi.n	8009220 <atan+0x70>
 80091fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009200:	429e      	cmp	r6, r3
 8009202:	d80a      	bhi.n	800921a <atan+0x6a>
 8009204:	a38e      	add	r3, pc, #568	@ (adr r3, 8009440 <atan+0x290>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 ffaf 	bl	800016c <__adddf3>
 800920e:	2200      	movs	r2, #0
 8009210:	4ba8      	ldr	r3, [pc, #672]	@ (80094b4 <atan+0x304>)
 8009212:	f7f7 fbf1 	bl	80009f8 <__aeabi_dcmpgt>
 8009216:	2800      	cmp	r0, #0
 8009218:	d1e9      	bne.n	80091ee <atan+0x3e>
 800921a:	f04f 3aff 	mov.w	sl, #4294967295
 800921e:	e027      	b.n	8009270 <atan+0xc0>
 8009220:	f000 f956 	bl	80094d0 <fabs>
 8009224:	4ba4      	ldr	r3, [pc, #656]	@ (80094b8 <atan+0x308>)
 8009226:	4604      	mov	r4, r0
 8009228:	429e      	cmp	r6, r3
 800922a:	460d      	mov	r5, r1
 800922c:	f200 80b8 	bhi.w	80093a0 <atan+0x1f0>
 8009230:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009234:	429e      	cmp	r6, r3
 8009236:	f200 809c 	bhi.w	8009372 <atan+0x1c2>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	f7f6 ff95 	bl	800016c <__adddf3>
 8009242:	2200      	movs	r2, #0
 8009244:	4b9b      	ldr	r3, [pc, #620]	@ (80094b4 <atan+0x304>)
 8009246:	f7f6 ff8f 	bl	8000168 <__aeabi_dsub>
 800924a:	2200      	movs	r2, #0
 800924c:	4606      	mov	r6, r0
 800924e:	460f      	mov	r7, r1
 8009250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f7f6 ff88 	bl	800016c <__adddf3>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4630      	mov	r0, r6
 8009262:	4639      	mov	r1, r7
 8009264:	f7f7 fa62 	bl	800072c <__aeabi_ddiv>
 8009268:	f04f 0a00 	mov.w	sl, #0
 800926c:	4604      	mov	r4, r0
 800926e:	460d      	mov	r5, r1
 8009270:	4622      	mov	r2, r4
 8009272:	462b      	mov	r3, r5
 8009274:	4620      	mov	r0, r4
 8009276:	4629      	mov	r1, r5
 8009278:	f7f7 f92e 	bl	80004d8 <__aeabi_dmul>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4680      	mov	r8, r0
 8009282:	4689      	mov	r9, r1
 8009284:	f7f7 f928 	bl	80004d8 <__aeabi_dmul>
 8009288:	a36f      	add	r3, pc, #444	@ (adr r3, 8009448 <atan+0x298>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	4606      	mov	r6, r0
 8009290:	460f      	mov	r7, r1
 8009292:	f7f7 f921 	bl	80004d8 <__aeabi_dmul>
 8009296:	a36e      	add	r3, pc, #440	@ (adr r3, 8009450 <atan+0x2a0>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f6 ff66 	bl	800016c <__adddf3>
 80092a0:	4632      	mov	r2, r6
 80092a2:	463b      	mov	r3, r7
 80092a4:	f7f7 f918 	bl	80004d8 <__aeabi_dmul>
 80092a8:	a36b      	add	r3, pc, #428	@ (adr r3, 8009458 <atan+0x2a8>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f6 ff5d 	bl	800016c <__adddf3>
 80092b2:	4632      	mov	r2, r6
 80092b4:	463b      	mov	r3, r7
 80092b6:	f7f7 f90f 	bl	80004d8 <__aeabi_dmul>
 80092ba:	a369      	add	r3, pc, #420	@ (adr r3, 8009460 <atan+0x2b0>)
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	f7f6 ff54 	bl	800016c <__adddf3>
 80092c4:	4632      	mov	r2, r6
 80092c6:	463b      	mov	r3, r7
 80092c8:	f7f7 f906 	bl	80004d8 <__aeabi_dmul>
 80092cc:	a366      	add	r3, pc, #408	@ (adr r3, 8009468 <atan+0x2b8>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f7f6 ff4b 	bl	800016c <__adddf3>
 80092d6:	4632      	mov	r2, r6
 80092d8:	463b      	mov	r3, r7
 80092da:	f7f7 f8fd 	bl	80004d8 <__aeabi_dmul>
 80092de:	a364      	add	r3, pc, #400	@ (adr r3, 8009470 <atan+0x2c0>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f6 ff42 	bl	800016c <__adddf3>
 80092e8:	4642      	mov	r2, r8
 80092ea:	464b      	mov	r3, r9
 80092ec:	f7f7 f8f4 	bl	80004d8 <__aeabi_dmul>
 80092f0:	a361      	add	r3, pc, #388	@ (adr r3, 8009478 <atan+0x2c8>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	4680      	mov	r8, r0
 80092f8:	4689      	mov	r9, r1
 80092fa:	4630      	mov	r0, r6
 80092fc:	4639      	mov	r1, r7
 80092fe:	f7f7 f8eb 	bl	80004d8 <__aeabi_dmul>
 8009302:	a35f      	add	r3, pc, #380	@ (adr r3, 8009480 <atan+0x2d0>)
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f7f6 ff2e 	bl	8000168 <__aeabi_dsub>
 800930c:	4632      	mov	r2, r6
 800930e:	463b      	mov	r3, r7
 8009310:	f7f7 f8e2 	bl	80004d8 <__aeabi_dmul>
 8009314:	a35c      	add	r3, pc, #368	@ (adr r3, 8009488 <atan+0x2d8>)
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f7f6 ff25 	bl	8000168 <__aeabi_dsub>
 800931e:	4632      	mov	r2, r6
 8009320:	463b      	mov	r3, r7
 8009322:	f7f7 f8d9 	bl	80004d8 <__aeabi_dmul>
 8009326:	a35a      	add	r3, pc, #360	@ (adr r3, 8009490 <atan+0x2e0>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	f7f6 ff1c 	bl	8000168 <__aeabi_dsub>
 8009330:	4632      	mov	r2, r6
 8009332:	463b      	mov	r3, r7
 8009334:	f7f7 f8d0 	bl	80004d8 <__aeabi_dmul>
 8009338:	a357      	add	r3, pc, #348	@ (adr r3, 8009498 <atan+0x2e8>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ff13 	bl	8000168 <__aeabi_dsub>
 8009342:	4632      	mov	r2, r6
 8009344:	463b      	mov	r3, r7
 8009346:	f7f7 f8c7 	bl	80004d8 <__aeabi_dmul>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	f7f6 ff0b 	bl	800016c <__adddf3>
 8009356:	4622      	mov	r2, r4
 8009358:	462b      	mov	r3, r5
 800935a:	f7f7 f8bd 	bl	80004d8 <__aeabi_dmul>
 800935e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	d144      	bne.n	80093f2 <atan+0x242>
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f7f6 fefc 	bl	8000168 <__aeabi_dsub>
 8009370:	e733      	b.n	80091da <atan+0x2a>
 8009372:	2200      	movs	r2, #0
 8009374:	4b4f      	ldr	r3, [pc, #316]	@ (80094b4 <atan+0x304>)
 8009376:	f7f6 fef7 	bl	8000168 <__aeabi_dsub>
 800937a:	2200      	movs	r2, #0
 800937c:	4606      	mov	r6, r0
 800937e:	460f      	mov	r7, r1
 8009380:	4620      	mov	r0, r4
 8009382:	4629      	mov	r1, r5
 8009384:	4b4b      	ldr	r3, [pc, #300]	@ (80094b4 <atan+0x304>)
 8009386:	f7f6 fef1 	bl	800016c <__adddf3>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	f7f7 f9cb 	bl	800072c <__aeabi_ddiv>
 8009396:	f04f 0a01 	mov.w	sl, #1
 800939a:	4604      	mov	r4, r0
 800939c:	460d      	mov	r5, r1
 800939e:	e767      	b.n	8009270 <atan+0xc0>
 80093a0:	4b46      	ldr	r3, [pc, #280]	@ (80094bc <atan+0x30c>)
 80093a2:	429e      	cmp	r6, r3
 80093a4:	d21a      	bcs.n	80093dc <atan+0x22c>
 80093a6:	2200      	movs	r2, #0
 80093a8:	4b45      	ldr	r3, [pc, #276]	@ (80094c0 <atan+0x310>)
 80093aa:	f7f6 fedd 	bl	8000168 <__aeabi_dsub>
 80093ae:	2200      	movs	r2, #0
 80093b0:	4606      	mov	r6, r0
 80093b2:	460f      	mov	r7, r1
 80093b4:	4620      	mov	r0, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	4b41      	ldr	r3, [pc, #260]	@ (80094c0 <atan+0x310>)
 80093ba:	f7f7 f88d 	bl	80004d8 <__aeabi_dmul>
 80093be:	2200      	movs	r2, #0
 80093c0:	4b3c      	ldr	r3, [pc, #240]	@ (80094b4 <atan+0x304>)
 80093c2:	f7f6 fed3 	bl	800016c <__adddf3>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7f7 f9ad 	bl	800072c <__aeabi_ddiv>
 80093d2:	f04f 0a02 	mov.w	sl, #2
 80093d6:	4604      	mov	r4, r0
 80093d8:	460d      	mov	r5, r1
 80093da:	e749      	b.n	8009270 <atan+0xc0>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	2000      	movs	r0, #0
 80093e2:	4938      	ldr	r1, [pc, #224]	@ (80094c4 <atan+0x314>)
 80093e4:	f7f7 f9a2 	bl	800072c <__aeabi_ddiv>
 80093e8:	f04f 0a03 	mov.w	sl, #3
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	e73e      	b.n	8009270 <atan+0xc0>
 80093f2:	4b35      	ldr	r3, [pc, #212]	@ (80094c8 <atan+0x318>)
 80093f4:	4e35      	ldr	r6, [pc, #212]	@ (80094cc <atan+0x31c>)
 80093f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f7f6 feb3 	bl	8000168 <__aeabi_dsub>
 8009402:	4622      	mov	r2, r4
 8009404:	462b      	mov	r3, r5
 8009406:	f7f6 feaf 	bl	8000168 <__aeabi_dsub>
 800940a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009416:	f7f6 fea7 	bl	8000168 <__aeabi_dsub>
 800941a:	f1bb 0f00 	cmp.w	fp, #0
 800941e:	4604      	mov	r4, r0
 8009420:	460d      	mov	r5, r1
 8009422:	f6bf aee4 	bge.w	80091ee <atan+0x3e>
 8009426:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800942a:	461d      	mov	r5, r3
 800942c:	e6df      	b.n	80091ee <atan+0x3e>
 800942e:	a51c      	add	r5, pc, #112	@ (adr r5, 80094a0 <atan+0x2f0>)
 8009430:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009434:	e6db      	b.n	80091ee <atan+0x3e>
 8009436:	bf00      	nop
 8009438:	54442d18 	.word	0x54442d18
 800943c:	3ff921fb 	.word	0x3ff921fb
 8009440:	8800759c 	.word	0x8800759c
 8009444:	7e37e43c 	.word	0x7e37e43c
 8009448:	e322da11 	.word	0xe322da11
 800944c:	3f90ad3a 	.word	0x3f90ad3a
 8009450:	24760deb 	.word	0x24760deb
 8009454:	3fa97b4b 	.word	0x3fa97b4b
 8009458:	a0d03d51 	.word	0xa0d03d51
 800945c:	3fb10d66 	.word	0x3fb10d66
 8009460:	c54c206e 	.word	0xc54c206e
 8009464:	3fb745cd 	.word	0x3fb745cd
 8009468:	920083ff 	.word	0x920083ff
 800946c:	3fc24924 	.word	0x3fc24924
 8009470:	5555550d 	.word	0x5555550d
 8009474:	3fd55555 	.word	0x3fd55555
 8009478:	2c6a6c2f 	.word	0x2c6a6c2f
 800947c:	bfa2b444 	.word	0xbfa2b444
 8009480:	52defd9a 	.word	0x52defd9a
 8009484:	3fadde2d 	.word	0x3fadde2d
 8009488:	af749a6d 	.word	0xaf749a6d
 800948c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009490:	fe231671 	.word	0xfe231671
 8009494:	3fbc71c6 	.word	0x3fbc71c6
 8009498:	9998ebc4 	.word	0x9998ebc4
 800949c:	3fc99999 	.word	0x3fc99999
 80094a0:	54442d18 	.word	0x54442d18
 80094a4:	bff921fb 	.word	0xbff921fb
 80094a8:	440fffff 	.word	0x440fffff
 80094ac:	7ff00000 	.word	0x7ff00000
 80094b0:	3fdbffff 	.word	0x3fdbffff
 80094b4:	3ff00000 	.word	0x3ff00000
 80094b8:	3ff2ffff 	.word	0x3ff2ffff
 80094bc:	40038000 	.word	0x40038000
 80094c0:	3ff80000 	.word	0x3ff80000
 80094c4:	bff00000 	.word	0xbff00000
 80094c8:	0800ab88 	.word	0x0800ab88
 80094cc:	0800aba8 	.word	0x0800aba8

080094d0 <fabs>:
 80094d0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80094d4:	4619      	mov	r1, r3
 80094d6:	4770      	bx	lr

080094d8 <sin>:
 80094d8:	b530      	push	{r4, r5, lr}
 80094da:	4d20      	ldr	r5, [pc, #128]	@ (800955c <sin+0x84>)
 80094dc:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80094e0:	42ac      	cmp	r4, r5
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	b087      	sub	sp, #28
 80094e8:	d806      	bhi.n	80094f8 <sin+0x20>
 80094ea:	2300      	movs	r3, #0
 80094ec:	2200      	movs	r2, #0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2300      	movs	r3, #0
 80094f2:	f000 f9cd 	bl	8009890 <__kernel_sin>
 80094f6:	e004      	b.n	8009502 <sin+0x2a>
 80094f8:	4d19      	ldr	r5, [pc, #100]	@ (8009560 <sin+0x88>)
 80094fa:	42ac      	cmp	r4, r5
 80094fc:	d903      	bls.n	8009506 <sin+0x2e>
 80094fe:	f7f6 fe33 	bl	8000168 <__aeabi_dsub>
 8009502:	b007      	add	sp, #28
 8009504:	bd30      	pop	{r4, r5, pc}
 8009506:	aa02      	add	r2, sp, #8
 8009508:	f000 fa7a 	bl	8009a00 <__ieee754_rem_pio2>
 800950c:	f000 0003 	and.w	r0, r0, #3
 8009510:	2801      	cmp	r0, #1
 8009512:	d009      	beq.n	8009528 <sin+0x50>
 8009514:	2802      	cmp	r0, #2
 8009516:	d00e      	beq.n	8009536 <sin+0x5e>
 8009518:	b9c0      	cbnz	r0, 800954c <sin+0x74>
 800951a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800951e:	2301      	movs	r3, #1
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009526:	e7e4      	b.n	80094f2 <sin+0x1a>
 8009528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800952c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009530:	f000 f8ee 	bl	8009710 <__kernel_cos>
 8009534:	e7e5      	b.n	8009502 <sin+0x2a>
 8009536:	2301      	movs	r3, #1
 8009538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009542:	f000 f9a5 	bl	8009890 <__kernel_sin>
 8009546:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800954a:	e7da      	b.n	8009502 <sin+0x2a>
 800954c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009554:	f000 f8dc 	bl	8009710 <__kernel_cos>
 8009558:	e7f5      	b.n	8009546 <sin+0x6e>
 800955a:	bf00      	nop
 800955c:	3fe921fb 	.word	0x3fe921fb
 8009560:	7fefffff 	.word	0x7fefffff

08009564 <__ieee754_sqrt>:
 8009564:	4a67      	ldr	r2, [pc, #412]	@ (8009704 <__ieee754_sqrt+0x1a0>)
 8009566:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	438a      	bics	r2, r1
 800956c:	4606      	mov	r6, r0
 800956e:	460f      	mov	r7, r1
 8009570:	460b      	mov	r3, r1
 8009572:	4604      	mov	r4, r0
 8009574:	d10e      	bne.n	8009594 <__ieee754_sqrt+0x30>
 8009576:	4602      	mov	r2, r0
 8009578:	f7f6 ffae 	bl	80004d8 <__aeabi_dmul>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	4630      	mov	r0, r6
 8009582:	4639      	mov	r1, r7
 8009584:	f7f6 fdf2 	bl	800016c <__adddf3>
 8009588:	4606      	mov	r6, r0
 800958a:	460f      	mov	r7, r1
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	2900      	cmp	r1, #0
 8009596:	dc0c      	bgt.n	80095b2 <__ieee754_sqrt+0x4e>
 8009598:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800959c:	4302      	orrs	r2, r0
 800959e:	d0f5      	beq.n	800958c <__ieee754_sqrt+0x28>
 80095a0:	b189      	cbz	r1, 80095c6 <__ieee754_sqrt+0x62>
 80095a2:	4602      	mov	r2, r0
 80095a4:	f7f6 fde0 	bl	8000168 <__aeabi_dsub>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	f7f7 f8be 	bl	800072c <__aeabi_ddiv>
 80095b0:	e7ea      	b.n	8009588 <__ieee754_sqrt+0x24>
 80095b2:	150a      	asrs	r2, r1, #20
 80095b4:	d115      	bne.n	80095e2 <__ieee754_sqrt+0x7e>
 80095b6:	2100      	movs	r1, #0
 80095b8:	e009      	b.n	80095ce <__ieee754_sqrt+0x6a>
 80095ba:	0ae3      	lsrs	r3, r4, #11
 80095bc:	3a15      	subs	r2, #21
 80095be:	0564      	lsls	r4, r4, #21
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0fa      	beq.n	80095ba <__ieee754_sqrt+0x56>
 80095c4:	e7f7      	b.n	80095b6 <__ieee754_sqrt+0x52>
 80095c6:	460a      	mov	r2, r1
 80095c8:	e7fa      	b.n	80095c0 <__ieee754_sqrt+0x5c>
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	3101      	adds	r1, #1
 80095ce:	02d8      	lsls	r0, r3, #11
 80095d0:	d5fb      	bpl.n	80095ca <__ieee754_sqrt+0x66>
 80095d2:	1e48      	subs	r0, r1, #1
 80095d4:	1a12      	subs	r2, r2, r0
 80095d6:	f1c1 0020 	rsb	r0, r1, #32
 80095da:	fa24 f000 	lsr.w	r0, r4, r0
 80095de:	4303      	orrs	r3, r0
 80095e0:	408c      	lsls	r4, r1
 80095e2:	2600      	movs	r6, #0
 80095e4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80095e8:	2116      	movs	r1, #22
 80095ea:	07d2      	lsls	r2, r2, #31
 80095ec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80095f0:	4632      	mov	r2, r6
 80095f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095fa:	bf5c      	itt	pl
 80095fc:	005b      	lslpl	r3, r3, #1
 80095fe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009602:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009606:	bf58      	it	pl
 8009608:	0064      	lslpl	r4, r4, #1
 800960a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800960e:	107f      	asrs	r7, r7, #1
 8009610:	0064      	lsls	r4, r4, #1
 8009612:	1815      	adds	r5, r2, r0
 8009614:	429d      	cmp	r5, r3
 8009616:	bfde      	ittt	le
 8009618:	182a      	addle	r2, r5, r0
 800961a:	1b5b      	suble	r3, r3, r5
 800961c:	1836      	addle	r6, r6, r0
 800961e:	0fe5      	lsrs	r5, r4, #31
 8009620:	3901      	subs	r1, #1
 8009622:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009626:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800962a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800962e:	d1f0      	bne.n	8009612 <__ieee754_sqrt+0xae>
 8009630:	460d      	mov	r5, r1
 8009632:	f04f 0a20 	mov.w	sl, #32
 8009636:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800963a:	429a      	cmp	r2, r3
 800963c:	eb01 0c00 	add.w	ip, r1, r0
 8009640:	db02      	blt.n	8009648 <__ieee754_sqrt+0xe4>
 8009642:	d113      	bne.n	800966c <__ieee754_sqrt+0x108>
 8009644:	45a4      	cmp	ip, r4
 8009646:	d811      	bhi.n	800966c <__ieee754_sqrt+0x108>
 8009648:	f1bc 0f00 	cmp.w	ip, #0
 800964c:	eb0c 0100 	add.w	r1, ip, r0
 8009650:	da42      	bge.n	80096d8 <__ieee754_sqrt+0x174>
 8009652:	2900      	cmp	r1, #0
 8009654:	db40      	blt.n	80096d8 <__ieee754_sqrt+0x174>
 8009656:	f102 0e01 	add.w	lr, r2, #1
 800965a:	1a9b      	subs	r3, r3, r2
 800965c:	4672      	mov	r2, lr
 800965e:	45a4      	cmp	ip, r4
 8009660:	bf88      	it	hi
 8009662:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009666:	eba4 040c 	sub.w	r4, r4, ip
 800966a:	4405      	add	r5, r0
 800966c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009670:	f1ba 0a01 	subs.w	sl, sl, #1
 8009674:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009678:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800967c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009680:	d1db      	bne.n	800963a <__ieee754_sqrt+0xd6>
 8009682:	431c      	orrs	r4, r3
 8009684:	d01a      	beq.n	80096bc <__ieee754_sqrt+0x158>
 8009686:	4c20      	ldr	r4, [pc, #128]	@ (8009708 <__ieee754_sqrt+0x1a4>)
 8009688:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800970c <__ieee754_sqrt+0x1a8>
 800968c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009690:	e9db 2300 	ldrd	r2, r3, [fp]
 8009694:	f7f6 fd68 	bl	8000168 <__aeabi_dsub>
 8009698:	e9d4 8900 	ldrd	r8, r9, [r4]
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4640      	mov	r0, r8
 80096a2:	4649      	mov	r1, r9
 80096a4:	f7f7 f994 	bl	80009d0 <__aeabi_dcmple>
 80096a8:	b140      	cbz	r0, 80096bc <__ieee754_sqrt+0x158>
 80096aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80096ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80096b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80096b6:	d111      	bne.n	80096dc <__ieee754_sqrt+0x178>
 80096b8:	4655      	mov	r5, sl
 80096ba:	3601      	adds	r6, #1
 80096bc:	1072      	asrs	r2, r6, #1
 80096be:	086b      	lsrs	r3, r5, #1
 80096c0:	07f1      	lsls	r1, r6, #31
 80096c2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80096c6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80096ca:	bf48      	it	mi
 80096cc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80096d0:	4618      	mov	r0, r3
 80096d2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80096d6:	e757      	b.n	8009588 <__ieee754_sqrt+0x24>
 80096d8:	4696      	mov	lr, r2
 80096da:	e7be      	b.n	800965a <__ieee754_sqrt+0xf6>
 80096dc:	f7f6 fd46 	bl	800016c <__adddf3>
 80096e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4640      	mov	r0, r8
 80096ea:	4649      	mov	r1, r9
 80096ec:	f7f7 f966 	bl	80009bc <__aeabi_dcmplt>
 80096f0:	b120      	cbz	r0, 80096fc <__ieee754_sqrt+0x198>
 80096f2:	1ca8      	adds	r0, r5, #2
 80096f4:	bf08      	it	eq
 80096f6:	3601      	addeq	r6, #1
 80096f8:	3502      	adds	r5, #2
 80096fa:	e7df      	b.n	80096bc <__ieee754_sqrt+0x158>
 80096fc:	1c6b      	adds	r3, r5, #1
 80096fe:	f023 0501 	bic.w	r5, r3, #1
 8009702:	e7db      	b.n	80096bc <__ieee754_sqrt+0x158>
 8009704:	7ff00000 	.word	0x7ff00000
 8009708:	200001e0 	.word	0x200001e0
 800970c:	200001d8 	.word	0x200001d8

08009710 <__kernel_cos>:
 8009710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009718:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800971c:	4680      	mov	r8, r0
 800971e:	4689      	mov	r9, r1
 8009720:	e9cd 2300 	strd	r2, r3, [sp]
 8009724:	d204      	bcs.n	8009730 <__kernel_cos+0x20>
 8009726:	f7f7 f987 	bl	8000a38 <__aeabi_d2iz>
 800972a:	2800      	cmp	r0, #0
 800972c:	f000 8086 	beq.w	800983c <__kernel_cos+0x12c>
 8009730:	4642      	mov	r2, r8
 8009732:	464b      	mov	r3, r9
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f6 fece 	bl	80004d8 <__aeabi_dmul>
 800973c:	2200      	movs	r2, #0
 800973e:	4b4e      	ldr	r3, [pc, #312]	@ (8009878 <__kernel_cos+0x168>)
 8009740:	4604      	mov	r4, r0
 8009742:	460d      	mov	r5, r1
 8009744:	f7f6 fec8 	bl	80004d8 <__aeabi_dmul>
 8009748:	a33f      	add	r3, pc, #252	@ (adr r3, 8009848 <__kernel_cos+0x138>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	4682      	mov	sl, r0
 8009750:	468b      	mov	fp, r1
 8009752:	4620      	mov	r0, r4
 8009754:	4629      	mov	r1, r5
 8009756:	f7f6 febf 	bl	80004d8 <__aeabi_dmul>
 800975a:	a33d      	add	r3, pc, #244	@ (adr r3, 8009850 <__kernel_cos+0x140>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 fd04 	bl	800016c <__adddf3>
 8009764:	4622      	mov	r2, r4
 8009766:	462b      	mov	r3, r5
 8009768:	f7f6 feb6 	bl	80004d8 <__aeabi_dmul>
 800976c:	a33a      	add	r3, pc, #232	@ (adr r3, 8009858 <__kernel_cos+0x148>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f7f6 fcf9 	bl	8000168 <__aeabi_dsub>
 8009776:	4622      	mov	r2, r4
 8009778:	462b      	mov	r3, r5
 800977a:	f7f6 fead 	bl	80004d8 <__aeabi_dmul>
 800977e:	a338      	add	r3, pc, #224	@ (adr r3, 8009860 <__kernel_cos+0x150>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7f6 fcf2 	bl	800016c <__adddf3>
 8009788:	4622      	mov	r2, r4
 800978a:	462b      	mov	r3, r5
 800978c:	f7f6 fea4 	bl	80004d8 <__aeabi_dmul>
 8009790:	a335      	add	r3, pc, #212	@ (adr r3, 8009868 <__kernel_cos+0x158>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fce7 	bl	8000168 <__aeabi_dsub>
 800979a:	4622      	mov	r2, r4
 800979c:	462b      	mov	r3, r5
 800979e:	f7f6 fe9b 	bl	80004d8 <__aeabi_dmul>
 80097a2:	a333      	add	r3, pc, #204	@ (adr r3, 8009870 <__kernel_cos+0x160>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fce0 	bl	800016c <__adddf3>
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	f7f6 fe92 	bl	80004d8 <__aeabi_dmul>
 80097b4:	4622      	mov	r2, r4
 80097b6:	462b      	mov	r3, r5
 80097b8:	f7f6 fe8e 	bl	80004d8 <__aeabi_dmul>
 80097bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097c0:	4604      	mov	r4, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	4640      	mov	r0, r8
 80097c6:	4649      	mov	r1, r9
 80097c8:	f7f6 fe86 	bl	80004d8 <__aeabi_dmul>
 80097cc:	460b      	mov	r3, r1
 80097ce:	4602      	mov	r2, r0
 80097d0:	4629      	mov	r1, r5
 80097d2:	4620      	mov	r0, r4
 80097d4:	f7f6 fcc8 	bl	8000168 <__aeabi_dsub>
 80097d8:	4b28      	ldr	r3, [pc, #160]	@ (800987c <__kernel_cos+0x16c>)
 80097da:	4680      	mov	r8, r0
 80097dc:	429e      	cmp	r6, r3
 80097de:	4689      	mov	r9, r1
 80097e0:	d80e      	bhi.n	8009800 <__kernel_cos+0xf0>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4650      	mov	r0, sl
 80097e8:	4659      	mov	r1, fp
 80097ea:	f7f6 fcbd 	bl	8000168 <__aeabi_dsub>
 80097ee:	4602      	mov	r2, r0
 80097f0:	2000      	movs	r0, #0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4922      	ldr	r1, [pc, #136]	@ (8009880 <__kernel_cos+0x170>)
 80097f6:	f7f6 fcb7 	bl	8000168 <__aeabi_dsub>
 80097fa:	b003      	add	sp, #12
 80097fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009800:	2400      	movs	r4, #0
 8009802:	4b20      	ldr	r3, [pc, #128]	@ (8009884 <__kernel_cos+0x174>)
 8009804:	4622      	mov	r2, r4
 8009806:	429e      	cmp	r6, r3
 8009808:	bf8c      	ite	hi
 800980a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009888 <__kernel_cos+0x178>)
 800980c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8009810:	462b      	mov	r3, r5
 8009812:	2000      	movs	r0, #0
 8009814:	491a      	ldr	r1, [pc, #104]	@ (8009880 <__kernel_cos+0x170>)
 8009816:	f7f6 fca7 	bl	8000168 <__aeabi_dsub>
 800981a:	4622      	mov	r2, r4
 800981c:	4606      	mov	r6, r0
 800981e:	460f      	mov	r7, r1
 8009820:	462b      	mov	r3, r5
 8009822:	4650      	mov	r0, sl
 8009824:	4659      	mov	r1, fp
 8009826:	f7f6 fc9f 	bl	8000168 <__aeabi_dsub>
 800982a:	4642      	mov	r2, r8
 800982c:	464b      	mov	r3, r9
 800982e:	f7f6 fc9b 	bl	8000168 <__aeabi_dsub>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4630      	mov	r0, r6
 8009838:	4639      	mov	r1, r7
 800983a:	e7dc      	b.n	80097f6 <__kernel_cos+0xe6>
 800983c:	2000      	movs	r0, #0
 800983e:	4910      	ldr	r1, [pc, #64]	@ (8009880 <__kernel_cos+0x170>)
 8009840:	e7db      	b.n	80097fa <__kernel_cos+0xea>
 8009842:	bf00      	nop
 8009844:	f3af 8000 	nop.w
 8009848:	be8838d4 	.word	0xbe8838d4
 800984c:	bda8fae9 	.word	0xbda8fae9
 8009850:	bdb4b1c4 	.word	0xbdb4b1c4
 8009854:	3e21ee9e 	.word	0x3e21ee9e
 8009858:	809c52ad 	.word	0x809c52ad
 800985c:	3e927e4f 	.word	0x3e927e4f
 8009860:	19cb1590 	.word	0x19cb1590
 8009864:	3efa01a0 	.word	0x3efa01a0
 8009868:	16c15177 	.word	0x16c15177
 800986c:	3f56c16c 	.word	0x3f56c16c
 8009870:	5555554c 	.word	0x5555554c
 8009874:	3fa55555 	.word	0x3fa55555
 8009878:	3fe00000 	.word	0x3fe00000
 800987c:	3fd33332 	.word	0x3fd33332
 8009880:	3ff00000 	.word	0x3ff00000
 8009884:	3fe90000 	.word	0x3fe90000
 8009888:	3fd20000 	.word	0x3fd20000
 800988c:	00000000 	.word	0x00000000

08009890 <__kernel_sin>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	461f      	mov	r7, r3
 8009896:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800989a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800989e:	4604      	mov	r4, r0
 80098a0:	460d      	mov	r5, r1
 80098a2:	4616      	mov	r6, r2
 80098a4:	b085      	sub	sp, #20
 80098a6:	d203      	bcs.n	80098b0 <__kernel_sin+0x20>
 80098a8:	f7f7 f8c6 	bl	8000a38 <__aeabi_d2iz>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d051      	beq.n	8009954 <__kernel_sin+0xc4>
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f6 fe0e 	bl	80004d8 <__aeabi_dmul>
 80098bc:	4682      	mov	sl, r0
 80098be:	468b      	mov	fp, r1
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4620      	mov	r0, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	f7f6 fe06 	bl	80004d8 <__aeabi_dmul>
 80098cc:	a33e      	add	r3, pc, #248	@ (adr r3, 80099c8 <__kernel_sin+0x138>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4680      	mov	r8, r0
 80098d4:	4689      	mov	r9, r1
 80098d6:	4650      	mov	r0, sl
 80098d8:	4659      	mov	r1, fp
 80098da:	f7f6 fdfd 	bl	80004d8 <__aeabi_dmul>
 80098de:	a33c      	add	r3, pc, #240	@ (adr r3, 80099d0 <__kernel_sin+0x140>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f6 fc40 	bl	8000168 <__aeabi_dsub>
 80098e8:	4652      	mov	r2, sl
 80098ea:	465b      	mov	r3, fp
 80098ec:	f7f6 fdf4 	bl	80004d8 <__aeabi_dmul>
 80098f0:	a339      	add	r3, pc, #228	@ (adr r3, 80099d8 <__kernel_sin+0x148>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fc39 	bl	800016c <__adddf3>
 80098fa:	4652      	mov	r2, sl
 80098fc:	465b      	mov	r3, fp
 80098fe:	f7f6 fdeb 	bl	80004d8 <__aeabi_dmul>
 8009902:	a337      	add	r3, pc, #220	@ (adr r3, 80099e0 <__kernel_sin+0x150>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fc2e 	bl	8000168 <__aeabi_dsub>
 800990c:	4652      	mov	r2, sl
 800990e:	465b      	mov	r3, fp
 8009910:	f7f6 fde2 	bl	80004d8 <__aeabi_dmul>
 8009914:	a334      	add	r3, pc, #208	@ (adr r3, 80099e8 <__kernel_sin+0x158>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fc27 	bl	800016c <__adddf3>
 800991e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009920:	e9cd 0100 	strd	r0, r1, [sp]
 8009924:	b9db      	cbnz	r3, 800995e <__kernel_sin+0xce>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4650      	mov	r0, sl
 800992c:	4659      	mov	r1, fp
 800992e:	f7f6 fdd3 	bl	80004d8 <__aeabi_dmul>
 8009932:	a32f      	add	r3, pc, #188	@ (adr r3, 80099f0 <__kernel_sin+0x160>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fc16 	bl	8000168 <__aeabi_dsub>
 800993c:	4642      	mov	r2, r8
 800993e:	464b      	mov	r3, r9
 8009940:	f7f6 fdca 	bl	80004d8 <__aeabi_dmul>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4620      	mov	r0, r4
 800994a:	4629      	mov	r1, r5
 800994c:	f7f6 fc0e 	bl	800016c <__adddf3>
 8009950:	4604      	mov	r4, r0
 8009952:	460d      	mov	r5, r1
 8009954:	4620      	mov	r0, r4
 8009956:	4629      	mov	r1, r5
 8009958:	b005      	add	sp, #20
 800995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995e:	2200      	movs	r2, #0
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	4b24      	ldr	r3, [pc, #144]	@ (80099f8 <__kernel_sin+0x168>)
 8009966:	f7f6 fdb7 	bl	80004d8 <__aeabi_dmul>
 800996a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800996e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	f7f6 fdaf 	bl	80004d8 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009982:	f7f6 fbf1 	bl	8000168 <__aeabi_dsub>
 8009986:	4652      	mov	r2, sl
 8009988:	465b      	mov	r3, fp
 800998a:	f7f6 fda5 	bl	80004d8 <__aeabi_dmul>
 800998e:	4632      	mov	r2, r6
 8009990:	463b      	mov	r3, r7
 8009992:	f7f6 fbe9 	bl	8000168 <__aeabi_dsub>
 8009996:	a316      	add	r3, pc, #88	@ (adr r3, 80099f0 <__kernel_sin+0x160>)
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	4606      	mov	r6, r0
 800999e:	460f      	mov	r7, r1
 80099a0:	4640      	mov	r0, r8
 80099a2:	4649      	mov	r1, r9
 80099a4:	f7f6 fd98 	bl	80004d8 <__aeabi_dmul>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4630      	mov	r0, r6
 80099ae:	4639      	mov	r1, r7
 80099b0:	f7f6 fbdc 	bl	800016c <__adddf3>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f6 fbd4 	bl	8000168 <__aeabi_dsub>
 80099c0:	e7c6      	b.n	8009950 <__kernel_sin+0xc0>
 80099c2:	bf00      	nop
 80099c4:	f3af 8000 	nop.w
 80099c8:	5acfd57c 	.word	0x5acfd57c
 80099cc:	3de5d93a 	.word	0x3de5d93a
 80099d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80099d4:	3e5ae5e6 	.word	0x3e5ae5e6
 80099d8:	57b1fe7d 	.word	0x57b1fe7d
 80099dc:	3ec71de3 	.word	0x3ec71de3
 80099e0:	19c161d5 	.word	0x19c161d5
 80099e4:	3f2a01a0 	.word	0x3f2a01a0
 80099e8:	1110f8a6 	.word	0x1110f8a6
 80099ec:	3f811111 	.word	0x3f811111
 80099f0:	55555549 	.word	0x55555549
 80099f4:	3fc55555 	.word	0x3fc55555
 80099f8:	3fe00000 	.word	0x3fe00000
 80099fc:	00000000 	.word	0x00000000

08009a00 <__ieee754_rem_pio2>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	4bc4      	ldr	r3, [pc, #784]	@ (8009d18 <__ieee754_rem_pio2+0x318>)
 8009a06:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009a0a:	b08d      	sub	sp, #52	@ 0x34
 8009a0c:	4598      	cmp	r8, r3
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460f      	mov	r7, r1
 8009a12:	4614      	mov	r4, r2
 8009a14:	9104      	str	r1, [sp, #16]
 8009a16:	d807      	bhi.n	8009a28 <__ieee754_rem_pio2+0x28>
 8009a18:	e9c2 6700 	strd	r6, r7, [r2]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	2200      	movs	r2, #0
 8009a20:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009a24:	2500      	movs	r5, #0
 8009a26:	e026      	b.n	8009a76 <__ieee754_rem_pio2+0x76>
 8009a28:	4bbc      	ldr	r3, [pc, #752]	@ (8009d1c <__ieee754_rem_pio2+0x31c>)
 8009a2a:	4598      	cmp	r8, r3
 8009a2c:	d876      	bhi.n	8009b1c <__ieee754_rem_pio2+0x11c>
 8009a2e:	9b04      	ldr	r3, [sp, #16]
 8009a30:	4dbb      	ldr	r5, [pc, #748]	@ (8009d20 <__ieee754_rem_pio2+0x320>)
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	a3aa      	add	r3, pc, #680	@ (adr r3, 8009ce0 <__ieee754_rem_pio2+0x2e0>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	dd38      	ble.n	8009aae <__ieee754_rem_pio2+0xae>
 8009a3c:	f7f6 fb94 	bl	8000168 <__aeabi_dsub>
 8009a40:	45a8      	cmp	r8, r5
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	d01a      	beq.n	8009a7e <__ieee754_rem_pio2+0x7e>
 8009a48:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009ce8 <__ieee754_rem_pio2+0x2e8>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f7f6 fb8b 	bl	8000168 <__aeabi_dsub>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4680      	mov	r8, r0
 8009a58:	4689      	mov	r9, r1
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	f7f6 fb83 	bl	8000168 <__aeabi_dsub>
 8009a62:	a3a1      	add	r3, pc, #644	@ (adr r3, 8009ce8 <__ieee754_rem_pio2+0x2e8>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f7f6 fb7e 	bl	8000168 <__aeabi_dsub>
 8009a6c:	2501      	movs	r5, #1
 8009a6e:	e9c4 8900 	strd	r8, r9, [r4]
 8009a72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a76:	4628      	mov	r0, r5
 8009a78:	b00d      	add	sp, #52	@ 0x34
 8009a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7e:	a39c      	add	r3, pc, #624	@ (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2f0>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f6 fb70 	bl	8000168 <__aeabi_dsub>
 8009a88:	a39b      	add	r3, pc, #620	@ (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2f8>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	4606      	mov	r6, r0
 8009a90:	460f      	mov	r7, r1
 8009a92:	f7f6 fb69 	bl	8000168 <__aeabi_dsub>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	4689      	mov	r9, r1
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f6 fb61 	bl	8000168 <__aeabi_dsub>
 8009aa6:	a394      	add	r3, pc, #592	@ (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2f8>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	e7dc      	b.n	8009a68 <__ieee754_rem_pio2+0x68>
 8009aae:	f7f6 fb5d 	bl	800016c <__adddf3>
 8009ab2:	45a8      	cmp	r8, r5
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	460f      	mov	r7, r1
 8009ab8:	d018      	beq.n	8009aec <__ieee754_rem_pio2+0xec>
 8009aba:	a38b      	add	r3, pc, #556	@ (adr r3, 8009ce8 <__ieee754_rem_pio2+0x2e8>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fb54 	bl	800016c <__adddf3>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4680      	mov	r8, r0
 8009aca:	4689      	mov	r9, r1
 8009acc:	4630      	mov	r0, r6
 8009ace:	4639      	mov	r1, r7
 8009ad0:	f7f6 fb4a 	bl	8000168 <__aeabi_dsub>
 8009ad4:	a384      	add	r3, pc, #528	@ (adr r3, 8009ce8 <__ieee754_rem_pio2+0x2e8>)
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	f7f6 fb47 	bl	800016c <__adddf3>
 8009ade:	f04f 35ff 	mov.w	r5, #4294967295
 8009ae2:	e9c4 8900 	strd	r8, r9, [r4]
 8009ae6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009aea:	e7c4      	b.n	8009a76 <__ieee754_rem_pio2+0x76>
 8009aec:	a380      	add	r3, pc, #512	@ (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2f0>)
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	f7f6 fb3b 	bl	800016c <__adddf3>
 8009af6:	a380      	add	r3, pc, #512	@ (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2f8>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	f7f6 fb34 	bl	800016c <__adddf3>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4680      	mov	r8, r0
 8009b0a:	4689      	mov	r9, r1
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	4639      	mov	r1, r7
 8009b10:	f7f6 fb2a 	bl	8000168 <__aeabi_dsub>
 8009b14:	a378      	add	r3, pc, #480	@ (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2f8>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	e7de      	b.n	8009ada <__ieee754_rem_pio2+0xda>
 8009b1c:	4b81      	ldr	r3, [pc, #516]	@ (8009d24 <__ieee754_rem_pio2+0x324>)
 8009b1e:	4598      	cmp	r8, r3
 8009b20:	f200 80cf 	bhi.w	8009cc2 <__ieee754_rem_pio2+0x2c2>
 8009b24:	f7ff fcd4 	bl	80094d0 <fabs>
 8009b28:	a375      	add	r3, pc, #468	@ (adr r3, 8009d00 <__ieee754_rem_pio2+0x300>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	f7f6 fcd1 	bl	80004d8 <__aeabi_dmul>
 8009b36:	2200      	movs	r2, #0
 8009b38:	4b7b      	ldr	r3, [pc, #492]	@ (8009d28 <__ieee754_rem_pio2+0x328>)
 8009b3a:	f7f6 fb17 	bl	800016c <__adddf3>
 8009b3e:	f7f6 ff7b 	bl	8000a38 <__aeabi_d2iz>
 8009b42:	4605      	mov	r5, r0
 8009b44:	f7f6 fc5e 	bl	8000404 <__aeabi_i2d>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b50:	a363      	add	r3, pc, #396	@ (adr r3, 8009ce0 <__ieee754_rem_pio2+0x2e0>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fcbf 	bl	80004d8 <__aeabi_dmul>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	f7f6 fb01 	bl	8000168 <__aeabi_dsub>
 8009b66:	a360      	add	r3, pc, #384	@ (adr r3, 8009ce8 <__ieee754_rem_pio2+0x2e8>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	468b      	mov	fp, r1
 8009b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b74:	f7f6 fcb0 	bl	80004d8 <__aeabi_dmul>
 8009b78:	2d1f      	cmp	r5, #31
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	dc0c      	bgt.n	8009b9a <__ieee754_rem_pio2+0x19a>
 8009b80:	4b6a      	ldr	r3, [pc, #424]	@ (8009d2c <__ieee754_rem_pio2+0x32c>)
 8009b82:	1e6a      	subs	r2, r5, #1
 8009b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b88:	4543      	cmp	r3, r8
 8009b8a:	d006      	beq.n	8009b9a <__ieee754_rem_pio2+0x19a>
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	463b      	mov	r3, r7
 8009b90:	4650      	mov	r0, sl
 8009b92:	4659      	mov	r1, fp
 8009b94:	f7f6 fae8 	bl	8000168 <__aeabi_dsub>
 8009b98:	e00e      	b.n	8009bb8 <__ieee754_rem_pio2+0x1b8>
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	4650      	mov	r0, sl
 8009ba0:	4659      	mov	r1, fp
 8009ba2:	f7f6 fae1 	bl	8000168 <__aeabi_dsub>
 8009ba6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009baa:	9305      	str	r3, [sp, #20]
 8009bac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bb0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	dc02      	bgt.n	8009bbe <__ieee754_rem_pio2+0x1be>
 8009bb8:	e9c4 0100 	strd	r0, r1, [r4]
 8009bbc:	e039      	b.n	8009c32 <__ieee754_rem_pio2+0x232>
 8009bbe:	a34c      	add	r3, pc, #304	@ (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2f0>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc8:	f7f6 fc86 	bl	80004d8 <__aeabi_dmul>
 8009bcc:	4606      	mov	r6, r0
 8009bce:	460f      	mov	r7, r1
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	4659      	mov	r1, fp
 8009bd8:	f7f6 fac6 	bl	8000168 <__aeabi_dsub>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4680      	mov	r8, r0
 8009be2:	4689      	mov	r9, r1
 8009be4:	4650      	mov	r0, sl
 8009be6:	4659      	mov	r1, fp
 8009be8:	f7f6 fabe 	bl	8000168 <__aeabi_dsub>
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	f7f6 faba 	bl	8000168 <__aeabi_dsub>
 8009bf4:	a340      	add	r3, pc, #256	@ (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2f8>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c02:	f7f6 fc69 	bl	80004d8 <__aeabi_dmul>
 8009c06:	4632      	mov	r2, r6
 8009c08:	463b      	mov	r3, r7
 8009c0a:	f7f6 faad 	bl	8000168 <__aeabi_dsub>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4606      	mov	r6, r0
 8009c14:	460f      	mov	r7, r1
 8009c16:	4640      	mov	r0, r8
 8009c18:	4649      	mov	r1, r9
 8009c1a:	f7f6 faa5 	bl	8000168 <__aeabi_dsub>
 8009c1e:	9a05      	ldr	r2, [sp, #20]
 8009c20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b31      	cmp	r3, #49	@ 0x31
 8009c28:	dc20      	bgt.n	8009c6c <__ieee754_rem_pio2+0x26c>
 8009c2a:	46c2      	mov	sl, r8
 8009c2c:	46cb      	mov	fp, r9
 8009c2e:	e9c4 0100 	strd	r0, r1, [r4]
 8009c32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009c36:	4650      	mov	r0, sl
 8009c38:	4642      	mov	r2, r8
 8009c3a:	464b      	mov	r3, r9
 8009c3c:	4659      	mov	r1, fp
 8009c3e:	f7f6 fa93 	bl	8000168 <__aeabi_dsub>
 8009c42:	463b      	mov	r3, r7
 8009c44:	4632      	mov	r2, r6
 8009c46:	f7f6 fa8f 	bl	8000168 <__aeabi_dsub>
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f6bf af10 	bge.w	8009a76 <__ieee754_rem_pio2+0x76>
 8009c56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009c5a:	6063      	str	r3, [r4, #4]
 8009c5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c60:	f8c4 8000 	str.w	r8, [r4]
 8009c64:	60a0      	str	r0, [r4, #8]
 8009c66:	60e3      	str	r3, [r4, #12]
 8009c68:	426d      	negs	r5, r5
 8009c6a:	e704      	b.n	8009a76 <__ieee754_rem_pio2+0x76>
 8009c6c:	a326      	add	r3, pc, #152	@ (adr r3, 8009d08 <__ieee754_rem_pio2+0x308>)
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c76:	f7f6 fc2f 	bl	80004d8 <__aeabi_dmul>
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f6 fa6f 	bl	8000168 <__aeabi_dsub>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4682      	mov	sl, r0
 8009c90:	468b      	mov	fp, r1
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	f7f6 fa67 	bl	8000168 <__aeabi_dsub>
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	f7f6 fa63 	bl	8000168 <__aeabi_dsub>
 8009ca2:	a31b      	add	r3, pc, #108	@ (adr r3, 8009d10 <__ieee754_rem_pio2+0x310>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb0:	f7f6 fc12 	bl	80004d8 <__aeabi_dmul>
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	f7f6 fa56 	bl	8000168 <__aeabi_dsub>
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	460f      	mov	r7, r1
 8009cc0:	e764      	b.n	8009b8c <__ieee754_rem_pio2+0x18c>
 8009cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d30 <__ieee754_rem_pio2+0x330>)
 8009cc4:	4598      	cmp	r8, r3
 8009cc6:	d935      	bls.n	8009d34 <__ieee754_rem_pio2+0x334>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	f7f6 fa4c 	bl	8000168 <__aeabi_dsub>
 8009cd0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009cd4:	e9c4 0100 	strd	r0, r1, [r4]
 8009cd8:	e6a4      	b.n	8009a24 <__ieee754_rem_pio2+0x24>
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w
 8009ce0:	54400000 	.word	0x54400000
 8009ce4:	3ff921fb 	.word	0x3ff921fb
 8009ce8:	1a626331 	.word	0x1a626331
 8009cec:	3dd0b461 	.word	0x3dd0b461
 8009cf0:	1a600000 	.word	0x1a600000
 8009cf4:	3dd0b461 	.word	0x3dd0b461
 8009cf8:	2e037073 	.word	0x2e037073
 8009cfc:	3ba3198a 	.word	0x3ba3198a
 8009d00:	6dc9c883 	.word	0x6dc9c883
 8009d04:	3fe45f30 	.word	0x3fe45f30
 8009d08:	2e000000 	.word	0x2e000000
 8009d0c:	3ba3198a 	.word	0x3ba3198a
 8009d10:	252049c1 	.word	0x252049c1
 8009d14:	397b839a 	.word	0x397b839a
 8009d18:	3fe921fb 	.word	0x3fe921fb
 8009d1c:	4002d97b 	.word	0x4002d97b
 8009d20:	3ff921fb 	.word	0x3ff921fb
 8009d24:	413921fb 	.word	0x413921fb
 8009d28:	3fe00000 	.word	0x3fe00000
 8009d2c:	0800abc8 	.word	0x0800abc8
 8009d30:	7fefffff 	.word	0x7fefffff
 8009d34:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009d38:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009d3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009d40:	460f      	mov	r7, r1
 8009d42:	f7f6 fe79 	bl	8000a38 <__aeabi_d2iz>
 8009d46:	f7f6 fb5d 	bl	8000404 <__aeabi_i2d>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d56:	f7f6 fa07 	bl	8000168 <__aeabi_dsub>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4b21      	ldr	r3, [pc, #132]	@ (8009de4 <__ieee754_rem_pio2+0x3e4>)
 8009d5e:	f7f6 fbbb 	bl	80004d8 <__aeabi_dmul>
 8009d62:	460f      	mov	r7, r1
 8009d64:	4606      	mov	r6, r0
 8009d66:	f7f6 fe67 	bl	8000a38 <__aeabi_d2iz>
 8009d6a:	f7f6 fb4b 	bl	8000404 <__aeabi_i2d>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4630      	mov	r0, r6
 8009d74:	4639      	mov	r1, r7
 8009d76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d7a:	f7f6 f9f5 	bl	8000168 <__aeabi_dsub>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4b18      	ldr	r3, [pc, #96]	@ (8009de4 <__ieee754_rem_pio2+0x3e4>)
 8009d82:	f7f6 fba9 	bl	80004d8 <__aeabi_dmul>
 8009d86:	f04f 0803 	mov.w	r8, #3
 8009d8a:	2600      	movs	r6, #0
 8009d8c:	2700      	movs	r7, #0
 8009d8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009d92:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009d96:	4632      	mov	r2, r6
 8009d98:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	46c2      	mov	sl, r8
 8009da0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009da4:	f7f6 fe00 	bl	80009a8 <__aeabi_dcmpeq>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d1f4      	bne.n	8009d96 <__ieee754_rem_pio2+0x396>
 8009dac:	4b0e      	ldr	r3, [pc, #56]	@ (8009de8 <__ieee754_rem_pio2+0x3e8>)
 8009dae:	462a      	mov	r2, r5
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	2302      	movs	r3, #2
 8009db4:	4621      	mov	r1, r4
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	a806      	add	r0, sp, #24
 8009dba:	4653      	mov	r3, sl
 8009dbc:	f000 f816 	bl	8009dec <__kernel_rem_pio2>
 8009dc0:	9b04      	ldr	r3, [sp, #16]
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f6bf ae56 	bge.w	8009a76 <__ieee754_rem_pio2+0x76>
 8009dca:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009dce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009dd2:	e9c4 2300 	strd	r2, r3, [r4]
 8009dd6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009dda:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009dde:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009de2:	e741      	b.n	8009c68 <__ieee754_rem_pio2+0x268>
 8009de4:	41700000 	.word	0x41700000
 8009de8:	0800ac48 	.word	0x0800ac48

08009dec <__kernel_rem_pio2>:
 8009dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009df4:	9308      	str	r3, [sp, #32]
 8009df6:	9104      	str	r1, [sp, #16]
 8009df8:	4bb6      	ldr	r3, [pc, #728]	@ (800a0d4 <__kernel_rem_pio2+0x2e8>)
 8009dfa:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8009dfc:	f112 0f14 	cmn.w	r2, #20
 8009e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e04:	bfa8      	it	ge
 8009e06:	1ed4      	subge	r4, r2, #3
 8009e08:	9302      	str	r3, [sp, #8]
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	bfb8      	it	lt
 8009e0e:	2400      	movlt	r4, #0
 8009e10:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e14:	9306      	str	r3, [sp, #24]
 8009e16:	bfa4      	itt	ge
 8009e18:	2318      	movge	r3, #24
 8009e1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009e1e:	f06f 0317 	mvn.w	r3, #23
 8009e22:	fb04 3303 	mla	r3, r4, r3, r3
 8009e26:	eb03 0a02 	add.w	sl, r3, r2
 8009e2a:	9a06      	ldr	r2, [sp, #24]
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	1aa7      	subs	r7, r4, r2
 8009e30:	eb03 0802 	add.w	r8, r3, r2
 8009e34:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8009e36:	2500      	movs	r5, #0
 8009e38:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e42:	ae20      	add	r6, sp, #128	@ 0x80
 8009e44:	4545      	cmp	r5, r8
 8009e46:	dd14      	ble.n	8009e72 <__kernel_rem_pio2+0x86>
 8009e48:	f04f 0800 	mov.w	r8, #0
 8009e4c:	9a08      	ldr	r2, [sp, #32]
 8009e4e:	ab20      	add	r3, sp, #128	@ 0x80
 8009e50:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8009e54:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8009e58:	9b02      	ldr	r3, [sp, #8]
 8009e5a:	4598      	cmp	r8, r3
 8009e5c:	dc35      	bgt.n	8009eca <__kernel_rem_pio2+0xde>
 8009e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e60:	2200      	movs	r2, #0
 8009e62:	f1a3 0908 	sub.w	r9, r3, #8
 8009e66:	2300      	movs	r3, #0
 8009e68:	462f      	mov	r7, r5
 8009e6a:	2600      	movs	r6, #0
 8009e6c:	e9cd 2300 	strd	r2, r3, [sp]
 8009e70:	e01f      	b.n	8009eb2 <__kernel_rem_pio2+0xc6>
 8009e72:	42ef      	cmn	r7, r5
 8009e74:	d40b      	bmi.n	8009e8e <__kernel_rem_pio2+0xa2>
 8009e76:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009e7a:	e9cd 2300 	strd	r2, r3, [sp]
 8009e7e:	f7f6 fac1 	bl	8000404 <__aeabi_i2d>
 8009e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e86:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009e8a:	3501      	adds	r5, #1
 8009e8c:	e7da      	b.n	8009e44 <__kernel_rem_pio2+0x58>
 8009e8e:	4610      	mov	r0, r2
 8009e90:	4619      	mov	r1, r3
 8009e92:	e7f8      	b.n	8009e86 <__kernel_rem_pio2+0x9a>
 8009e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e98:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009e9c:	f7f6 fb1c 	bl	80004d8 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ea8:	f7f6 f960 	bl	800016c <__adddf3>
 8009eac:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb0:	3601      	adds	r6, #1
 8009eb2:	9b06      	ldr	r3, [sp, #24]
 8009eb4:	3f08      	subs	r7, #8
 8009eb6:	429e      	cmp	r6, r3
 8009eb8:	ddec      	ble.n	8009e94 <__kernel_rem_pio2+0xa8>
 8009eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ebe:	f108 0801 	add.w	r8, r8, #1
 8009ec2:	e8eb 2302 	strd	r2, r3, [fp], #8
 8009ec6:	3508      	adds	r5, #8
 8009ec8:	e7c6      	b.n	8009e58 <__kernel_rem_pio2+0x6c>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	aa0c      	add	r2, sp, #48	@ 0x30
 8009ece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ed4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8009ed6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009eda:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ee0:	ab98      	add	r3, sp, #608	@ 0x260
 8009ee2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ee6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8009eea:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009eec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ef0:	ae0c      	add	r6, sp, #48	@ 0x30
 8009ef2:	4698      	mov	r8, r3
 8009ef4:	46b1      	mov	r9, r6
 8009ef6:	465f      	mov	r7, fp
 8009ef8:	9307      	str	r3, [sp, #28]
 8009efa:	2f00      	cmp	r7, #0
 8009efc:	f1a8 0808 	sub.w	r8, r8, #8
 8009f00:	dc71      	bgt.n	8009fe6 <__kernel_rem_pio2+0x1fa>
 8009f02:	4652      	mov	r2, sl
 8009f04:	4620      	mov	r0, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	f000 fa96 	bl	800a438 <scalbn>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009f12:	4604      	mov	r4, r0
 8009f14:	460d      	mov	r5, r1
 8009f16:	f7f6 fadf 	bl	80004d8 <__aeabi_dmul>
 8009f1a:	f000 fb05 	bl	800a528 <floor>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	4b6d      	ldr	r3, [pc, #436]	@ (800a0d8 <__kernel_rem_pio2+0x2ec>)
 8009f22:	f7f6 fad9 	bl	80004d8 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	f7f6 f91b 	bl	8000168 <__aeabi_dsub>
 8009f32:	460d      	mov	r5, r1
 8009f34:	4604      	mov	r4, r0
 8009f36:	f7f6 fd7f 	bl	8000a38 <__aeabi_d2iz>
 8009f3a:	9005      	str	r0, [sp, #20]
 8009f3c:	f7f6 fa62 	bl	8000404 <__aeabi_i2d>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 f90e 	bl	8000168 <__aeabi_dsub>
 8009f4c:	f1ba 0f00 	cmp.w	sl, #0
 8009f50:	4680      	mov	r8, r0
 8009f52:	4689      	mov	r9, r1
 8009f54:	dd6d      	ble.n	800a032 <__kernel_rem_pio2+0x246>
 8009f56:	f10b 31ff 	add.w	r1, fp, #4294967295
 8009f5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f60:	9c05      	ldr	r4, [sp, #20]
 8009f62:	f1ca 0018 	rsb	r0, sl, #24
 8009f66:	fa43 f200 	asr.w	r2, r3, r0
 8009f6a:	4414      	add	r4, r2
 8009f6c:	4082      	lsls	r2, r0
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	aa0c      	add	r2, sp, #48	@ 0x30
 8009f72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009f76:	f1ca 0217 	rsb	r2, sl, #23
 8009f7a:	9405      	str	r4, [sp, #20]
 8009f7c:	4113      	asrs	r3, r2
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	9b00      	ldr	r3, [sp, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	dd64      	ble.n	800a050 <__kernel_rem_pio2+0x264>
 8009f86:	2200      	movs	r2, #0
 8009f88:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	9b05      	ldr	r3, [sp, #20]
 8009f90:	3301      	adds	r3, #1
 8009f92:	9305      	str	r3, [sp, #20]
 8009f94:	4593      	cmp	fp, r2
 8009f96:	f300 80ab 	bgt.w	800a0f0 <__kernel_rem_pio2+0x304>
 8009f9a:	f1ba 0f00 	cmp.w	sl, #0
 8009f9e:	dd07      	ble.n	8009fb0 <__kernel_rem_pio2+0x1c4>
 8009fa0:	f1ba 0f01 	cmp.w	sl, #1
 8009fa4:	f000 80b2 	beq.w	800a10c <__kernel_rem_pio2+0x320>
 8009fa8:	f1ba 0f02 	cmp.w	sl, #2
 8009fac:	f000 80b9 	beq.w	800a122 <__kernel_rem_pio2+0x336>
 8009fb0:	9b00      	ldr	r3, [sp, #0]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d14c      	bne.n	800a050 <__kernel_rem_pio2+0x264>
 8009fb6:	4642      	mov	r2, r8
 8009fb8:	464b      	mov	r3, r9
 8009fba:	2000      	movs	r0, #0
 8009fbc:	4947      	ldr	r1, [pc, #284]	@ (800a0dc <__kernel_rem_pio2+0x2f0>)
 8009fbe:	f7f6 f8d3 	bl	8000168 <__aeabi_dsub>
 8009fc2:	4680      	mov	r8, r0
 8009fc4:	4689      	mov	r9, r1
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	d042      	beq.n	800a050 <__kernel_rem_pio2+0x264>
 8009fca:	4652      	mov	r2, sl
 8009fcc:	2000      	movs	r0, #0
 8009fce:	4943      	ldr	r1, [pc, #268]	@ (800a0dc <__kernel_rem_pio2+0x2f0>)
 8009fd0:	f000 fa32 	bl	800a438 <scalbn>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 f8c4 	bl	8000168 <__aeabi_dsub>
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	4689      	mov	r9, r1
 8009fe4:	e034      	b.n	800a050 <__kernel_rem_pio2+0x264>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	4b3d      	ldr	r3, [pc, #244]	@ (800a0e0 <__kernel_rem_pio2+0x2f4>)
 8009fea:	4620      	mov	r0, r4
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7f6 fa73 	bl	80004d8 <__aeabi_dmul>
 8009ff2:	f7f6 fd21 	bl	8000a38 <__aeabi_d2iz>
 8009ff6:	f7f6 fa05 	bl	8000404 <__aeabi_i2d>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	e9cd 2300 	strd	r2, r3, [sp]
 800a002:	2200      	movs	r2, #0
 800a004:	4b37      	ldr	r3, [pc, #220]	@ (800a0e4 <__kernel_rem_pio2+0x2f8>)
 800a006:	f7f6 fa67 	bl	80004d8 <__aeabi_dmul>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4620      	mov	r0, r4
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 f8a9 	bl	8000168 <__aeabi_dsub>
 800a016:	f7f6 fd0f 	bl	8000a38 <__aeabi_d2iz>
 800a01a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a01e:	f849 0b04 	str.w	r0, [r9], #4
 800a022:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a026:	f7f6 f8a1 	bl	800016c <__adddf3>
 800a02a:	3f01      	subs	r7, #1
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	e763      	b.n	8009efa <__kernel_rem_pio2+0x10e>
 800a032:	d106      	bne.n	800a042 <__kernel_rem_pio2+0x256>
 800a034:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a038:	aa0c      	add	r2, sp, #48	@ 0x30
 800a03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03e:	15db      	asrs	r3, r3, #23
 800a040:	e79d      	b.n	8009f7e <__kernel_rem_pio2+0x192>
 800a042:	2200      	movs	r2, #0
 800a044:	4b28      	ldr	r3, [pc, #160]	@ (800a0e8 <__kernel_rem_pio2+0x2fc>)
 800a046:	f7f6 fccd 	bl	80009e4 <__aeabi_dcmpge>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d13f      	bne.n	800a0ce <__kernel_rem_pio2+0x2e2>
 800a04e:	9000      	str	r0, [sp, #0]
 800a050:	2200      	movs	r2, #0
 800a052:	2300      	movs	r3, #0
 800a054:	4640      	mov	r0, r8
 800a056:	4649      	mov	r1, r9
 800a058:	f7f6 fca6 	bl	80009a8 <__aeabi_dcmpeq>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	f000 80af 	beq.w	800a1c0 <__kernel_rem_pio2+0x3d4>
 800a062:	2200      	movs	r2, #0
 800a064:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a068:	9902      	ldr	r1, [sp, #8]
 800a06a:	428b      	cmp	r3, r1
 800a06c:	da61      	bge.n	800a132 <__kernel_rem_pio2+0x346>
 800a06e:	2a00      	cmp	r2, #0
 800a070:	d076      	beq.n	800a160 <__kernel_rem_pio2+0x374>
 800a072:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a076:	ab0c      	add	r3, sp, #48	@ 0x30
 800a078:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a07c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0f6      	beq.n	800a072 <__kernel_rem_pio2+0x286>
 800a084:	4652      	mov	r2, sl
 800a086:	2000      	movs	r0, #0
 800a088:	4914      	ldr	r1, [pc, #80]	@ (800a0dc <__kernel_rem_pio2+0x2f0>)
 800a08a:	f000 f9d5 	bl	800a438 <scalbn>
 800a08e:	465d      	mov	r5, fp
 800a090:	4606      	mov	r6, r0
 800a092:	460f      	mov	r7, r1
 800a094:	f04f 0900 	mov.w	r9, #0
 800a098:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a09a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800a0e0 <__kernel_rem_pio2+0x2f4>
 800a09e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a0a2:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	f280 80c0 	bge.w	800a22c <__kernel_rem_pio2+0x440>
 800a0ac:	465d      	mov	r5, fp
 800a0ae:	2d00      	cmp	r5, #0
 800a0b0:	f2c0 80f0 	blt.w	800a294 <__kernel_rem_pio2+0x4a8>
 800a0b4:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ec <__kernel_rem_pio2+0x300>)
 800a0b6:	f04f 0900 	mov.w	r9, #0
 800a0ba:	9306      	str	r3, [sp, #24]
 800a0bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a0be:	f04f 0a00 	mov.w	sl, #0
 800a0c2:	2700      	movs	r7, #0
 800a0c4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a0c8:	ebab 0605 	sub.w	r6, fp, r5
 800a0cc:	e0d6      	b.n	800a27c <__kernel_rem_pio2+0x490>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	e758      	b.n	8009f86 <__kernel_rem_pio2+0x19a>
 800a0d4:	0800ad90 	.word	0x0800ad90
 800a0d8:	40200000 	.word	0x40200000
 800a0dc:	3ff00000 	.word	0x3ff00000
 800a0e0:	3e700000 	.word	0x3e700000
 800a0e4:	41700000 	.word	0x41700000
 800a0e8:	3fe00000 	.word	0x3fe00000
 800a0ec:	0800ad50 	.word	0x0800ad50
 800a0f0:	f856 3b04 	ldr.w	r3, [r6], #4
 800a0f4:	b944      	cbnz	r4, 800a108 <__kernel_rem_pio2+0x31c>
 800a0f6:	b123      	cbz	r3, 800a102 <__kernel_rem_pio2+0x316>
 800a0f8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a0fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800a100:	2301      	movs	r3, #1
 800a102:	461c      	mov	r4, r3
 800a104:	3201      	adds	r2, #1
 800a106:	e745      	b.n	8009f94 <__kernel_rem_pio2+0x1a8>
 800a108:	1acb      	subs	r3, r1, r3
 800a10a:	e7f7      	b.n	800a0fc <__kernel_rem_pio2+0x310>
 800a10c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a110:	ab0c      	add	r3, sp, #48	@ 0x30
 800a112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a116:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a11a:	a90c      	add	r1, sp, #48	@ 0x30
 800a11c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a120:	e746      	b.n	8009fb0 <__kernel_rem_pio2+0x1c4>
 800a122:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a126:	ab0c      	add	r3, sp, #48	@ 0x30
 800a128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a130:	e7f3      	b.n	800a11a <__kernel_rem_pio2+0x32e>
 800a132:	a90c      	add	r1, sp, #48	@ 0x30
 800a134:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a138:	3b01      	subs	r3, #1
 800a13a:	430a      	orrs	r2, r1
 800a13c:	e794      	b.n	800a068 <__kernel_rem_pio2+0x27c>
 800a13e:	3401      	adds	r4, #1
 800a140:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a144:	2a00      	cmp	r2, #0
 800a146:	d0fa      	beq.n	800a13e <__kernel_rem_pio2+0x352>
 800a148:	9b08      	ldr	r3, [sp, #32]
 800a14a:	aa20      	add	r2, sp, #128	@ 0x80
 800a14c:	445b      	add	r3, fp
 800a14e:	f10b 0801 	add.w	r8, fp, #1
 800a152:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a156:	445c      	add	r4, fp
 800a158:	4544      	cmp	r4, r8
 800a15a:	da04      	bge.n	800a166 <__kernel_rem_pio2+0x37a>
 800a15c:	46a3      	mov	fp, r4
 800a15e:	e6bf      	b.n	8009ee0 <__kernel_rem_pio2+0xf4>
 800a160:	2401      	movs	r4, #1
 800a162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a164:	e7ec      	b.n	800a140 <__kernel_rem_pio2+0x354>
 800a166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a168:	46ab      	mov	fp, r5
 800a16a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a16e:	f7f6 f949 	bl	8000404 <__aeabi_i2d>
 800a172:	f04f 0900 	mov.w	r9, #0
 800a176:	2600      	movs	r6, #0
 800a178:	2700      	movs	r7, #0
 800a17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17c:	e9c5 0100 	strd	r0, r1, [r5]
 800a180:	3b08      	subs	r3, #8
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	9b06      	ldr	r3, [sp, #24]
 800a186:	4599      	cmp	r9, r3
 800a188:	dd07      	ble.n	800a19a <__kernel_rem_pio2+0x3ae>
 800a18a:	9b07      	ldr	r3, [sp, #28]
 800a18c:	f108 0801 	add.w	r8, r8, #1
 800a190:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a194:	3508      	adds	r5, #8
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	e7de      	b.n	800a158 <__kernel_rem_pio2+0x36c>
 800a19a:	9900      	ldr	r1, [sp, #0]
 800a19c:	f109 0901 	add.w	r9, r9, #1
 800a1a0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a1a4:	9100      	str	r1, [sp, #0]
 800a1a6:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a1aa:	f7f6 f995 	bl	80004d8 <__aeabi_dmul>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	f7f5 ffd9 	bl	800016c <__adddf3>
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	e7e1      	b.n	800a184 <__kernel_rem_pio2+0x398>
 800a1c0:	f1ca 0200 	rsb	r2, sl, #0
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f000 f936 	bl	800a438 <scalbn>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4b97      	ldr	r3, [pc, #604]	@ (800a42c <__kernel_rem_pio2+0x640>)
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	f7f6 fc06 	bl	80009e4 <__aeabi_dcmpge>
 800a1d8:	b300      	cbz	r0, 800a21c <__kernel_rem_pio2+0x430>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4b94      	ldr	r3, [pc, #592]	@ (800a430 <__kernel_rem_pio2+0x644>)
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	f7f6 fc27 	bl	8000a38 <__aeabi_d2iz>
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	f7f6 f90a 	bl	8000404 <__aeabi_i2d>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4b8e      	ldr	r3, [pc, #568]	@ (800a42c <__kernel_rem_pio2+0x640>)
 800a1f4:	f7f6 f970 	bl	80004d8 <__aeabi_dmul>
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7f5 ffb2 	bl	8000168 <__aeabi_dsub>
 800a204:	f7f6 fc18 	bl	8000a38 <__aeabi_d2iz>
 800a208:	ab0c      	add	r3, sp, #48	@ 0x30
 800a20a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a20e:	f10b 0b01 	add.w	fp, fp, #1
 800a212:	f10a 0a18 	add.w	sl, sl, #24
 800a216:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a21a:	e733      	b.n	800a084 <__kernel_rem_pio2+0x298>
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 fc0a 	bl	8000a38 <__aeabi_d2iz>
 800a224:	ab0c      	add	r3, sp, #48	@ 0x30
 800a226:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a22a:	e72b      	b.n	800a084 <__kernel_rem_pio2+0x298>
 800a22c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a22e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a232:	f7f6 f8e7 	bl	8000404 <__aeabi_i2d>
 800a236:	4632      	mov	r2, r6
 800a238:	463b      	mov	r3, r7
 800a23a:	f7f6 f94d 	bl	80004d8 <__aeabi_dmul>
 800a23e:	464a      	mov	r2, r9
 800a240:	e868 0102 	strd	r0, r1, [r8], #-8
 800a244:	4653      	mov	r3, sl
 800a246:	4630      	mov	r0, r6
 800a248:	4639      	mov	r1, r7
 800a24a:	f7f6 f945 	bl	80004d8 <__aeabi_dmul>
 800a24e:	3d01      	subs	r5, #1
 800a250:	4606      	mov	r6, r0
 800a252:	460f      	mov	r7, r1
 800a254:	e727      	b.n	800a0a6 <__kernel_rem_pio2+0x2ba>
 800a256:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a25a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a25e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a262:	f8cd c018 	str.w	ip, [sp, #24]
 800a266:	f7f6 f937 	bl	80004d8 <__aeabi_dmul>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4648      	mov	r0, r9
 800a270:	4651      	mov	r1, sl
 800a272:	f7f5 ff7b 	bl	800016c <__adddf3>
 800a276:	4681      	mov	r9, r0
 800a278:	468a      	mov	sl, r1
 800a27a:	3701      	adds	r7, #1
 800a27c:	9b02      	ldr	r3, [sp, #8]
 800a27e:	429f      	cmp	r7, r3
 800a280:	dc01      	bgt.n	800a286 <__kernel_rem_pio2+0x49a>
 800a282:	42be      	cmp	r6, r7
 800a284:	dae7      	bge.n	800a256 <__kernel_rem_pio2+0x46a>
 800a286:	ab48      	add	r3, sp, #288	@ 0x120
 800a288:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a28c:	e9c6 9a00 	strd	r9, sl, [r6]
 800a290:	3d01      	subs	r5, #1
 800a292:	e70c      	b.n	800a0ae <__kernel_rem_pio2+0x2c2>
 800a294:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a296:	2b02      	cmp	r3, #2
 800a298:	dc09      	bgt.n	800a2ae <__kernel_rem_pio2+0x4c2>
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dc2c      	bgt.n	800a2f8 <__kernel_rem_pio2+0x50c>
 800a29e:	d04e      	beq.n	800a33e <__kernel_rem_pio2+0x552>
 800a2a0:	9b05      	ldr	r3, [sp, #20]
 800a2a2:	f003 0007 	and.w	r0, r3, #7
 800a2a6:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ae:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d1f5      	bne.n	800a2a0 <__kernel_rem_pio2+0x4b4>
 800a2b4:	ab48      	add	r3, sp, #288	@ 0x120
 800a2b6:	441c      	add	r4, r3
 800a2b8:	4625      	mov	r5, r4
 800a2ba:	46da      	mov	sl, fp
 800a2bc:	f1ba 0f00 	cmp.w	sl, #0
 800a2c0:	dc63      	bgt.n	800a38a <__kernel_rem_pio2+0x59e>
 800a2c2:	4625      	mov	r5, r4
 800a2c4:	46da      	mov	sl, fp
 800a2c6:	f1ba 0f01 	cmp.w	sl, #1
 800a2ca:	dc7b      	bgt.n	800a3c4 <__kernel_rem_pio2+0x5d8>
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	f1bb 0f01 	cmp.w	fp, #1
 800a2d4:	f300 8093 	bgt.w	800a3fe <__kernel_rem_pio2+0x612>
 800a2d8:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a2dc:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a2e0:	9b00      	ldr	r3, [sp, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f040 8092 	bne.w	800a40c <__kernel_rem_pio2+0x620>
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	e9c3 7800 	strd	r7, r8, [r3]
 800a2ee:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a2f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a2f6:	e7d3      	b.n	800a2a0 <__kernel_rem_pio2+0x4b4>
 800a2f8:	465d      	mov	r5, fp
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	ab48      	add	r3, sp, #288	@ 0x120
 800a300:	441c      	add	r4, r3
 800a302:	2d00      	cmp	r5, #0
 800a304:	da32      	bge.n	800a36c <__kernel_rem_pio2+0x580>
 800a306:	9b00      	ldr	r3, [sp, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d035      	beq.n	800a378 <__kernel_rem_pio2+0x58c>
 800a30c:	4602      	mov	r2, r0
 800a30e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a312:	9c04      	ldr	r4, [sp, #16]
 800a314:	2501      	movs	r5, #1
 800a316:	e9c4 2300 	strd	r2, r3, [r4]
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a322:	f7f5 ff21 	bl	8000168 <__aeabi_dsub>
 800a326:	ac48      	add	r4, sp, #288	@ 0x120
 800a328:	45ab      	cmp	fp, r5
 800a32a:	da28      	bge.n	800a37e <__kernel_rem_pio2+0x592>
 800a32c:	9b00      	ldr	r3, [sp, #0]
 800a32e:	b113      	cbz	r3, 800a336 <__kernel_rem_pio2+0x54a>
 800a330:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a334:	4619      	mov	r1, r3
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a33c:	e7b0      	b.n	800a2a0 <__kernel_rem_pio2+0x4b4>
 800a33e:	2000      	movs	r0, #0
 800a340:	2100      	movs	r1, #0
 800a342:	ab48      	add	r3, sp, #288	@ 0x120
 800a344:	441c      	add	r4, r3
 800a346:	f1bb 0f00 	cmp.w	fp, #0
 800a34a:	da08      	bge.n	800a35e <__kernel_rem_pio2+0x572>
 800a34c:	9b00      	ldr	r3, [sp, #0]
 800a34e:	b113      	cbz	r3, 800a356 <__kernel_rem_pio2+0x56a>
 800a350:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a354:	4619      	mov	r1, r3
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	e9c3 0100 	strd	r0, r1, [r3]
 800a35c:	e7a0      	b.n	800a2a0 <__kernel_rem_pio2+0x4b4>
 800a35e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a362:	f7f5 ff03 	bl	800016c <__adddf3>
 800a366:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a36a:	e7ec      	b.n	800a346 <__kernel_rem_pio2+0x55a>
 800a36c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a370:	f7f5 fefc 	bl	800016c <__adddf3>
 800a374:	3d01      	subs	r5, #1
 800a376:	e7c4      	b.n	800a302 <__kernel_rem_pio2+0x516>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	e7c9      	b.n	800a312 <__kernel_rem_pio2+0x526>
 800a37e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800a382:	f7f5 fef3 	bl	800016c <__adddf3>
 800a386:	3501      	adds	r5, #1
 800a388:	e7ce      	b.n	800a328 <__kernel_rem_pio2+0x53c>
 800a38a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a38e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a39a:	f7f5 fee7 	bl	800016c <__adddf3>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	460f      	mov	r7, r1
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f5 fedd 	bl	8000168 <__aeabi_dsub>
 800a3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3b2:	f7f5 fedb 	bl	800016c <__adddf3>
 800a3b6:	e865 0102 	strd	r0, r1, [r5], #-8
 800a3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3be:	e9c5 6700 	strd	r6, r7, [r5]
 800a3c2:	e77b      	b.n	800a2bc <__kernel_rem_pio2+0x4d0>
 800a3c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3c8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3d4:	f7f5 feca 	bl	800016c <__adddf3>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4606      	mov	r6, r0
 800a3de:	460f      	mov	r7, r1
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f5 fec0 	bl	8000168 <__aeabi_dsub>
 800a3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ec:	f7f5 febe 	bl	800016c <__adddf3>
 800a3f0:	e865 0102 	strd	r0, r1, [r5], #-8
 800a3f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3f8:	e9c5 6700 	strd	r6, r7, [r5]
 800a3fc:	e763      	b.n	800a2c6 <__kernel_rem_pio2+0x4da>
 800a3fe:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a402:	f7f5 feb3 	bl	800016c <__adddf3>
 800a406:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a40a:	e761      	b.n	800a2d0 <__kernel_rem_pio2+0x4e4>
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	9a04      	ldr	r2, [sp, #16]
 800a410:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a414:	601f      	str	r7, [r3, #0]
 800a416:	605c      	str	r4, [r3, #4]
 800a418:	609d      	str	r5, [r3, #8]
 800a41a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a41e:	60d3      	str	r3, [r2, #12]
 800a420:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a424:	6110      	str	r0, [r2, #16]
 800a426:	6153      	str	r3, [r2, #20]
 800a428:	e73a      	b.n	800a2a0 <__kernel_rem_pio2+0x4b4>
 800a42a:	bf00      	nop
 800a42c:	41700000 	.word	0x41700000
 800a430:	3e700000 	.word	0x3e700000
 800a434:	00000000 	.word	0x00000000

0800a438 <scalbn>:
 800a438:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a43c:	4616      	mov	r6, r2
 800a43e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a442:	4683      	mov	fp, r0
 800a444:	468c      	mov	ip, r1
 800a446:	460b      	mov	r3, r1
 800a448:	b982      	cbnz	r2, 800a46c <scalbn+0x34>
 800a44a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a44e:	4303      	orrs	r3, r0
 800a450:	d039      	beq.n	800a4c6 <scalbn+0x8e>
 800a452:	4b2f      	ldr	r3, [pc, #188]	@ (800a510 <scalbn+0xd8>)
 800a454:	2200      	movs	r2, #0
 800a456:	f7f6 f83f 	bl	80004d8 <__aeabi_dmul>
 800a45a:	4b2e      	ldr	r3, [pc, #184]	@ (800a514 <scalbn+0xdc>)
 800a45c:	4683      	mov	fp, r0
 800a45e:	429e      	cmp	r6, r3
 800a460:	468c      	mov	ip, r1
 800a462:	da0d      	bge.n	800a480 <scalbn+0x48>
 800a464:	a326      	add	r3, pc, #152	@ (adr r3, 800a500 <scalbn+0xc8>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	e01b      	b.n	800a4a4 <scalbn+0x6c>
 800a46c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a470:	42ba      	cmp	r2, r7
 800a472:	d109      	bne.n	800a488 <scalbn+0x50>
 800a474:	4602      	mov	r2, r0
 800a476:	f7f5 fe79 	bl	800016c <__adddf3>
 800a47a:	4683      	mov	fp, r0
 800a47c:	468c      	mov	ip, r1
 800a47e:	e022      	b.n	800a4c6 <scalbn+0x8e>
 800a480:	460b      	mov	r3, r1
 800a482:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a486:	3a36      	subs	r2, #54	@ 0x36
 800a488:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a48c:	428e      	cmp	r6, r1
 800a48e:	dd0c      	ble.n	800a4aa <scalbn+0x72>
 800a490:	a31d      	add	r3, pc, #116	@ (adr r3, 800a508 <scalbn+0xd0>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	461c      	mov	r4, r3
 800a498:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a49c:	f361 74df 	bfi	r4, r1, #31, #1
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	481d      	ldr	r0, [pc, #116]	@ (800a518 <scalbn+0xe0>)
 800a4a4:	f7f6 f818 	bl	80004d8 <__aeabi_dmul>
 800a4a8:	e7e7      	b.n	800a47a <scalbn+0x42>
 800a4aa:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a4ae:	4432      	add	r2, r6
 800a4b0:	428a      	cmp	r2, r1
 800a4b2:	dced      	bgt.n	800a490 <scalbn+0x58>
 800a4b4:	2a00      	cmp	r2, #0
 800a4b6:	dd0a      	ble.n	800a4ce <scalbn+0x96>
 800a4b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a4bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a4c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4c4:	46ac      	mov	ip, r5
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	4661      	mov	r1, ip
 800a4ca:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a4ce:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a4d2:	da09      	bge.n	800a4e8 <scalbn+0xb0>
 800a4d4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a4d8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a4dc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a4e0:	480e      	ldr	r0, [pc, #56]	@ (800a51c <scalbn+0xe4>)
 800a4e2:	f041 011f 	orr.w	r1, r1, #31
 800a4e6:	e7bd      	b.n	800a464 <scalbn+0x2c>
 800a4e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a4ec:	3236      	adds	r2, #54	@ 0x36
 800a4ee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a4f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4f6:	4658      	mov	r0, fp
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4b08      	ldr	r3, [pc, #32]	@ (800a520 <scalbn+0xe8>)
 800a4fe:	e7d1      	b.n	800a4a4 <scalbn+0x6c>
 800a500:	c2f8f359 	.word	0xc2f8f359
 800a504:	01a56e1f 	.word	0x01a56e1f
 800a508:	8800759c 	.word	0x8800759c
 800a50c:	7e37e43c 	.word	0x7e37e43c
 800a510:	43500000 	.word	0x43500000
 800a514:	ffff3cb0 	.word	0xffff3cb0
 800a518:	8800759c 	.word	0x8800759c
 800a51c:	c2f8f359 	.word	0xc2f8f359
 800a520:	3c900000 	.word	0x3c900000
 800a524:	00000000 	.word	0x00000000

0800a528 <floor>:
 800a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a530:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a534:	2e13      	cmp	r6, #19
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	460c      	mov	r4, r1
 800a53c:	4605      	mov	r5, r0
 800a53e:	4680      	mov	r8, r0
 800a540:	dc35      	bgt.n	800a5ae <floor+0x86>
 800a542:	2e00      	cmp	r6, #0
 800a544:	da17      	bge.n	800a576 <floor+0x4e>
 800a546:	a334      	add	r3, pc, #208	@ (adr r3, 800a618 <floor+0xf0>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f5 fe0e 	bl	800016c <__adddf3>
 800a550:	2200      	movs	r2, #0
 800a552:	2300      	movs	r3, #0
 800a554:	f7f6 fa50 	bl	80009f8 <__aeabi_dcmpgt>
 800a558:	b150      	cbz	r0, 800a570 <floor+0x48>
 800a55a:	2c00      	cmp	r4, #0
 800a55c:	da57      	bge.n	800a60e <floor+0xe6>
 800a55e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a562:	432c      	orrs	r4, r5
 800a564:	2500      	movs	r5, #0
 800a566:	42ac      	cmp	r4, r5
 800a568:	4c2d      	ldr	r4, [pc, #180]	@ (800a620 <floor+0xf8>)
 800a56a:	bf08      	it	eq
 800a56c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a570:	4623      	mov	r3, r4
 800a572:	462a      	mov	r2, r5
 800a574:	e024      	b.n	800a5c0 <floor+0x98>
 800a576:	4f2b      	ldr	r7, [pc, #172]	@ (800a624 <floor+0xfc>)
 800a578:	4137      	asrs	r7, r6
 800a57a:	ea01 0c07 	and.w	ip, r1, r7
 800a57e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a582:	d01d      	beq.n	800a5c0 <floor+0x98>
 800a584:	a324      	add	r3, pc, #144	@ (adr r3, 800a618 <floor+0xf0>)
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	f7f5 fdef 	bl	800016c <__adddf3>
 800a58e:	2200      	movs	r2, #0
 800a590:	2300      	movs	r3, #0
 800a592:	f7f6 fa31 	bl	80009f8 <__aeabi_dcmpgt>
 800a596:	2800      	cmp	r0, #0
 800a598:	d0ea      	beq.n	800a570 <floor+0x48>
 800a59a:	2c00      	cmp	r4, #0
 800a59c:	bfbe      	ittt	lt
 800a59e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a5a2:	4133      	asrlt	r3, r6
 800a5a4:	18e4      	addlt	r4, r4, r3
 800a5a6:	2500      	movs	r5, #0
 800a5a8:	ea24 0407 	bic.w	r4, r4, r7
 800a5ac:	e7e0      	b.n	800a570 <floor+0x48>
 800a5ae:	2e33      	cmp	r6, #51	@ 0x33
 800a5b0:	dd0a      	ble.n	800a5c8 <floor+0xa0>
 800a5b2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a5b6:	d103      	bne.n	800a5c0 <floor+0x98>
 800a5b8:	f7f5 fdd8 	bl	800016c <__adddf3>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c8:	f04f 3cff 	mov.w	ip, #4294967295
 800a5cc:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a5d0:	fa2c f707 	lsr.w	r7, ip, r7
 800a5d4:	4207      	tst	r7, r0
 800a5d6:	d0f3      	beq.n	800a5c0 <floor+0x98>
 800a5d8:	a30f      	add	r3, pc, #60	@ (adr r3, 800a618 <floor+0xf0>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f5 fdc5 	bl	800016c <__adddf3>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f7f6 fa07 	bl	80009f8 <__aeabi_dcmpgt>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d0c0      	beq.n	800a570 <floor+0x48>
 800a5ee:	2c00      	cmp	r4, #0
 800a5f0:	da0a      	bge.n	800a608 <floor+0xe0>
 800a5f2:	2e14      	cmp	r6, #20
 800a5f4:	d101      	bne.n	800a5fa <floor+0xd2>
 800a5f6:	3401      	adds	r4, #1
 800a5f8:	e006      	b.n	800a608 <floor+0xe0>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a600:	40b3      	lsls	r3, r6
 800a602:	441d      	add	r5, r3
 800a604:	4545      	cmp	r5, r8
 800a606:	d3f6      	bcc.n	800a5f6 <floor+0xce>
 800a608:	ea25 0507 	bic.w	r5, r5, r7
 800a60c:	e7b0      	b.n	800a570 <floor+0x48>
 800a60e:	2500      	movs	r5, #0
 800a610:	462c      	mov	r4, r5
 800a612:	e7ad      	b.n	800a570 <floor+0x48>
 800a614:	f3af 8000 	nop.w
 800a618:	8800759c 	.word	0x8800759c
 800a61c:	7e37e43c 	.word	0x7e37e43c
 800a620:	bff00000 	.word	0xbff00000
 800a624:	000fffff 	.word	0x000fffff

0800a628 <_init>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr

0800a634 <_fini>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	bf00      	nop
 800a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63a:	bc08      	pop	{r3}
 800a63c:	469e      	mov	lr, r3
 800a63e:	4770      	bx	lr
