
SWV_try2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002088  08002088  00003088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c4  080020c4  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080020c4  080020c4  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c4  080020c4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c4  080020c4  000030c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020c8  080020c8  000030c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080020cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002134  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002134  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070e9  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a9  00000000  00000000  0000b17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000525  00000000  00000000  0000cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176a4  00000000  00000000  0000d31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008287  00000000  00000000  000249c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ba9  00000000  00000000  0002cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b07f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  000b0834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b28a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002070 	.word	0x08002070

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002070 	.word	0x08002070

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
  * @brief  The application entry point.
  * @retval int
  */

int _write(int le, char *ptr, int len)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}

	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:



int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa66 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f810 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f87a 	bl	80002d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f84e 	bl	8000280 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World \n");
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <main+0x28>)
 80001e6:	f001 fbb5 	bl	8001954 <puts>
	  HAL_Delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ee:	f000 fabb 	bl	8000768 <HAL_Delay>
  {
 80001f2:	bf00      	nop
 80001f4:	e7f6      	b.n	80001e4 <main+0x14>
 80001f6:	bf00      	nop
 80001f8:	08002088 	.word	0x08002088

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	@ 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	@ 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fc82 	bl	8001b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2310      	movs	r3, #16
 8000228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022a:	2302      	movs	r3, #2
 800022c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800022e:	2300      	movs	r3, #0
 8000230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000232:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fd83 	bl	8000d48 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000248:	f000 f8d2 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fff0 	bl	800124c <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000272:	f000 f8bd 	bl	80003f0 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000284:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 8000286:	4a12      	ldr	r2, [pc, #72]	@ (80002d0 <MX_USART2_UART_Init+0x50>)
 8000288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800028a:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 800028c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000292:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000298:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800029e:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002a4:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 80002a6:	220c      	movs	r2, #12
 80002a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002aa:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002b6:	4805      	ldr	r0, [pc, #20]	@ (80002cc <MX_USART2_UART_Init+0x4c>)
 80002b8:	f001 f956 	bl	8001568 <HAL_UART_Init>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002c2:	f000 f895 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000084 	.word	0x20000084
 80002d0:	40004400 	.word	0x40004400

080002d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	@ 0x28
 80002d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e8:	4b3b      	ldr	r3, [pc, #236]	@ (80003d8 <MX_GPIO_Init+0x104>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a3a      	ldr	r2, [pc, #232]	@ (80003d8 <MX_GPIO_Init+0x104>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b38      	ldr	r3, [pc, #224]	@ (80003d8 <MX_GPIO_Init+0x104>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0310 	and.w	r3, r3, #16
 80002fc:	613b      	str	r3, [r7, #16]
 80002fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000300:	4b35      	ldr	r3, [pc, #212]	@ (80003d8 <MX_GPIO_Init+0x104>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a34      	ldr	r2, [pc, #208]	@ (80003d8 <MX_GPIO_Init+0x104>)
 8000306:	f043 0320 	orr.w	r3, r3, #32
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b32      	ldr	r3, [pc, #200]	@ (80003d8 <MX_GPIO_Init+0x104>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000318:	4b2f      	ldr	r3, [pc, #188]	@ (80003d8 <MX_GPIO_Init+0x104>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a2e      	ldr	r2, [pc, #184]	@ (80003d8 <MX_GPIO_Init+0x104>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b2c      	ldr	r3, [pc, #176]	@ (80003d8 <MX_GPIO_Init+0x104>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0304 	and.w	r3, r3, #4
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000330:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <MX_GPIO_Init+0x104>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a28      	ldr	r2, [pc, #160]	@ (80003d8 <MX_GPIO_Init+0x104>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <MX_GPIO_Init+0x104>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2120      	movs	r1, #32
 800034c:	4823      	ldr	r0, [pc, #140]	@ (80003dc <MX_GPIO_Init+0x108>)
 800034e:	f000 fcc1 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000352:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000358:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <MX_GPIO_Init+0x10c>)
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	4619      	mov	r1, r3
 8000366:	481f      	ldr	r0, [pc, #124]	@ (80003e4 <MX_GPIO_Init+0x110>)
 8000368:	f000 fb30 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800036c:	2320      	movs	r3, #32
 800036e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	4816      	ldr	r0, [pc, #88]	@ (80003dc <MX_GPIO_Init+0x108>)
 8000384:	f000 fb22 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800038e:	2312      	movs	r3, #18
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000392:	2303      	movs	r3, #3
 8000394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4619      	mov	r1, r3
 800039c:	4812      	ldr	r0, [pc, #72]	@ (80003e8 <MX_GPIO_Init+0x114>)
 800039e:	f000 fb15 	bl	80009cc <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_GPIO_Init+0x118>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003aa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80003ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80003b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003b2:	f043 0302 	orr.w	r3, r3, #2
 80003b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003b8:	4a0c      	ldr	r2, [pc, #48]	@ (80003ec <MX_GPIO_Init+0x118>)
 80003ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003bc:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	2028      	movs	r0, #40	@ 0x28
 80003c4:	f000 facb 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003c8:	2028      	movs	r0, #40	@ 0x28
 80003ca:	f000 fae4 	bl	8000996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ce:	bf00      	nop
 80003d0:	3728      	adds	r7, #40	@ 0x28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010800 	.word	0x40010800
 80003e0:	10110000 	.word	0x10110000
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	40010000 	.word	0x40010000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a15      	ldr	r2, [pc, #84]	@ (80004d0 <HAL_UART_MspInit+0x70>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d123      	bne.n	80004c8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000480:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a13      	ldr	r2, [pc, #76]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 8000486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <HAL_UART_MspInit+0x74>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004b0:	230c      	movs	r3, #12
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <HAL_UART_MspInit+0x78>)
 80004c4:	f000 fa82 	bl	80009cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004c8:	bf00      	nop
 80004ca:	3720      	adds	r7, #32
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40004400 	.word	0x40004400
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <NMI_Handler+0x4>

080004e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <MemManage_Handler+0x4>

080004f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <BusFault_Handler+0x4>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <UsageFault_Handler+0x4>

08000504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052c:	f000 f900 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000538:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800053c:	f000 fbe2 	bl	8000d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	e00a      	b.n	800056c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000556:	f3af 8000 	nop.w
 800055a:	4601      	mov	r1, r0
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	60ba      	str	r2, [r7, #8]
 8000562:	b2ca      	uxtb	r2, r1
 8000564:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf0      	blt.n	8000556 <_read+0x12>
  }

  return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <_close>:
  }
  return len;
}

int _close(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005a4:	605a      	str	r2, [r3, #4]
  return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <_isatty>:

int _isatty(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b085      	sub	sp, #20
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
	...

080005e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e8:	4a14      	ldr	r2, [pc, #80]	@ (800063c <_sbrk+0x5c>)
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <_sbrk+0x60>)
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <_sbrk+0x64>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <_sbrk+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000610:	f001 face 	bl	8001bb0 <__errno>
 8000614:	4603      	mov	r3, r0
 8000616:	220c      	movs	r2, #12
 8000618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	e009      	b.n	8000634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000626:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <_sbrk+0x64>)
 8000630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20005000 	.word	0x20005000
 8000640:	00000400 	.word	0x00000400
 8000644:	200000cc 	.word	0x200000cc
 8000648:	20000220 	.word	0x20000220

0800064c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff fff8 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065e:	490c      	ldr	r1, [pc, #48]	@ (8000690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000674:	4c09      	ldr	r4, [pc, #36]	@ (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f001 fa9b 	bl	8001bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fda3 	bl	80001d0 <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000694:	080020cc 	.word	0x080020cc
  ldr r2, =_sbss
 8000698:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800069c:	20000220 	.word	0x20000220

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f947 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff fe9c 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f95f 	bl	80009b2 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f927 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	@ (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	200000d0 	.word	0x200000d0

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	200000d0 	.word	0x200000d0

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff0 	bl	8000754 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffe0 	bl	8000754 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008

080007b0 <__NVIC_SetPriorityGrouping>:
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	@ (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	@ (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	@ (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	@ 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	@ 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SysTick_Config>:
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff90 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff2d 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff42 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff90 	bl	80008a0 <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5f 	bl	800084c <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff35 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b08b      	sub	sp, #44	@ 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e169      	b.n	8000cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e0:	2201      	movs	r2, #1
 80009e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f040 8158 	bne.w	8000cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4a9a      	ldr	r2, [pc, #616]	@ (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d05e      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a08:	4a98      	ldr	r2, [pc, #608]	@ (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d875      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a0e:	4a98      	ldr	r2, [pc, #608]	@ (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d058      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a14:	4a96      	ldr	r2, [pc, #600]	@ (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d86f      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a1a:	4a96      	ldr	r2, [pc, #600]	@ (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d052      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a20:	4a94      	ldr	r2, [pc, #592]	@ (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d869      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a26:	4a94      	ldr	r2, [pc, #592]	@ (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d04c      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a2c:	4a92      	ldr	r2, [pc, #584]	@ (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d863      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a32:	4a92      	ldr	r2, [pc, #584]	@ (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d046      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a38:	4a90      	ldr	r2, [pc, #576]	@ (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d85d      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d82a      	bhi.n	8000a98 <HAL_GPIO_Init+0xcc>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d859      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a46:	a201      	add	r2, pc, #4	@ (adr r2, 8000a4c <HAL_GPIO_Init+0x80>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000aa1 	.word	0x08000aa1
 8000a54:	08000ab3 	.word	0x08000ab3
 8000a58:	08000af5 	.word	0x08000af5
 8000a5c:	08000afb 	.word	0x08000afb
 8000a60:	08000afb 	.word	0x08000afb
 8000a64:	08000afb 	.word	0x08000afb
 8000a68:	08000afb 	.word	0x08000afb
 8000a6c:	08000afb 	.word	0x08000afb
 8000a70:	08000afb 	.word	0x08000afb
 8000a74:	08000afb 	.word	0x08000afb
 8000a78:	08000afb 	.word	0x08000afb
 8000a7c:	08000afb 	.word	0x08000afb
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000afb 	.word	0x08000afb
 8000a88:	08000afb 	.word	0x08000afb
 8000a8c:	08000afb 	.word	0x08000afb
 8000a90:	08000aa9 	.word	0x08000aa9
 8000a94:	08000abd 	.word	0x08000abd
 8000a98:	4a79      	ldr	r2, [pc, #484]	@ (8000c80 <HAL_GPIO_Init+0x2b4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e029      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e024      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01f      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e01a      	b.n	8000afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e013      	b.n	8000afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e009      	b.n	8000afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e003      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e000      	b.n	8000afc <HAL_GPIO_Init+0x130>
          break;
 8000afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	@ 0xff
 8000b00:	d801      	bhi.n	8000b06 <HAL_GPIO_Init+0x13a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	e001      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d802      	bhi.n	8000b18 <HAL_GPIO_Init+0x14c>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	e002      	b.n	8000b1e <HAL_GPIO_Init+0x152>
 8000b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1a:	3b08      	subs	r3, #8
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	210f      	movs	r1, #15
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	6a39      	ldr	r1, [r7, #32]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80b1 	beq.w	8000cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	@ (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b4a      	ldr	r3, [pc, #296]	@ (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b64:	4a48      	ldr	r2, [pc, #288]	@ (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a40      	ldr	r2, [pc, #256]	@ (8000c8c <HAL_GPIO_Init+0x2c0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d013      	beq.n	8000bb8 <HAL_GPIO_Init+0x1ec>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3f      	ldr	r2, [pc, #252]	@ (8000c90 <HAL_GPIO_Init+0x2c4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d00d      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e8>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c94 <HAL_GPIO_Init+0x2c8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x1e4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d101      	bne.n	8000bac <HAL_GPIO_Init+0x1e0>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bca:	492f      	ldr	r1, [pc, #188]	@ (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	492c      	ldr	r1, [pc, #176]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	608b      	str	r3, [r1, #8]
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4928      	ldr	r1, [pc, #160]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d006      	beq.n	8000c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c0c:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	4922      	ldr	r1, [pc, #136]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60cb      	str	r3, [r1, #12]
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c1a:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	491e      	ldr	r1, [pc, #120]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c34:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4918      	ldr	r1, [pc, #96]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4914      	ldr	r1, [pc, #80]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d021      	beq.n	8000ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	490e      	ldr	r1, [pc, #56]	@ (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
 8000c68:	e021      	b.n	8000cae <HAL_GPIO_Init+0x2e2>
 8000c6a:	bf00      	nop
 8000c6c:	10320000 	.word	0x10320000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	10220000 	.word	0x10220000
 8000c78:	10210000 	.word	0x10210000
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	10110000 	.word	0x10110000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_GPIO_Init+0x304>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4909      	ldr	r1, [pc, #36]	@ (8000cd0 <HAL_GPIO_Init+0x304>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cba:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f47f ae8e 	bne.w	80009e0 <HAL_GPIO_Init+0x14>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	372c      	adds	r7, #44	@ 0x2c
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf0:	e003      	b.n	8000cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	611a      	str	r2, [r3, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f806 	bl	8000d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e272      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8087 	beq.w	8000e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d68:	4b92      	ldr	r3, [pc, #584]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	d00c      	beq.n	8000d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d74:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d112      	bne.n	8000da6 <HAL_RCC_OscConfig+0x5e>
 8000d80:	4b8c      	ldr	r3, [pc, #560]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d8c:	d10b      	bne.n	8000da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8e:	4b89      	ldr	r3, [pc, #548]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d06c      	beq.n	8000e74 <HAL_RCC_OscConfig+0x12c>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d168      	bne.n	8000e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e24c      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x76>
 8000db0:	4b80      	ldr	r3, [pc, #512]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a7f      	ldr	r2, [pc, #508]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e02e      	b.n	8000e1c <HAL_RCC_OscConfig+0xd4>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x98>
 8000dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a7a      	ldr	r2, [pc, #488]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b78      	ldr	r3, [pc, #480]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a77      	ldr	r2, [pc, #476]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e01d      	b.n	8000e1c <HAL_RCC_OscConfig+0xd4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0xbc>
 8000dea:	4b72      	ldr	r3, [pc, #456]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a71      	ldr	r2, [pc, #452]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a6e      	ldr	r2, [pc, #440]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e00b      	b.n	8000e1c <HAL_RCC_OscConfig+0xd4>
 8000e04:	4b6b      	ldr	r3, [pc, #428]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a6a      	ldr	r2, [pc, #424]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b68      	ldr	r3, [pc, #416]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a67      	ldr	r2, [pc, #412]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d013      	beq.n	8000e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fc96 	bl	8000754 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fc92 	bl	8000754 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	@ 0x64
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e200      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0xe4>
 8000e4a:	e014      	b.n	8000e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fc82 	bl	8000754 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fc7e 	bl	8000754 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	@ 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e1ec      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	4b53      	ldr	r3, [pc, #332]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x10c>
 8000e72:	e000      	b.n	8000e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d063      	beq.n	8000f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e82:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e8e:	4b49      	ldr	r3, [pc, #292]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d11c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x18c>
 8000e9a:	4b46      	ldr	r3, [pc, #280]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d116      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea6:	4b43      	ldr	r3, [pc, #268]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_RCC_OscConfig+0x176>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d001      	beq.n	8000ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e1c0      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4939      	ldr	r1, [pc, #228]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	e03a      	b.n	8000f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d020      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000edc:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fc37 	bl	8000754 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fc33 	bl	8000754 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e1a1      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4927      	ldr	r1, [pc, #156]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
 8000f1c:	e015      	b.n	8000f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fc16 	bl	8000754 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc12 	bl	8000754 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e180      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d03a      	beq.n	8000fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d019      	beq.n	8000f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <HAL_RCC_OscConfig+0x274>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f64:	f7ff fbf6 	bl	8000754 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fbf2 	bl	8000754 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e160      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 face 	bl	800152c <RCC_Delay>
 8000f90:	e01c      	b.n	8000fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_RCC_OscConfig+0x274>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fbdc 	bl	8000754 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9e:	e00f      	b.n	8000fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fbd8 	bl	8000754 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d908      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e146      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	42420000 	.word	0x42420000
 8000fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc0:	4b92      	ldr	r3, [pc, #584]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e9      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80a6 	beq.w	8001126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fde:	4b8b      	ldr	r3, [pc, #556]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10d      	bne.n	8001006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b88      	ldr	r3, [pc, #544]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a87      	ldr	r2, [pc, #540]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b85      	ldr	r3, [pc, #532]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001002:	2301      	movs	r3, #1
 8001004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001006:	4b82      	ldr	r3, [pc, #520]	@ (8001210 <HAL_RCC_OscConfig+0x4c8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100e:	2b00      	cmp	r3, #0
 8001010:	d118      	bne.n	8001044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001012:	4b7f      	ldr	r3, [pc, #508]	@ (8001210 <HAL_RCC_OscConfig+0x4c8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a7e      	ldr	r2, [pc, #504]	@ (8001210 <HAL_RCC_OscConfig+0x4c8>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101e:	f7ff fb99 	bl	8000754 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001026:	f7ff fb95 	bl	8000754 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b64      	cmp	r3, #100	@ 0x64
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e103      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	4b75      	ldr	r3, [pc, #468]	@ (8001210 <HAL_RCC_OscConfig+0x4c8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d106      	bne.n	800105a <HAL_RCC_OscConfig+0x312>
 800104c:	4b6f      	ldr	r3, [pc, #444]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a6e      	ldr	r2, [pc, #440]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6213      	str	r3, [r2, #32]
 8001058:	e02d      	b.n	80010b6 <HAL_RCC_OscConfig+0x36e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x334>
 8001062:	4b6a      	ldr	r3, [pc, #424]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a69      	ldr	r2, [pc, #420]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6213      	str	r3, [r2, #32]
 800106e:	4b67      	ldr	r3, [pc, #412]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a66      	ldr	r2, [pc, #408]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001074:	f023 0304 	bic.w	r3, r3, #4
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	e01c      	b.n	80010b6 <HAL_RCC_OscConfig+0x36e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b05      	cmp	r3, #5
 8001082:	d10c      	bne.n	800109e <HAL_RCC_OscConfig+0x356>
 8001084:	4b61      	ldr	r3, [pc, #388]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	4a60      	ldr	r2, [pc, #384]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6213      	str	r3, [r2, #32]
 8001090:	4b5e      	ldr	r3, [pc, #376]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a5d      	ldr	r2, [pc, #372]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	e00b      	b.n	80010b6 <HAL_RCC_OscConfig+0x36e>
 800109e:	4b5b      	ldr	r3, [pc, #364]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	4a5a      	ldr	r2, [pc, #360]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6213      	str	r3, [r2, #32]
 80010aa:	4b58      	ldr	r3, [pc, #352]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a57      	ldr	r2, [pc, #348]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f023 0304 	bic.w	r3, r3, #4
 80010b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d015      	beq.n	80010ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010be:	f7ff fb49 	bl	8000754 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c4:	e00a      	b.n	80010dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c6:	f7ff fb45 	bl	8000754 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e0b1      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010dc:	4b4b      	ldr	r3, [pc, #300]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0ee      	beq.n	80010c6 <HAL_RCC_OscConfig+0x37e>
 80010e8:	e014      	b.n	8001114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fb33 	bl	8000754 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f0:	e00a      	b.n	8001108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff fb2f 	bl	8000754 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001100:	4293      	cmp	r3, r2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e09b      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001108:	4b40      	ldr	r3, [pc, #256]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ee      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d105      	bne.n	8001126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111a:	4b3c      	ldr	r3, [pc, #240]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a3b      	ldr	r2, [pc, #236]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8087 	beq.w	800123e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001130:	4b36      	ldr	r3, [pc, #216]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b08      	cmp	r3, #8
 800113a:	d061      	beq.n	8001200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d146      	bne.n	80011d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <HAL_RCC_OscConfig+0x4cc>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb03 	bl	8000754 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff faff 	bl	8000754 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e06d      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001164:	4b29      	ldr	r3, [pc, #164]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f0      	bne.n	8001152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001178:	d108      	bne.n	800118c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800117a:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4921      	ldr	r1, [pc, #132]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a19      	ldr	r1, [r3, #32]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	430b      	orrs	r3, r1
 800119e:	491b      	ldr	r1, [pc, #108]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <HAL_RCC_OscConfig+0x4cc>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fad3 	bl	8000754 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff facf 	bl	8000754 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e03d      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x46a>
 80011d0:	e035      	b.n	800123e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_RCC_OscConfig+0x4cc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fabc 	bl	8000754 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff fab8 	bl	8000754 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e026      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x498>
 80011fe:	e01e      	b.n	800123e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d107      	bne.n	8001218 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e019      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
 800120c:	40021000 	.word	0x40021000
 8001210:	40007000 	.word	0x40007000
 8001214:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_RCC_OscConfig+0x500>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	429a      	cmp	r2, r3
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	429a      	cmp	r2, r3
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0d0      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001260:	4b6a      	ldr	r3, [pc, #424]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d910      	bls.n	8001290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b67      	ldr	r3, [pc, #412]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 0207 	bic.w	r2, r3, #7
 8001276:	4965      	ldr	r1, [pc, #404]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b63      	ldr	r3, [pc, #396]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a8:	4b59      	ldr	r3, [pc, #356]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a58      	ldr	r2, [pc, #352]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c0:	4b53      	ldr	r3, [pc, #332]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a52      	ldr	r2, [pc, #328]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b50      	ldr	r3, [pc, #320]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	494d      	ldr	r1, [pc, #308]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d040      	beq.n	800136c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d115      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e073      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06b      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132a:	4b39      	ldr	r3, [pc, #228]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f023 0203 	bic.w	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4936      	ldr	r1, [pc, #216]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff fa0a 	bl	8000754 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	e00a      	b.n	800135a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001344:	f7ff fa06 	bl	8000754 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e053      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	4b2d      	ldr	r3, [pc, #180]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 020c 	and.w	r2, r3, #12
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	429a      	cmp	r2, r3
 800136a:	d1eb      	bne.n	8001344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d210      	bcs.n	800139c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b24      	ldr	r3, [pc, #144]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 0207 	bic.w	r2, r3, #7
 8001382:	4922      	ldr	r1, [pc, #136]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e032      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4916      	ldr	r1, [pc, #88]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	490e      	ldr	r1, [pc, #56]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013da:	f000 f821 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	490a      	ldr	r1, [pc, #40]	@ (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <HAL_RCC_ClockConfig+0x1cc>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_RCC_ClockConfig+0x1d0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f968 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000
 8001410:	40021000 	.word	0x40021000
 8001414:	08002098 	.word	0x08002098
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d002      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0x30>
 800144a:	2b08      	cmp	r3, #8
 800144c:	d003      	beq.n	8001456 <HAL_RCC_GetSysClockFreq+0x36>
 800144e:	e027      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001452:	613b      	str	r3, [r7, #16]
      break;
 8001454:	e027      	b.n	80014a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	0c9b      	lsrs	r3, r3, #18
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	4a17      	ldr	r2, [pc, #92]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d010      	beq.n	8001490 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	0c5b      	lsrs	r3, r3, #17
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001482:	fb03 f202 	mul.w	r2, r3, r2
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	fbb2 f3f3 	udiv	r3, r2, r3
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e004      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a0c      	ldr	r2, [pc, #48]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	613b      	str	r3, [r7, #16]
      break;
 800149e:	e002      	b.n	80014a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80014a2:	613b      	str	r3, [r7, #16]
      break;
 80014a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a6:	693b      	ldr	r3, [r7, #16]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	007a1200 	.word	0x007a1200
 80014bc:	080020b0 	.word	0x080020b0
 80014c0:	080020c0 	.word	0x080020c0
 80014c4:	003d0900 	.word	0x003d0900

080014c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014cc:	4b02      	ldr	r3, [pc, #8]	@ (80014d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000000 	.word	0x20000000

080014dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014e0:	f7ff fff2 	bl	80014c8 <HAL_RCC_GetHCLKFreq>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	4903      	ldr	r1, [pc, #12]	@ (8001500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	080020a8 	.word	0x080020a8

08001504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001508:	f7ff ffde 	bl	80014c8 <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	0adb      	lsrs	r3, r3, #11
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	@ (8001528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	080020a8 	.word	0x080020a8

0800152c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <RCC_Delay+0x34>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <RCC_Delay+0x38>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0a5b      	lsrs	r3, r3, #9
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001548:	bf00      	nop
  }
  while (Delay --);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1e5a      	subs	r2, r3, #1
 800154e:	60fa      	str	r2, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f9      	bne.n	8001548 <RCC_Delay+0x1c>
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000000 	.word	0x20000000
 8001564:	10624dd3 	.word	0x10624dd3

08001568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e042      	b.n	8001600 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7fe ff66 	bl	8000460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2224      	movs	r2, #36	@ 0x24
 8001598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f82b 	bl	8001608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80015c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80015d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2220      	movs	r2, #32
 80015f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001642:	f023 030c 	bic.w	r3, r3, #12
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	430b      	orrs	r3, r1
 800164e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a2c      	ldr	r2, [pc, #176]	@ (800171c <UART_SetConfig+0x114>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d103      	bne.n	8001678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001670:	f7ff ff48 	bl	8001504 <HAL_RCC_GetPCLK2Freq>
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	e002      	b.n	800167e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001678:	f7ff ff30 	bl	80014dc <HAL_RCC_GetPCLK1Freq>
 800167c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009a      	lsls	r2, r3, #2
 8001688:	441a      	add	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	4a22      	ldr	r2, [pc, #136]	@ (8001720 <UART_SetConfig+0x118>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	0119      	lsls	r1, r3, #4
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	009a      	lsls	r2, r3, #2
 80016a8:	441a      	add	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <UART_SetConfig+0x118>)
 80016b6:	fba3 0302 	umull	r0, r3, r3, r2
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2064      	movs	r0, #100	@ 0x64
 80016be:	fb00 f303 	mul.w	r3, r0, r3
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	3332      	adds	r3, #50	@ 0x32
 80016c8:	4a15      	ldr	r2, [pc, #84]	@ (8001720 <UART_SetConfig+0x118>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016d4:	4419      	add	r1, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	009a      	lsls	r2, r3, #2
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <UART_SetConfig+0x118>)
 80016ee:	fba3 0302 	umull	r0, r3, r3, r2
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2064      	movs	r0, #100	@ 0x64
 80016f6:	fb00 f303 	mul.w	r3, r0, r3
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	3332      	adds	r3, #50	@ 0x32
 8001700:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <UART_SetConfig+0x118>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	f003 020f 	and.w	r2, r3, #15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	440a      	add	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40013800 	.word	0x40013800
 8001720:	51eb851f 	.word	0x51eb851f

08001724 <std>:
 8001724:	2300      	movs	r3, #0
 8001726:	b510      	push	{r4, lr}
 8001728:	4604      	mov	r4, r0
 800172a:	e9c0 3300 	strd	r3, r3, [r0]
 800172e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001732:	6083      	str	r3, [r0, #8]
 8001734:	8181      	strh	r1, [r0, #12]
 8001736:	6643      	str	r3, [r0, #100]	@ 0x64
 8001738:	81c2      	strh	r2, [r0, #14]
 800173a:	6183      	str	r3, [r0, #24]
 800173c:	4619      	mov	r1, r3
 800173e:	2208      	movs	r2, #8
 8001740:	305c      	adds	r0, #92	@ 0x5c
 8001742:	f000 f9e7 	bl	8001b14 <memset>
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <std+0x58>)
 8001748:	6224      	str	r4, [r4, #32]
 800174a:	6263      	str	r3, [r4, #36]	@ 0x24
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <std+0x5c>)
 800174e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <std+0x60>)
 8001752:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <std+0x64>)
 8001756:	6323      	str	r3, [r4, #48]	@ 0x30
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <std+0x68>)
 800175a:	429c      	cmp	r4, r3
 800175c:	d006      	beq.n	800176c <std+0x48>
 800175e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001762:	4294      	cmp	r4, r2
 8001764:	d002      	beq.n	800176c <std+0x48>
 8001766:	33d0      	adds	r3, #208	@ 0xd0
 8001768:	429c      	cmp	r4, r3
 800176a:	d105      	bne.n	8001778 <std+0x54>
 800176c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001774:	f000 ba46 	b.w	8001c04 <__retarget_lock_init_recursive>
 8001778:	bd10      	pop	{r4, pc}
 800177a:	bf00      	nop
 800177c:	08001965 	.word	0x08001965
 8001780:	08001987 	.word	0x08001987
 8001784:	080019bf 	.word	0x080019bf
 8001788:	080019e3 	.word	0x080019e3
 800178c:	200000d4 	.word	0x200000d4

08001790 <stdio_exit_handler>:
 8001790:	4a02      	ldr	r2, [pc, #8]	@ (800179c <stdio_exit_handler+0xc>)
 8001792:	4903      	ldr	r1, [pc, #12]	@ (80017a0 <stdio_exit_handler+0x10>)
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <stdio_exit_handler+0x14>)
 8001796:	f000 b869 	b.w	800186c <_fwalk_sglue>
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	08001ef9 	.word	0x08001ef9
 80017a4:	2000001c 	.word	0x2000001c

080017a8 <cleanup_stdio>:
 80017a8:	6841      	ldr	r1, [r0, #4]
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <cleanup_stdio+0x34>)
 80017ac:	b510      	push	{r4, lr}
 80017ae:	4299      	cmp	r1, r3
 80017b0:	4604      	mov	r4, r0
 80017b2:	d001      	beq.n	80017b8 <cleanup_stdio+0x10>
 80017b4:	f000 fba0 	bl	8001ef8 <_fflush_r>
 80017b8:	68a1      	ldr	r1, [r4, #8]
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <cleanup_stdio+0x38>)
 80017bc:	4299      	cmp	r1, r3
 80017be:	d002      	beq.n	80017c6 <cleanup_stdio+0x1e>
 80017c0:	4620      	mov	r0, r4
 80017c2:	f000 fb99 	bl	8001ef8 <_fflush_r>
 80017c6:	68e1      	ldr	r1, [r4, #12]
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <cleanup_stdio+0x3c>)
 80017ca:	4299      	cmp	r1, r3
 80017cc:	d004      	beq.n	80017d8 <cleanup_stdio+0x30>
 80017ce:	4620      	mov	r0, r4
 80017d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d4:	f000 bb90 	b.w	8001ef8 <_fflush_r>
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	bf00      	nop
 80017dc:	200000d4 	.word	0x200000d4
 80017e0:	2000013c 	.word	0x2000013c
 80017e4:	200001a4 	.word	0x200001a4

080017e8 <global_stdio_init.part.0>:
 80017e8:	b510      	push	{r4, lr}
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <global_stdio_init.part.0+0x30>)
 80017ec:	4c0b      	ldr	r4, [pc, #44]	@ (800181c <global_stdio_init.part.0+0x34>)
 80017ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <global_stdio_init.part.0+0x38>)
 80017f0:	4620      	mov	r0, r4
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	f7ff ff94 	bl	8001724 <std>
 80017fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001800:	2201      	movs	r2, #1
 8001802:	2109      	movs	r1, #9
 8001804:	f7ff ff8e 	bl	8001724 <std>
 8001808:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800180c:	2202      	movs	r2, #2
 800180e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001812:	2112      	movs	r1, #18
 8001814:	f7ff bf86 	b.w	8001724 <std>
 8001818:	2000020c 	.word	0x2000020c
 800181c:	200000d4 	.word	0x200000d4
 8001820:	08001791 	.word	0x08001791

08001824 <__sfp_lock_acquire>:
 8001824:	4801      	ldr	r0, [pc, #4]	@ (800182c <__sfp_lock_acquire+0x8>)
 8001826:	f000 b9ee 	b.w	8001c06 <__retarget_lock_acquire_recursive>
 800182a:	bf00      	nop
 800182c:	20000215 	.word	0x20000215

08001830 <__sfp_lock_release>:
 8001830:	4801      	ldr	r0, [pc, #4]	@ (8001838 <__sfp_lock_release+0x8>)
 8001832:	f000 b9e9 	b.w	8001c08 <__retarget_lock_release_recursive>
 8001836:	bf00      	nop
 8001838:	20000215 	.word	0x20000215

0800183c <__sinit>:
 800183c:	b510      	push	{r4, lr}
 800183e:	4604      	mov	r4, r0
 8001840:	f7ff fff0 	bl	8001824 <__sfp_lock_acquire>
 8001844:	6a23      	ldr	r3, [r4, #32]
 8001846:	b11b      	cbz	r3, 8001850 <__sinit+0x14>
 8001848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800184c:	f7ff bff0 	b.w	8001830 <__sfp_lock_release>
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__sinit+0x28>)
 8001852:	6223      	str	r3, [r4, #32]
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <__sinit+0x2c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f5      	bne.n	8001848 <__sinit+0xc>
 800185c:	f7ff ffc4 	bl	80017e8 <global_stdio_init.part.0>
 8001860:	e7f2      	b.n	8001848 <__sinit+0xc>
 8001862:	bf00      	nop
 8001864:	080017a9 	.word	0x080017a9
 8001868:	2000020c 	.word	0x2000020c

0800186c <_fwalk_sglue>:
 800186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001870:	4607      	mov	r7, r0
 8001872:	4688      	mov	r8, r1
 8001874:	4614      	mov	r4, r2
 8001876:	2600      	movs	r6, #0
 8001878:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800187c:	f1b9 0901 	subs.w	r9, r9, #1
 8001880:	d505      	bpl.n	800188e <_fwalk_sglue+0x22>
 8001882:	6824      	ldr	r4, [r4, #0]
 8001884:	2c00      	cmp	r4, #0
 8001886:	d1f7      	bne.n	8001878 <_fwalk_sglue+0xc>
 8001888:	4630      	mov	r0, r6
 800188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800188e:	89ab      	ldrh	r3, [r5, #12]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d907      	bls.n	80018a4 <_fwalk_sglue+0x38>
 8001894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001898:	3301      	adds	r3, #1
 800189a:	d003      	beq.n	80018a4 <_fwalk_sglue+0x38>
 800189c:	4629      	mov	r1, r5
 800189e:	4638      	mov	r0, r7
 80018a0:	47c0      	blx	r8
 80018a2:	4306      	orrs	r6, r0
 80018a4:	3568      	adds	r5, #104	@ 0x68
 80018a6:	e7e9      	b.n	800187c <_fwalk_sglue+0x10>

080018a8 <_puts_r>:
 80018a8:	6a03      	ldr	r3, [r0, #32]
 80018aa:	b570      	push	{r4, r5, r6, lr}
 80018ac:	4605      	mov	r5, r0
 80018ae:	460e      	mov	r6, r1
 80018b0:	6884      	ldr	r4, [r0, #8]
 80018b2:	b90b      	cbnz	r3, 80018b8 <_puts_r+0x10>
 80018b4:	f7ff ffc2 	bl	800183c <__sinit>
 80018b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018ba:	07db      	lsls	r3, r3, #31
 80018bc:	d405      	bmi.n	80018ca <_puts_r+0x22>
 80018be:	89a3      	ldrh	r3, [r4, #12]
 80018c0:	0598      	lsls	r0, r3, #22
 80018c2:	d402      	bmi.n	80018ca <_puts_r+0x22>
 80018c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018c6:	f000 f99e 	bl	8001c06 <__retarget_lock_acquire_recursive>
 80018ca:	89a3      	ldrh	r3, [r4, #12]
 80018cc:	0719      	lsls	r1, r3, #28
 80018ce:	d502      	bpl.n	80018d6 <_puts_r+0x2e>
 80018d0:	6923      	ldr	r3, [r4, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d135      	bne.n	8001942 <_puts_r+0x9a>
 80018d6:	4621      	mov	r1, r4
 80018d8:	4628      	mov	r0, r5
 80018da:	f000 f8c5 	bl	8001a68 <__swsetup_r>
 80018de:	b380      	cbz	r0, 8001942 <_puts_r+0x9a>
 80018e0:	f04f 35ff 	mov.w	r5, #4294967295
 80018e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018e6:	07da      	lsls	r2, r3, #31
 80018e8:	d405      	bmi.n	80018f6 <_puts_r+0x4e>
 80018ea:	89a3      	ldrh	r3, [r4, #12]
 80018ec:	059b      	lsls	r3, r3, #22
 80018ee:	d402      	bmi.n	80018f6 <_puts_r+0x4e>
 80018f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018f2:	f000 f989 	bl	8001c08 <__retarget_lock_release_recursive>
 80018f6:	4628      	mov	r0, r5
 80018f8:	bd70      	pop	{r4, r5, r6, pc}
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da04      	bge.n	8001908 <_puts_r+0x60>
 80018fe:	69a2      	ldr	r2, [r4, #24]
 8001900:	429a      	cmp	r2, r3
 8001902:	dc17      	bgt.n	8001934 <_puts_r+0x8c>
 8001904:	290a      	cmp	r1, #10
 8001906:	d015      	beq.n	8001934 <_puts_r+0x8c>
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	6022      	str	r2, [r4, #0]
 800190e:	7019      	strb	r1, [r3, #0]
 8001910:	68a3      	ldr	r3, [r4, #8]
 8001912:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001916:	3b01      	subs	r3, #1
 8001918:	60a3      	str	r3, [r4, #8]
 800191a:	2900      	cmp	r1, #0
 800191c:	d1ed      	bne.n	80018fa <_puts_r+0x52>
 800191e:	2b00      	cmp	r3, #0
 8001920:	da11      	bge.n	8001946 <_puts_r+0x9e>
 8001922:	4622      	mov	r2, r4
 8001924:	210a      	movs	r1, #10
 8001926:	4628      	mov	r0, r5
 8001928:	f000 f85f 	bl	80019ea <__swbuf_r>
 800192c:	3001      	adds	r0, #1
 800192e:	d0d7      	beq.n	80018e0 <_puts_r+0x38>
 8001930:	250a      	movs	r5, #10
 8001932:	e7d7      	b.n	80018e4 <_puts_r+0x3c>
 8001934:	4622      	mov	r2, r4
 8001936:	4628      	mov	r0, r5
 8001938:	f000 f857 	bl	80019ea <__swbuf_r>
 800193c:	3001      	adds	r0, #1
 800193e:	d1e7      	bne.n	8001910 <_puts_r+0x68>
 8001940:	e7ce      	b.n	80018e0 <_puts_r+0x38>
 8001942:	3e01      	subs	r6, #1
 8001944:	e7e4      	b.n	8001910 <_puts_r+0x68>
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	6022      	str	r2, [r4, #0]
 800194c:	220a      	movs	r2, #10
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e7ee      	b.n	8001930 <_puts_r+0x88>
	...

08001954 <puts>:
 8001954:	4b02      	ldr	r3, [pc, #8]	@ (8001960 <puts+0xc>)
 8001956:	4601      	mov	r1, r0
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	f7ff bfa5 	b.w	80018a8 <_puts_r>
 800195e:	bf00      	nop
 8001960:	20000018 	.word	0x20000018

08001964 <__sread>:
 8001964:	b510      	push	{r4, lr}
 8001966:	460c      	mov	r4, r1
 8001968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800196c:	f000 f8fc 	bl	8001b68 <_read_r>
 8001970:	2800      	cmp	r0, #0
 8001972:	bfab      	itete	ge
 8001974:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001976:	89a3      	ldrhlt	r3, [r4, #12]
 8001978:	181b      	addge	r3, r3, r0
 800197a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800197e:	bfac      	ite	ge
 8001980:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001982:	81a3      	strhlt	r3, [r4, #12]
 8001984:	bd10      	pop	{r4, pc}

08001986 <__swrite>:
 8001986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800198a:	461f      	mov	r7, r3
 800198c:	898b      	ldrh	r3, [r1, #12]
 800198e:	4605      	mov	r5, r0
 8001990:	05db      	lsls	r3, r3, #23
 8001992:	460c      	mov	r4, r1
 8001994:	4616      	mov	r6, r2
 8001996:	d505      	bpl.n	80019a4 <__swrite+0x1e>
 8001998:	2302      	movs	r3, #2
 800199a:	2200      	movs	r2, #0
 800199c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019a0:	f000 f8d0 	bl	8001b44 <_lseek_r>
 80019a4:	89a3      	ldrh	r3, [r4, #12]
 80019a6:	4632      	mov	r2, r6
 80019a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	4628      	mov	r0, r5
 80019b0:	463b      	mov	r3, r7
 80019b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019ba:	f000 b8e7 	b.w	8001b8c <_write_r>

080019be <__sseek>:
 80019be:	b510      	push	{r4, lr}
 80019c0:	460c      	mov	r4, r1
 80019c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c6:	f000 f8bd 	bl	8001b44 <_lseek_r>
 80019ca:	1c43      	adds	r3, r0, #1
 80019cc:	89a3      	ldrh	r3, [r4, #12]
 80019ce:	bf15      	itete	ne
 80019d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80019d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80019d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80019da:	81a3      	strheq	r3, [r4, #12]
 80019dc:	bf18      	it	ne
 80019de:	81a3      	strhne	r3, [r4, #12]
 80019e0:	bd10      	pop	{r4, pc}

080019e2 <__sclose>:
 80019e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e6:	f000 b89d 	b.w	8001b24 <_close_r>

080019ea <__swbuf_r>:
 80019ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ec:	460e      	mov	r6, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	4605      	mov	r5, r0
 80019f2:	b118      	cbz	r0, 80019fc <__swbuf_r+0x12>
 80019f4:	6a03      	ldr	r3, [r0, #32]
 80019f6:	b90b      	cbnz	r3, 80019fc <__swbuf_r+0x12>
 80019f8:	f7ff ff20 	bl	800183c <__sinit>
 80019fc:	69a3      	ldr	r3, [r4, #24]
 80019fe:	60a3      	str	r3, [r4, #8]
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	071a      	lsls	r2, r3, #28
 8001a04:	d501      	bpl.n	8001a0a <__swbuf_r+0x20>
 8001a06:	6923      	ldr	r3, [r4, #16]
 8001a08:	b943      	cbnz	r3, 8001a1c <__swbuf_r+0x32>
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f000 f82b 	bl	8001a68 <__swsetup_r>
 8001a12:	b118      	cbz	r0, 8001a1c <__swbuf_r+0x32>
 8001a14:	f04f 37ff 	mov.w	r7, #4294967295
 8001a18:	4638      	mov	r0, r7
 8001a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	6922      	ldr	r2, [r4, #16]
 8001a20:	b2f6      	uxtb	r6, r6
 8001a22:	1a98      	subs	r0, r3, r2
 8001a24:	6963      	ldr	r3, [r4, #20]
 8001a26:	4637      	mov	r7, r6
 8001a28:	4283      	cmp	r3, r0
 8001a2a:	dc05      	bgt.n	8001a38 <__swbuf_r+0x4e>
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f000 fa62 	bl	8001ef8 <_fflush_r>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d1ed      	bne.n	8001a14 <__swbuf_r+0x2a>
 8001a38:	68a3      	ldr	r3, [r4, #8]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	60a3      	str	r3, [r4, #8]
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	6022      	str	r2, [r4, #0]
 8001a44:	701e      	strb	r6, [r3, #0]
 8001a46:	6962      	ldr	r2, [r4, #20]
 8001a48:	1c43      	adds	r3, r0, #1
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d004      	beq.n	8001a58 <__swbuf_r+0x6e>
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	07db      	lsls	r3, r3, #31
 8001a52:	d5e1      	bpl.n	8001a18 <__swbuf_r+0x2e>
 8001a54:	2e0a      	cmp	r6, #10
 8001a56:	d1df      	bne.n	8001a18 <__swbuf_r+0x2e>
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 fa4c 	bl	8001ef8 <_fflush_r>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d0d9      	beq.n	8001a18 <__swbuf_r+0x2e>
 8001a64:	e7d6      	b.n	8001a14 <__swbuf_r+0x2a>
	...

08001a68 <__swsetup_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <__swsetup_r+0xa8>)
 8001a6c:	4605      	mov	r5, r0
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	460c      	mov	r4, r1
 8001a72:	b118      	cbz	r0, 8001a7c <__swsetup_r+0x14>
 8001a74:	6a03      	ldr	r3, [r0, #32]
 8001a76:	b90b      	cbnz	r3, 8001a7c <__swsetup_r+0x14>
 8001a78:	f7ff fee0 	bl	800183c <__sinit>
 8001a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a80:	0719      	lsls	r1, r3, #28
 8001a82:	d422      	bmi.n	8001aca <__swsetup_r+0x62>
 8001a84:	06da      	lsls	r2, r3, #27
 8001a86:	d407      	bmi.n	8001a98 <__swsetup_r+0x30>
 8001a88:	2209      	movs	r2, #9
 8001a8a:	602a      	str	r2, [r5, #0]
 8001a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	81a3      	strh	r3, [r4, #12]
 8001a96:	e033      	b.n	8001b00 <__swsetup_r+0x98>
 8001a98:	0758      	lsls	r0, r3, #29
 8001a9a:	d512      	bpl.n	8001ac2 <__swsetup_r+0x5a>
 8001a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a9e:	b141      	cbz	r1, 8001ab2 <__swsetup_r+0x4a>
 8001aa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001aa4:	4299      	cmp	r1, r3
 8001aa6:	d002      	beq.n	8001aae <__swsetup_r+0x46>
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 f8af 	bl	8001c0c <_free_r>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ab2:	89a3      	ldrh	r3, [r4, #12]
 8001ab4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ab8:	81a3      	strh	r3, [r4, #12]
 8001aba:	2300      	movs	r3, #0
 8001abc:	6063      	str	r3, [r4, #4]
 8001abe:	6923      	ldr	r3, [r4, #16]
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	81a3      	strh	r3, [r4, #12]
 8001aca:	6923      	ldr	r3, [r4, #16]
 8001acc:	b94b      	cbnz	r3, 8001ae2 <__swsetup_r+0x7a>
 8001ace:	89a3      	ldrh	r3, [r4, #12]
 8001ad0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ad8:	d003      	beq.n	8001ae2 <__swsetup_r+0x7a>
 8001ada:	4621      	mov	r1, r4
 8001adc:	4628      	mov	r0, r5
 8001ade:	f000 fa58 	bl	8001f92 <__smakebuf_r>
 8001ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ae6:	f013 0201 	ands.w	r2, r3, #1
 8001aea:	d00a      	beq.n	8001b02 <__swsetup_r+0x9a>
 8001aec:	2200      	movs	r2, #0
 8001aee:	60a2      	str	r2, [r4, #8]
 8001af0:	6962      	ldr	r2, [r4, #20]
 8001af2:	4252      	negs	r2, r2
 8001af4:	61a2      	str	r2, [r4, #24]
 8001af6:	6922      	ldr	r2, [r4, #16]
 8001af8:	b942      	cbnz	r2, 8001b0c <__swsetup_r+0xa4>
 8001afa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001afe:	d1c5      	bne.n	8001a8c <__swsetup_r+0x24>
 8001b00:	bd38      	pop	{r3, r4, r5, pc}
 8001b02:	0799      	lsls	r1, r3, #30
 8001b04:	bf58      	it	pl
 8001b06:	6962      	ldrpl	r2, [r4, #20]
 8001b08:	60a2      	str	r2, [r4, #8]
 8001b0a:	e7f4      	b.n	8001af6 <__swsetup_r+0x8e>
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	e7f7      	b.n	8001b00 <__swsetup_r+0x98>
 8001b10:	20000018 	.word	0x20000018

08001b14 <memset>:
 8001b14:	4603      	mov	r3, r0
 8001b16:	4402      	add	r2, r0
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d100      	bne.n	8001b1e <memset+0xa>
 8001b1c:	4770      	bx	lr
 8001b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b22:	e7f9      	b.n	8001b18 <memset+0x4>

08001b24 <_close_r>:
 8001b24:	b538      	push	{r3, r4, r5, lr}
 8001b26:	2300      	movs	r3, #0
 8001b28:	4d05      	ldr	r5, [pc, #20]	@ (8001b40 <_close_r+0x1c>)
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	602b      	str	r3, [r5, #0]
 8001b30:	f7fe fd25 	bl	800057e <_close>
 8001b34:	1c43      	adds	r3, r0, #1
 8001b36:	d102      	bne.n	8001b3e <_close_r+0x1a>
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	b103      	cbz	r3, 8001b3e <_close_r+0x1a>
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	bd38      	pop	{r3, r4, r5, pc}
 8001b40:	20000210 	.word	0x20000210

08001b44 <_lseek_r>:
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4604      	mov	r4, r0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4d05      	ldr	r5, [pc, #20]	@ (8001b64 <_lseek_r+0x20>)
 8001b50:	602a      	str	r2, [r5, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f7fe fd37 	bl	80005c6 <_lseek>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d102      	bne.n	8001b62 <_lseek_r+0x1e>
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	b103      	cbz	r3, 8001b62 <_lseek_r+0x1e>
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	20000210 	.word	0x20000210

08001b68 <_read_r>:
 8001b68:	b538      	push	{r3, r4, r5, lr}
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	4611      	mov	r1, r2
 8001b70:	2200      	movs	r2, #0
 8001b72:	4d05      	ldr	r5, [pc, #20]	@ (8001b88 <_read_r+0x20>)
 8001b74:	602a      	str	r2, [r5, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f7fe fce4 	bl	8000544 <_read>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d102      	bne.n	8001b86 <_read_r+0x1e>
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	b103      	cbz	r3, 8001b86 <_read_r+0x1e>
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	20000210 	.word	0x20000210

08001b8c <_write_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	2200      	movs	r2, #0
 8001b96:	4d05      	ldr	r5, [pc, #20]	@ (8001bac <_write_r+0x20>)
 8001b98:	602a      	str	r2, [r5, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f7fe fafc 	bl	8000198 <_write>
 8001ba0:	1c43      	adds	r3, r0, #1
 8001ba2:	d102      	bne.n	8001baa <_write_r+0x1e>
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	b103      	cbz	r3, 8001baa <_write_r+0x1e>
 8001ba8:	6023      	str	r3, [r4, #0]
 8001baa:	bd38      	pop	{r3, r4, r5, pc}
 8001bac:	20000210 	.word	0x20000210

08001bb0 <__errno>:
 8001bb0:	4b01      	ldr	r3, [pc, #4]	@ (8001bb8 <__errno+0x8>)
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000018 	.word	0x20000018

08001bbc <__libc_init_array>:
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	2600      	movs	r6, #0
 8001bc0:	4d0c      	ldr	r5, [pc, #48]	@ (8001bf4 <__libc_init_array+0x38>)
 8001bc2:	4c0d      	ldr	r4, [pc, #52]	@ (8001bf8 <__libc_init_array+0x3c>)
 8001bc4:	1b64      	subs	r4, r4, r5
 8001bc6:	10a4      	asrs	r4, r4, #2
 8001bc8:	42a6      	cmp	r6, r4
 8001bca:	d109      	bne.n	8001be0 <__libc_init_array+0x24>
 8001bcc:	f000 fa50 	bl	8002070 <_init>
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	4d0a      	ldr	r5, [pc, #40]	@ (8001bfc <__libc_init_array+0x40>)
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c00 <__libc_init_array+0x44>)
 8001bd6:	1b64      	subs	r4, r4, r5
 8001bd8:	10a4      	asrs	r4, r4, #2
 8001bda:	42a6      	cmp	r6, r4
 8001bdc:	d105      	bne.n	8001bea <__libc_init_array+0x2e>
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
 8001be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001be4:	4798      	blx	r3
 8001be6:	3601      	adds	r6, #1
 8001be8:	e7ee      	b.n	8001bc8 <__libc_init_array+0xc>
 8001bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bee:	4798      	blx	r3
 8001bf0:	3601      	adds	r6, #1
 8001bf2:	e7f2      	b.n	8001bda <__libc_init_array+0x1e>
 8001bf4:	080020c4 	.word	0x080020c4
 8001bf8:	080020c4 	.word	0x080020c4
 8001bfc:	080020c4 	.word	0x080020c4
 8001c00:	080020c8 	.word	0x080020c8

08001c04 <__retarget_lock_init_recursive>:
 8001c04:	4770      	bx	lr

08001c06 <__retarget_lock_acquire_recursive>:
 8001c06:	4770      	bx	lr

08001c08 <__retarget_lock_release_recursive>:
 8001c08:	4770      	bx	lr
	...

08001c0c <_free_r>:
 8001c0c:	b538      	push	{r3, r4, r5, lr}
 8001c0e:	4605      	mov	r5, r0
 8001c10:	2900      	cmp	r1, #0
 8001c12:	d040      	beq.n	8001c96 <_free_r+0x8a>
 8001c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c18:	1f0c      	subs	r4, r1, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bfb8      	it	lt
 8001c1e:	18e4      	addlt	r4, r4, r3
 8001c20:	f000 f8de 	bl	8001de0 <__malloc_lock>
 8001c24:	4a1c      	ldr	r2, [pc, #112]	@ (8001c98 <_free_r+0x8c>)
 8001c26:	6813      	ldr	r3, [r2, #0]
 8001c28:	b933      	cbnz	r3, 8001c38 <_free_r+0x2c>
 8001c2a:	6063      	str	r3, [r4, #4]
 8001c2c:	6014      	str	r4, [r2, #0]
 8001c2e:	4628      	mov	r0, r5
 8001c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c34:	f000 b8da 	b.w	8001dec <__malloc_unlock>
 8001c38:	42a3      	cmp	r3, r4
 8001c3a:	d908      	bls.n	8001c4e <_free_r+0x42>
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	1821      	adds	r1, r4, r0
 8001c40:	428b      	cmp	r3, r1
 8001c42:	bf01      	itttt	eq
 8001c44:	6819      	ldreq	r1, [r3, #0]
 8001c46:	685b      	ldreq	r3, [r3, #4]
 8001c48:	1809      	addeq	r1, r1, r0
 8001c4a:	6021      	streq	r1, [r4, #0]
 8001c4c:	e7ed      	b.n	8001c2a <_free_r+0x1e>
 8001c4e:	461a      	mov	r2, r3
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	b10b      	cbz	r3, 8001c58 <_free_r+0x4c>
 8001c54:	42a3      	cmp	r3, r4
 8001c56:	d9fa      	bls.n	8001c4e <_free_r+0x42>
 8001c58:	6811      	ldr	r1, [r2, #0]
 8001c5a:	1850      	adds	r0, r2, r1
 8001c5c:	42a0      	cmp	r0, r4
 8001c5e:	d10b      	bne.n	8001c78 <_free_r+0x6c>
 8001c60:	6820      	ldr	r0, [r4, #0]
 8001c62:	4401      	add	r1, r0
 8001c64:	1850      	adds	r0, r2, r1
 8001c66:	4283      	cmp	r3, r0
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	d1e0      	bne.n	8001c2e <_free_r+0x22>
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4408      	add	r0, r1
 8001c72:	6010      	str	r0, [r2, #0]
 8001c74:	6053      	str	r3, [r2, #4]
 8001c76:	e7da      	b.n	8001c2e <_free_r+0x22>
 8001c78:	d902      	bls.n	8001c80 <_free_r+0x74>
 8001c7a:	230c      	movs	r3, #12
 8001c7c:	602b      	str	r3, [r5, #0]
 8001c7e:	e7d6      	b.n	8001c2e <_free_r+0x22>
 8001c80:	6820      	ldr	r0, [r4, #0]
 8001c82:	1821      	adds	r1, r4, r0
 8001c84:	428b      	cmp	r3, r1
 8001c86:	bf01      	itttt	eq
 8001c88:	6819      	ldreq	r1, [r3, #0]
 8001c8a:	685b      	ldreq	r3, [r3, #4]
 8001c8c:	1809      	addeq	r1, r1, r0
 8001c8e:	6021      	streq	r1, [r4, #0]
 8001c90:	6063      	str	r3, [r4, #4]
 8001c92:	6054      	str	r4, [r2, #4]
 8001c94:	e7cb      	b.n	8001c2e <_free_r+0x22>
 8001c96:	bd38      	pop	{r3, r4, r5, pc}
 8001c98:	2000021c 	.word	0x2000021c

08001c9c <sbrk_aligned>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8001cdc <sbrk_aligned+0x40>)
 8001ca0:	460c      	mov	r4, r1
 8001ca2:	6831      	ldr	r1, [r6, #0]
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	b911      	cbnz	r1, 8001cae <sbrk_aligned+0x12>
 8001ca8:	f000 f9d2 	bl	8002050 <_sbrk_r>
 8001cac:	6030      	str	r0, [r6, #0]
 8001cae:	4621      	mov	r1, r4
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	f000 f9cd 	bl	8002050 <_sbrk_r>
 8001cb6:	1c43      	adds	r3, r0, #1
 8001cb8:	d103      	bne.n	8001cc2 <sbrk_aligned+0x26>
 8001cba:	f04f 34ff 	mov.w	r4, #4294967295
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
 8001cc2:	1cc4      	adds	r4, r0, #3
 8001cc4:	f024 0403 	bic.w	r4, r4, #3
 8001cc8:	42a0      	cmp	r0, r4
 8001cca:	d0f8      	beq.n	8001cbe <sbrk_aligned+0x22>
 8001ccc:	1a21      	subs	r1, r4, r0
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f000 f9be 	bl	8002050 <_sbrk_r>
 8001cd4:	3001      	adds	r0, #1
 8001cd6:	d1f2      	bne.n	8001cbe <sbrk_aligned+0x22>
 8001cd8:	e7ef      	b.n	8001cba <sbrk_aligned+0x1e>
 8001cda:	bf00      	nop
 8001cdc:	20000218 	.word	0x20000218

08001ce0 <_malloc_r>:
 8001ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ce4:	1ccd      	adds	r5, r1, #3
 8001ce6:	f025 0503 	bic.w	r5, r5, #3
 8001cea:	3508      	adds	r5, #8
 8001cec:	2d0c      	cmp	r5, #12
 8001cee:	bf38      	it	cc
 8001cf0:	250c      	movcc	r5, #12
 8001cf2:	2d00      	cmp	r5, #0
 8001cf4:	4606      	mov	r6, r0
 8001cf6:	db01      	blt.n	8001cfc <_malloc_r+0x1c>
 8001cf8:	42a9      	cmp	r1, r5
 8001cfa:	d904      	bls.n	8001d06 <_malloc_r+0x26>
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	6033      	str	r3, [r6, #0]
 8001d00:	2000      	movs	r0, #0
 8001d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ddc <_malloc_r+0xfc>
 8001d0a:	f000 f869 	bl	8001de0 <__malloc_lock>
 8001d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8001d12:	461c      	mov	r4, r3
 8001d14:	bb44      	cbnz	r4, 8001d68 <_malloc_r+0x88>
 8001d16:	4629      	mov	r1, r5
 8001d18:	4630      	mov	r0, r6
 8001d1a:	f7ff ffbf 	bl	8001c9c <sbrk_aligned>
 8001d1e:	1c43      	adds	r3, r0, #1
 8001d20:	4604      	mov	r4, r0
 8001d22:	d158      	bne.n	8001dd6 <_malloc_r+0xf6>
 8001d24:	f8d8 4000 	ldr.w	r4, [r8]
 8001d28:	4627      	mov	r7, r4
 8001d2a:	2f00      	cmp	r7, #0
 8001d2c:	d143      	bne.n	8001db6 <_malloc_r+0xd6>
 8001d2e:	2c00      	cmp	r4, #0
 8001d30:	d04b      	beq.n	8001dca <_malloc_r+0xea>
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	4639      	mov	r1, r7
 8001d36:	4630      	mov	r0, r6
 8001d38:	eb04 0903 	add.w	r9, r4, r3
 8001d3c:	f000 f988 	bl	8002050 <_sbrk_r>
 8001d40:	4581      	cmp	r9, r0
 8001d42:	d142      	bne.n	8001dca <_malloc_r+0xea>
 8001d44:	6821      	ldr	r1, [r4, #0]
 8001d46:	4630      	mov	r0, r6
 8001d48:	1a6d      	subs	r5, r5, r1
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7ff ffa6 	bl	8001c9c <sbrk_aligned>
 8001d50:	3001      	adds	r0, #1
 8001d52:	d03a      	beq.n	8001dca <_malloc_r+0xea>
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	442b      	add	r3, r5
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	bb62      	cbnz	r2, 8001dbc <_malloc_r+0xdc>
 8001d62:	f8c8 7000 	str.w	r7, [r8]
 8001d66:	e00f      	b.n	8001d88 <_malloc_r+0xa8>
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	1b52      	subs	r2, r2, r5
 8001d6c:	d420      	bmi.n	8001db0 <_malloc_r+0xd0>
 8001d6e:	2a0b      	cmp	r2, #11
 8001d70:	d917      	bls.n	8001da2 <_malloc_r+0xc2>
 8001d72:	1961      	adds	r1, r4, r5
 8001d74:	42a3      	cmp	r3, r4
 8001d76:	6025      	str	r5, [r4, #0]
 8001d78:	bf18      	it	ne
 8001d7a:	6059      	strne	r1, [r3, #4]
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	bf08      	it	eq
 8001d80:	f8c8 1000 	streq.w	r1, [r8]
 8001d84:	5162      	str	r2, [r4, r5]
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f000 f82f 	bl	8001dec <__malloc_unlock>
 8001d8e:	f104 000b 	add.w	r0, r4, #11
 8001d92:	1d23      	adds	r3, r4, #4
 8001d94:	f020 0007 	bic.w	r0, r0, #7
 8001d98:	1ac2      	subs	r2, r0, r3
 8001d9a:	bf1c      	itt	ne
 8001d9c:	1a1b      	subne	r3, r3, r0
 8001d9e:	50a3      	strne	r3, [r4, r2]
 8001da0:	e7af      	b.n	8001d02 <_malloc_r+0x22>
 8001da2:	6862      	ldr	r2, [r4, #4]
 8001da4:	42a3      	cmp	r3, r4
 8001da6:	bf0c      	ite	eq
 8001da8:	f8c8 2000 	streq.w	r2, [r8]
 8001dac:	605a      	strne	r2, [r3, #4]
 8001dae:	e7eb      	b.n	8001d88 <_malloc_r+0xa8>
 8001db0:	4623      	mov	r3, r4
 8001db2:	6864      	ldr	r4, [r4, #4]
 8001db4:	e7ae      	b.n	8001d14 <_malloc_r+0x34>
 8001db6:	463c      	mov	r4, r7
 8001db8:	687f      	ldr	r7, [r7, #4]
 8001dba:	e7b6      	b.n	8001d2a <_malloc_r+0x4a>
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	42a3      	cmp	r3, r4
 8001dc2:	d1fb      	bne.n	8001dbc <_malloc_r+0xdc>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	6053      	str	r3, [r2, #4]
 8001dc8:	e7de      	b.n	8001d88 <_malloc_r+0xa8>
 8001dca:	230c      	movs	r3, #12
 8001dcc:	4630      	mov	r0, r6
 8001dce:	6033      	str	r3, [r6, #0]
 8001dd0:	f000 f80c 	bl	8001dec <__malloc_unlock>
 8001dd4:	e794      	b.n	8001d00 <_malloc_r+0x20>
 8001dd6:	6005      	str	r5, [r0, #0]
 8001dd8:	e7d6      	b.n	8001d88 <_malloc_r+0xa8>
 8001dda:	bf00      	nop
 8001ddc:	2000021c 	.word	0x2000021c

08001de0 <__malloc_lock>:
 8001de0:	4801      	ldr	r0, [pc, #4]	@ (8001de8 <__malloc_lock+0x8>)
 8001de2:	f7ff bf10 	b.w	8001c06 <__retarget_lock_acquire_recursive>
 8001de6:	bf00      	nop
 8001de8:	20000214 	.word	0x20000214

08001dec <__malloc_unlock>:
 8001dec:	4801      	ldr	r0, [pc, #4]	@ (8001df4 <__malloc_unlock+0x8>)
 8001dee:	f7ff bf0b 	b.w	8001c08 <__retarget_lock_release_recursive>
 8001df2:	bf00      	nop
 8001df4:	20000214 	.word	0x20000214

08001df8 <__sflush_r>:
 8001df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	0716      	lsls	r6, r2, #28
 8001e00:	4605      	mov	r5, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	d454      	bmi.n	8001eb0 <__sflush_r+0xb8>
 8001e06:	684b      	ldr	r3, [r1, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	dc02      	bgt.n	8001e12 <__sflush_r+0x1a>
 8001e0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	dd48      	ble.n	8001ea4 <__sflush_r+0xac>
 8001e12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e14:	2e00      	cmp	r6, #0
 8001e16:	d045      	beq.n	8001ea4 <__sflush_r+0xac>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e1e:	682f      	ldr	r7, [r5, #0]
 8001e20:	6a21      	ldr	r1, [r4, #32]
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	d030      	beq.n	8001e88 <__sflush_r+0x90>
 8001e26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	0759      	lsls	r1, r3, #29
 8001e2c:	d505      	bpl.n	8001e3a <__sflush_r+0x42>
 8001e2e:	6863      	ldr	r3, [r4, #4]
 8001e30:	1ad2      	subs	r2, r2, r3
 8001e32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e34:	b10b      	cbz	r3, 8001e3a <__sflush_r+0x42>
 8001e36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e40:	6a21      	ldr	r1, [r4, #32]
 8001e42:	47b0      	blx	r6
 8001e44:	1c43      	adds	r3, r0, #1
 8001e46:	89a3      	ldrh	r3, [r4, #12]
 8001e48:	d106      	bne.n	8001e58 <__sflush_r+0x60>
 8001e4a:	6829      	ldr	r1, [r5, #0]
 8001e4c:	291d      	cmp	r1, #29
 8001e4e:	d82b      	bhi.n	8001ea8 <__sflush_r+0xb0>
 8001e50:	4a28      	ldr	r2, [pc, #160]	@ (8001ef4 <__sflush_r+0xfc>)
 8001e52:	410a      	asrs	r2, r1
 8001e54:	07d6      	lsls	r6, r2, #31
 8001e56:	d427      	bmi.n	8001ea8 <__sflush_r+0xb0>
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6062      	str	r2, [r4, #4]
 8001e5c:	6922      	ldr	r2, [r4, #16]
 8001e5e:	04d9      	lsls	r1, r3, #19
 8001e60:	6022      	str	r2, [r4, #0]
 8001e62:	d504      	bpl.n	8001e6e <__sflush_r+0x76>
 8001e64:	1c42      	adds	r2, r0, #1
 8001e66:	d101      	bne.n	8001e6c <__sflush_r+0x74>
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	b903      	cbnz	r3, 8001e6e <__sflush_r+0x76>
 8001e6c:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e70:	602f      	str	r7, [r5, #0]
 8001e72:	b1b9      	cbz	r1, 8001ea4 <__sflush_r+0xac>
 8001e74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d002      	beq.n	8001e82 <__sflush_r+0x8a>
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f7ff fec5 	bl	8001c0c <_free_r>
 8001e82:	2300      	movs	r3, #0
 8001e84:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e86:	e00d      	b.n	8001ea4 <__sflush_r+0xac>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	47b0      	blx	r6
 8001e8e:	4602      	mov	r2, r0
 8001e90:	1c50      	adds	r0, r2, #1
 8001e92:	d1c9      	bne.n	8001e28 <__sflush_r+0x30>
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0c6      	beq.n	8001e28 <__sflush_r+0x30>
 8001e9a:	2b1d      	cmp	r3, #29
 8001e9c:	d001      	beq.n	8001ea2 <__sflush_r+0xaa>
 8001e9e:	2b16      	cmp	r3, #22
 8001ea0:	d11d      	bne.n	8001ede <__sflush_r+0xe6>
 8001ea2:	602f      	str	r7, [r5, #0]
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e021      	b.n	8001eec <__sflush_r+0xf4>
 8001ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	e01a      	b.n	8001ee6 <__sflush_r+0xee>
 8001eb0:	690f      	ldr	r7, [r1, #16]
 8001eb2:	2f00      	cmp	r7, #0
 8001eb4:	d0f6      	beq.n	8001ea4 <__sflush_r+0xac>
 8001eb6:	0793      	lsls	r3, r2, #30
 8001eb8:	bf18      	it	ne
 8001eba:	2300      	movne	r3, #0
 8001ebc:	680e      	ldr	r6, [r1, #0]
 8001ebe:	bf08      	it	eq
 8001ec0:	694b      	ldreq	r3, [r1, #20]
 8001ec2:	1bf6      	subs	r6, r6, r7
 8001ec4:	600f      	str	r7, [r1, #0]
 8001ec6:	608b      	str	r3, [r1, #8]
 8001ec8:	2e00      	cmp	r6, #0
 8001eca:	ddeb      	ble.n	8001ea4 <__sflush_r+0xac>
 8001ecc:	4633      	mov	r3, r6
 8001ece:	463a      	mov	r2, r7
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	6a21      	ldr	r1, [r4, #32]
 8001ed4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001ed8:	47e0      	blx	ip
 8001eda:	2800      	cmp	r0, #0
 8001edc:	dc07      	bgt.n	8001eee <__sflush_r+0xf6>
 8001ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eee:	4407      	add	r7, r0
 8001ef0:	1a36      	subs	r6, r6, r0
 8001ef2:	e7e9      	b.n	8001ec8 <__sflush_r+0xd0>
 8001ef4:	dfbffffe 	.word	0xdfbffffe

08001ef8 <_fflush_r>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	690b      	ldr	r3, [r1, #16]
 8001efc:	4605      	mov	r5, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	b913      	cbnz	r3, 8001f08 <_fflush_r+0x10>
 8001f02:	2500      	movs	r5, #0
 8001f04:	4628      	mov	r0, r5
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
 8001f08:	b118      	cbz	r0, 8001f12 <_fflush_r+0x1a>
 8001f0a:	6a03      	ldr	r3, [r0, #32]
 8001f0c:	b90b      	cbnz	r3, 8001f12 <_fflush_r+0x1a>
 8001f0e:	f7ff fc95 	bl	800183c <__sinit>
 8001f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f3      	beq.n	8001f02 <_fflush_r+0xa>
 8001f1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f1c:	07d0      	lsls	r0, r2, #31
 8001f1e:	d404      	bmi.n	8001f2a <_fflush_r+0x32>
 8001f20:	0599      	lsls	r1, r3, #22
 8001f22:	d402      	bmi.n	8001f2a <_fflush_r+0x32>
 8001f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f26:	f7ff fe6e 	bl	8001c06 <__retarget_lock_acquire_recursive>
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	f7ff ff63 	bl	8001df8 <__sflush_r>
 8001f32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f34:	4605      	mov	r5, r0
 8001f36:	07da      	lsls	r2, r3, #31
 8001f38:	d4e4      	bmi.n	8001f04 <_fflush_r+0xc>
 8001f3a:	89a3      	ldrh	r3, [r4, #12]
 8001f3c:	059b      	lsls	r3, r3, #22
 8001f3e:	d4e1      	bmi.n	8001f04 <_fflush_r+0xc>
 8001f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f42:	f7ff fe61 	bl	8001c08 <__retarget_lock_release_recursive>
 8001f46:	e7dd      	b.n	8001f04 <_fflush_r+0xc>

08001f48 <__swhatbuf_r>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f50:	4615      	mov	r5, r2
 8001f52:	2900      	cmp	r1, #0
 8001f54:	461e      	mov	r6, r3
 8001f56:	b096      	sub	sp, #88	@ 0x58
 8001f58:	da0c      	bge.n	8001f74 <__swhatbuf_r+0x2c>
 8001f5a:	89a3      	ldrh	r3, [r4, #12]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f62:	bf14      	ite	ne
 8001f64:	2340      	movne	r3, #64	@ 0x40
 8001f66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	6031      	str	r1, [r6, #0]
 8001f6e:	602b      	str	r3, [r5, #0]
 8001f70:	b016      	add	sp, #88	@ 0x58
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	466a      	mov	r2, sp
 8001f76:	f000 f849 	bl	800200c <_fstat_r>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	dbed      	blt.n	8001f5a <__swhatbuf_r+0x12>
 8001f7e:	9901      	ldr	r1, [sp, #4]
 8001f80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f88:	4259      	negs	r1, r3
 8001f8a:	4159      	adcs	r1, r3
 8001f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f90:	e7eb      	b.n	8001f6a <__swhatbuf_r+0x22>

08001f92 <__smakebuf_r>:
 8001f92:	898b      	ldrh	r3, [r1, #12]
 8001f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f96:	079d      	lsls	r5, r3, #30
 8001f98:	4606      	mov	r6, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	d507      	bpl.n	8001fae <__smakebuf_r+0x1c>
 8001f9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001fa2:	6023      	str	r3, [r4, #0]
 8001fa4:	6123      	str	r3, [r4, #16]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	6163      	str	r3, [r4, #20]
 8001faa:	b003      	add	sp, #12
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	466a      	mov	r2, sp
 8001fb0:	ab01      	add	r3, sp, #4
 8001fb2:	f7ff ffc9 	bl	8001f48 <__swhatbuf_r>
 8001fb6:	9f00      	ldr	r7, [sp, #0]
 8001fb8:	4605      	mov	r5, r0
 8001fba:	4639      	mov	r1, r7
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f7ff fe8f 	bl	8001ce0 <_malloc_r>
 8001fc2:	b948      	cbnz	r0, 8001fd8 <__smakebuf_r+0x46>
 8001fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fc8:	059a      	lsls	r2, r3, #22
 8001fca:	d4ee      	bmi.n	8001faa <__smakebuf_r+0x18>
 8001fcc:	f023 0303 	bic.w	r3, r3, #3
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	81a3      	strh	r3, [r4, #12]
 8001fd6:	e7e2      	b.n	8001f9e <__smakebuf_r+0xc>
 8001fd8:	89a3      	ldrh	r3, [r4, #12]
 8001fda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fe2:	81a3      	strh	r3, [r4, #12]
 8001fe4:	9b01      	ldr	r3, [sp, #4]
 8001fe6:	6020      	str	r0, [r4, #0]
 8001fe8:	b15b      	cbz	r3, 8002002 <__smakebuf_r+0x70>
 8001fea:	4630      	mov	r0, r6
 8001fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ff0:	f000 f81e 	bl	8002030 <_isatty_r>
 8001ff4:	b128      	cbz	r0, 8002002 <__smakebuf_r+0x70>
 8001ff6:	89a3      	ldrh	r3, [r4, #12]
 8001ff8:	f023 0303 	bic.w	r3, r3, #3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	81a3      	strh	r3, [r4, #12]
 8002002:	89a3      	ldrh	r3, [r4, #12]
 8002004:	431d      	orrs	r5, r3
 8002006:	81a5      	strh	r5, [r4, #12]
 8002008:	e7cf      	b.n	8001faa <__smakebuf_r+0x18>
	...

0800200c <_fstat_r>:
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	2300      	movs	r3, #0
 8002010:	4d06      	ldr	r5, [pc, #24]	@ (800202c <_fstat_r+0x20>)
 8002012:	4604      	mov	r4, r0
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	602b      	str	r3, [r5, #0]
 800201a:	f7fe fabb 	bl	8000594 <_fstat>
 800201e:	1c43      	adds	r3, r0, #1
 8002020:	d102      	bne.n	8002028 <_fstat_r+0x1c>
 8002022:	682b      	ldr	r3, [r5, #0]
 8002024:	b103      	cbz	r3, 8002028 <_fstat_r+0x1c>
 8002026:	6023      	str	r3, [r4, #0]
 8002028:	bd38      	pop	{r3, r4, r5, pc}
 800202a:	bf00      	nop
 800202c:	20000210 	.word	0x20000210

08002030 <_isatty_r>:
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	2300      	movs	r3, #0
 8002034:	4d05      	ldr	r5, [pc, #20]	@ (800204c <_isatty_r+0x1c>)
 8002036:	4604      	mov	r4, r0
 8002038:	4608      	mov	r0, r1
 800203a:	602b      	str	r3, [r5, #0]
 800203c:	f7fe fab9 	bl	80005b2 <_isatty>
 8002040:	1c43      	adds	r3, r0, #1
 8002042:	d102      	bne.n	800204a <_isatty_r+0x1a>
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	b103      	cbz	r3, 800204a <_isatty_r+0x1a>
 8002048:	6023      	str	r3, [r4, #0]
 800204a:	bd38      	pop	{r3, r4, r5, pc}
 800204c:	20000210 	.word	0x20000210

08002050 <_sbrk_r>:
 8002050:	b538      	push	{r3, r4, r5, lr}
 8002052:	2300      	movs	r3, #0
 8002054:	4d05      	ldr	r5, [pc, #20]	@ (800206c <_sbrk_r+0x1c>)
 8002056:	4604      	mov	r4, r0
 8002058:	4608      	mov	r0, r1
 800205a:	602b      	str	r3, [r5, #0]
 800205c:	f7fe fac0 	bl	80005e0 <_sbrk>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d102      	bne.n	800206a <_sbrk_r+0x1a>
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	b103      	cbz	r3, 800206a <_sbrk_r+0x1a>
 8002068:	6023      	str	r3, [r4, #0]
 800206a:	bd38      	pop	{r3, r4, r5, pc}
 800206c:	20000210 	.word	0x20000210

08002070 <_init>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr

0800207c <_fini>:
 800207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207e:	bf00      	nop
 8002080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002082:	bc08      	pop	{r3}
 8002084:	469e      	mov	lr, r3
 8002086:	4770      	bx	lr
