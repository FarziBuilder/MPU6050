#include <mpu6050.h>
#include <main.h>
#include <stdio.h>
#include <math.h>


extern I2C_HandleTypeDef hi2c1;

void mpu6050_Init(){
	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 100);

	  if (ret == HAL_OK){
		  printf("I AM READYY!");
	  }
	  else{
		  printf("NOOOO!!!");
	  }

	  uint8_t temp_data = GYRO_SCALE;

	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);

	  if (ret == HAL_OK)
	  {
		  printf("Written gyro! \n");
	  }
	  else
	  {
		  printf("NOT WRITTEN IN GYRO!!! \n");
	  }

	  temp_data = ACCEL_SCALE;

	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_ACCEL, 1, &temp_data, 1, 100);

	  if (ret == HAL_OK)
	  	  {
	  		  printf("Written accel! \n");
	  	  }
	  	  else
	  	  {
	  		  printf("NOT WRITTEN IN ACCEL!!! \n");
	  	  }

	  temp_data = 0;

	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_PWR, 1, &temp_data, 1, 100);

	  if (ret == HAL_OK)
		  {
			  printf("Power Mode ON! \n");
		  }
		  else
		  {
			  printf("Power Mode OFF!!! \n");
		  }
}

void mpu6050_ReadAccel()
{
	uint8_t dataX[2];
	HAL_StatusTypeDef retX = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_X, 1, dataX, 1, 100);

	uint16_t combinedX = (dataX[0] << 8) | dataX[1];
	int16_t accelX = (int16_t)combinedX;
	float final_accel_X = (accelX/AccelRange) * GValue;

//	if (retX == HAL_OK)
//	  {
//		printf("AccelX is %f \n",final_accel_X);
//	  }
//	  else
//	  {
//		  printf("OFF!!! \n");
//	  }

	uint8_t dataY[2];
	HAL_StatusTypeDef retY = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_Y, 1, dataY, 1, 100);

	uint16_t combinedY = (dataY[0] << 8) | dataY[1];
	int16_t accelY = (int16_t)combinedY;
	float final_accel_Y = (accelY/AccelRange) * GValue;

//	if (retY == HAL_OK)
//	  {
//		printf("AccelY is %f \n",final_accel_Y);
//	  }
//	  else
//	  {
//		  printf("OFF!!! \n");
//	  }

	uint8_t dataZ[2];
	HAL_StatusTypeDef retZ = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_Z, 1, dataZ, 1, 100);

	uint16_t combinedZ = (dataZ[0] << 8) | dataZ[1];
	int16_t accelZ = (int16_t)combinedZ;
	float final_accel_Z = (accelZ/AccelRange) * GValue;

//	if (retZ == HAL_OK)
//	  {
//		printf("AccelZ is %f \n",final_accel_Z);
//	  }
//	  else
//	  {
//		  printf("OFF!!! \n");
//	  }

	double AngleRoll = atan(final_accel_Y/sqrt(final_accel_X * final_accel_X + final_accel_Z*final_accel_Z)) * 1/(3.142/180) + 3.578485f;
	double AnglePitch = -atan(final_accel_X/sqrt(final_accel_Y*final_accel_Y + final_accel_Z*final_accel_Z))*1/(3.142/180);
	double AngleYaw = atan(final_accel_Z/sqrt(final_accel_X*final_accel_X + final_accel_Y*final_accel_Y)* 1/(3.142/180)) + 1.569705f;

	printf("Roll Angle is %f\n", AngleRoll);
	printf("Pitch Angle is %f\n", AnglePitch);
	printf("Yaw Angle is %f\n", AngleYaw);

	printf("\n \n \n \n");
}

void mpu6050_ReadGyro()
{
	uint8_t dataX[2];
	HAL_StatusTypeDef retX = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_X, 1, dataX, 1, 100);

	uint16_t combinedX = (dataX[0] << 8) | dataX[1];
	int16_t accelX = (int16_t)combinedX;
	float final_gyro_X = accelX * GYROCONVERTOR;

	if (retX == HAL_OK)
	  {
		printf("GyroX is %f \n",final_gyro_X);
	  }
	  else
	  {
		  printf("OFF!!! \n");
	  }

	uint8_t dataY[2];
	HAL_StatusTypeDef retY = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_Y, 1, dataY, 1, 100);

	uint16_t combinedY = (dataY[0] << 8) | dataY[1];
	int16_t accelY = (int16_t)combinedY;
	float final_gyro_Y = accelY * GYROCONVERTOR;

	if (retY == HAL_OK)
	  {
		printf("GyroY is %f \n",final_gyro_Y);
	  }
	  else
	  {
		  printf("OFF!!! \n");
	  }

	uint8_t dataZ[2];
	HAL_StatusTypeDef retZ = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_Z, 1, dataZ, 1, 100);

	uint16_t combinedZ = (dataZ[0] << 8) | dataZ[1];
	int16_t accelZ = (int16_t)combinedZ;
	float final_gyro_Z = accelZ * GYROCONVERTOR;

	if (retZ == HAL_OK)
	  {
		printf("GyroZ is %f \n",final_gyro_Z);
	  }
	  else
	  {
		  printf("OFF!!! \n");
	  }

	printf("\n");
}












